# *-* coding:utf8 *-*
from bxpy.日志包 import 日志生成器
from bxgis import 配置
import bxarcpy.工具包 as 工具包
from bxarcpy.环境包 import 输入输出类, 环境管理器类
from bxarcpy.要素包 import 要素类
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.数据库包 import 数据库类
from bxarcpy.要素数据集包 import 要素数据集类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置.配置包 import 配置类

基本信息 = 配置类.项目信息对象获取()


def 开发边界外城镇建设用地检查(
    输入要素名称="DIST_用地规划图",
    城镇集建区="KZX_城镇集建区",
    城镇弹性区="KZX_城镇弹性区",
    输出要素名称_开发边界内="内存临时",
    输出要素名称_开发边界外="内存临时",
    输出要素名称_开发边界外建设用地="内存临时",
    输出要素名称_开发边界内非建设用地="内存临时",
):
    日志生成器.临时关闭日志()
    城镇开发边界 = 要素类.要素创建_通过合并([城镇集建区, 城镇弹性区])
    控制线名称字段名称 = 基本信息.控制线要素字段映射.控制线名称字段名称
    用地 = 要素类.要素创建_通过复制(输入要素名称)

    # 预处理
    if 控制线名称字段名称 not in 要素类.字段名称列表获取(城镇开发边界):
        raise Exception(f"城镇开发边界中未包括{控制线名称字段名称}字段。")
    要素类.字段删除(城镇开发边界, 保留字段名称列表=[控制线名称字段名称])

    边界内用地 = 要素类.要素创建_通过相交([用地, 城镇开发边界])
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(边界内用地, "AA_边界内用地")
        日志生成器.输出调试(f"已输出AA_边界内用地")

    边界外用地 = 要素类.要素创建_通过擦除(用地, 城镇开发边界)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(边界外用地, "AA_边界外用地")
        日志生成器.输出调试(f"已输出AA_边界外用地")

    边界外建设用地 = 要素类.要素创建_通过筛选(边界外用地, "(地类编号 LIKE '07%' OR 地类编号 LIKE '08%' OR 地类编号 LIKE '09%' OR 地类编号 LIKE '10%' OR 地类编号 LIKE '11%' OR 地类编号 LIKE '12%' OR 地类编号 LIKE '13%' OR 地类编号 LIKE '14%' OR 地类编号 LIKE '15%' OR 地类编号 LIKE '16%') AND 地类编号 NOT LIKE '0703%' AND 地类编号 NOT LIKE '0704%' AND 地类编号 NOT LIKE '%v'")
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(边界外建设用地, "AA_边界外建设用地")
        日志生成器.输出调试(f"已输出AA_边界外建设用地")

    边界内非建设用地 = 要素类.要素创建_通过筛选(边界内用地, "地类编号 LIKE '01%' OR 地类编号 LIKE '02%' OR 地类编号 LIKE '03%' OR 地类编号 LIKE '04%' OR 地类编号 LIKE '05%' OR 地类编号 LIKE '06%' OR 地类编号 LIKE '0703%' OR 地类编号 LIKE '0704%' OR 地类编号 LIKE '%v' OR 地类编号 LIKE '17%'")
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(边界内非建设用地, "AA_边界内非建设用地")
        日志生成器.输出调试(f"已输出AA_边界内非建设用地")

    边界外建设用地 = 要素类.要素创建_通过多部件至单部件(边界外建设用地)
    边界内非建设用地 = 要素类.要素创建_通过多部件至单部件(边界内非建设用地)

    输出要素名称_开发边界内 = 工具包.临时路径生成(["开发边界内外地类检查", "开发边界内"]) if 输出要素名称_开发边界内 == "内存临时" else 输出要素名称_开发边界内
    输出要素名称_开发边界外 = 工具包.临时路径生成(["开发边界内外地类检查", "开发边界外"]) if 输出要素名称_开发边界外 == "内存临时" else 输出要素名称_开发边界外
    输出要素名称_开发边界内非建设用地 = 工具包.临时路径生成(["开发边界内外地类检查", "开发边界内非建设用地"]) if 输出要素名称_开发边界内非建设用地 == "内存临时" else 输出要素名称_开发边界内非建设用地
    输出要素名称_开发边界外建设用地 = 工具包.临时路径生成(["开发边界内外地类检查", "开发边界外建设用地"]) if 输出要素名称_开发边界外建设用地 == "内存临时" else 输出要素名称_开发边界外建设用地

    边界内用地 = 要素类.要素创建_通过复制并重命名重名要素(边界内用地, 输出要素名称_开发边界内)
    边界外用地 = 要素类.要素创建_通过复制并重命名重名要素(边界外用地, 输出要素名称_开发边界外)
    边界外建设用地 = 要素类.要素创建_通过复制并重命名重名要素(边界外建设用地, 输出要素名称_开发边界外建设用地)
    边界内非建设用地 = 要素类.要素创建_通过复制并重命名重名要素(边界内非建设用地, 输出要素名称_开发边界内非建设用地)

    return 边界内用地, 边界外用地, 边界外建设用地, 边界内非建设用地


if __name__ == "__main__":
    # 工作空间 = r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb"
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        开发边界外城镇建设用地检查(
            输入要素名称="DIST_用地规划图",
            城镇集建区="KZX_城镇集建区",
            城镇弹性区="KZX_城镇弹性区",
            输出要素名称_开发边界外建设用地="AC_开发边界外建设用地",
            输出要素名称_开发边界内非建设用地="AC_开发边界内非建设用地",
        )
