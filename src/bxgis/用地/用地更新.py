# *-* coding:utf8 *-*

from bxpy.日志包 import 日志生成器, 日志处理器
from bxpy.基本对象包 import 字类, 字典类
from typing import Union, Literal, Optional
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类, 字段类
from bxarcpy.游标包 import 游标类
from bxarcpy.几何包 import 几何类
from bxarcpy.数据库包 import 数据库类
from bxarcpy.要素数据集包 import 要素数据集类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息
from bxgis.常用 import 属性更新


def 用地更新(
    用地要素路径="DIST_用地规划图",
    街坊范围线要素名称: Optional[str] = "JX_街坊范围线",
    分村范围线要素名称: Optional[str] = "JX_分村范围线",
    城镇集建区要素名称="KZX_城镇集建区",
    城镇弹性区要素名称="KZX_城镇弹性区",
    有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
    有坐落单位信息的要素名称="CZ_三调筛选_坐落单位名称",
    设施要素名称: Union[str, None] = "SS_配套设施",
    是否进行合规性检查=True,
    是否对用地边界进行调整=True,
    是否重新计算所属街区街坊和分村=True,
    是否重新计算耕保量=True,
    是否根据地类编号生成地类名称=True,
    是否计算地块编号=True,
    是否计算土地码=True,
    是否计算开发动态=True,
    是否计算地块内设施规模=True,
    是否计算建筑规模市政规模等其他属性=True,
    输出要素路径="内存临时",
):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["用地更新"]) if 输出要素路径 == "内存临时" else 输出要素路径

    if 街坊范围线要素名称 is None and 分村范围线要素名称 is None:
        输入输出类.输出消息(f"因街坊范围线和分村范围线均不存在，所以无法自动生成地块编号。")
    用地要素 = 要素类.要素创建_通过复制(用地要素路径)

    if 是否进行合规性检查:
        输入输出类.输出消息("开始合规性检查")
        from bxgis.用地.分析 import 用地合规性检查

        用地要素 = 用地合规性检查.用地合规性检查(用地要素)
        import bxgis.常用.数据检查 as 数据检查

        if 街坊范围线要素名称:
            数据检查.数据检查(街坊范围线要素名称, 是否几何修复=False)
        if 分村范围线要素名称:
            数据检查.数据检查(分村范围线要素名称, 是否几何修复=False)
        数据检查.数据检查(城镇集建区要素名称, 是否几何修复=False)
        数据检查.数据检查(城镇弹性区要素名称, 是否几何修复=False)
        数据检查.数据检查(有扣除地类系数的要素名称, 是否几何修复=False)
        数据检查.数据检查(有坐落单位信息的要素名称, 是否几何修复=False, 是否范围检查=False)
        数据检查.数据检查(用地要素, 是否几何修复=False)
        输入输出类.输出消息("通过了数据合规性检查")

    if 是否对用地边界进行调整:
        输入输出类.输出消息("开始融合部分地类")
        用地要素 = 融合部分地类(用地要素)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了部分地类的融合")
        输入输出类.输出消息("完成了部分地类的融合")

    if 是否对用地边界进行调整:
        输入输出类.输出消息("开始将地块根据扣除地类系数、开发边界、街坊、分村进行分割")
        用地要素 = 对用地进行分割(用地要素, [街坊范围线要素名称, 分村范围线要素名称])
        用地要素 = 对用地进行分割_按扣除地类系数分割耕地(用地要素, 有扣除地类系数的要素名称)
        用地要素 = 对用地进行分割_按开发边界分割非建设用地(用地要素, 城镇集建区要素名称, 城镇弹性区要素名称)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了根据开发边界_扣除地类系数_街坊分村线的分割")
        输入输出类.输出消息("完成了根据开发边界、扣除地类系数、街坊、分村的分割")

    if 是否对用地边界进行调整:
        if 街坊范围线要素名称:
            用地要素 = 属性更新.要素创建_通过更新_根据面(用地要素, 区域要素名称=街坊范围线要素名称, 字段映射列表=[[基本信息.地块要素字段映射.所属街坊字段名称, 基本信息.区域要素字段映射.区域编号字段名称]], 计算方式="内点在区域要素内")
            用地要素 = 根据所属街坊生成所属街区(用地要素)
        else:
            要素类.字段添加(用地要素, 基本信息.地块要素字段映射.所属街坊字段名称)

        if 分村范围线要素名称:
            用地要素 = 属性更新.要素创建_通过更新_根据面(用地要素, 区域要素名称=分村范围线要素名称, 字段映射列表=[[基本信息.地块要素字段映射.所属分村字段名称, 基本信息.区域要素字段映射.区域编号字段名称]], 计算方式="内点在区域要素内")
        else:
            要素类.字段添加(用地要素, 基本信息.地块要素字段映射.所属分村字段名称)

        用地要素 = 将道路根据街坊分村合并成多部件(用地要素)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了道路的融合_进行到这里地块界线稳定了")
        输入输出类.输出消息("完成了道路的融合_进行到这里地块界线稳定了")

    if 是否重新计算所属街区街坊和分村:
        if 街坊范围线要素名称:
            用地要素 = 属性更新.要素创建_通过更新_根据面(用地要素, 区域要素名称=街坊范围线要素名称, 字段映射列表=[[基本信息.地块要素字段映射.所属街坊字段名称, 基本信息.区域要素字段映射.区域编号字段名称]], 计算方式="内点在区域要素内")
            用地要素 = 根据所属街坊生成所属街区(用地要素)
        else:
            要素类.字段添加(用地要素, 基本信息.地块要素字段映射.所属街坊字段名称)

        if 分村范围线要素名称:
            用地要素 = 属性更新.要素创建_通过更新_根据面(用地要素, 区域要素名称=分村范围线要素名称, 字段映射列表=[[基本信息.地块要素字段映射.所属分村字段名称, 基本信息.区域要素字段映射.区域编号字段名称]], 计算方式="内点在区域要素内")
        else:
            要素类.字段添加(用地要素, 基本信息.地块要素字段映射.所属分村字段名称)

        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了所属街坊分村的计算")
        输入输出类.输出消息("完成了所属街坊分村的计算")

    if 是否重新计算耕保量:
        用地要素 = 计算耕保量(用地要素, 有扣除地类系数的要素路径=有扣除地类系数的要素名称)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了耕保量的计算")
        输入输出类.输出消息("完成了耕保量的计算")

    if 是否根据地类编号生成地类名称:
        用地要素 = 根据地类编号生成名称(用地要素)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了根据地类编号生成名称")
        输入输出类.输出消息("完成了根据地类编号生成名称")

    if 是否计算地块编号:
        用地要素 = 计算地块编号(用地要素, 城镇集建区要素名称, 城镇弹性区要素名称)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了地块编号的计算")
        输入输出类.输出消息("完成了地块编号的计算")

    # 用地要素 = 根据地类编号生成名称(用地要素)
    # if 日志类.属性获取_当前函数内日志开启状态():
    #     要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了地类名称等的计算")
    # 输入输出类.输出消息("完成了地类名称等的计算")

    if 是否计算土地码:
        用地要素 = 计算土地码(用地要素, 地籍要素名称=有坐落单位信息的要素名称)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了土地码的计算")
        输入输出类.输出消息("完成了土地码的计算")

    if 是否计算开发动态:
        用地要素 = 计算开发动态(用地要素)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了开发动态的计算")
        输入输出类.输出消息("完成了开发动态的计算")

    if 是否计算地块内设施规模:
        if 设施要素名称:
            用地要素 = 计算地块内设施规模(用地要素, 设施要素名称)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了配套设施的计算")
        输入输出类.输出消息("完成了配套设施的计算")

    if 是否计算建筑规模市政规模等其他属性:
        用地要素 = 计算地块其他属性(用地要素)
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_完成了其他属性的计算")
        输入输出类.输出消息("完成了其他属性的计算")

    from bxgis.常用 import 数据检查

    用地要素 = 数据检查.数据检查(用地要素, 是否几何修复=False)
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素路径)
    # task: 计算配套设施规模字段
    return 输出要素


def 融合部分地类(输入要素路径, 地类编号字段名称=基本信息.地块要素字段映射.地类编号字段名称, 是否融合道路用地=True, 是否融合非建设用地=True, 输出要素路径="内存临时"):
    # 需要保证所有地块都具有所属街区和所属街坊两个字段并赋值
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["融合部分地类"]) if 输出要素路径 == "内存临时" else 输出要素路径

    输入要素 = 要素类.要素创建_通过复制(输入要素路径)

    # # 公路编号
    # 公路要素 = 输入要素.要素创建_通过筛选(f"{地类编号字段名称} LIKE '1202%'")
    # 公路要素 = 公路要素.要素创建_通过融合([地类编号字段名称])
    # 输入要素 = 输入要素.要素创建_通过更新并合并字段(公路要素.名称)

    # 道路编号
    if 是否融合道路用地:
        道路要素 = 要素类.要素创建_通过筛选(输入要素, f"{地类编号字段名称} LIKE '1207%'")
        道路要素 = 要素类.要素创建_通过融合(道路要素, [地类编号字段名称])
        输入要素 = 要素类.要素创建_通过更新并合并字段(输入要素, 道路要素)

    # 非建设用地编号
    if 是否融合非建设用地:
        非建设用地要素 = 要素类.要素创建_通过筛选(输入要素, f"{地类编号字段名称} LIKE '01%' Or {地类编号字段名称} LIKE '02%' Or {地类编号字段名称} LIKE '03%' Or {地类编号字段名称} LIKE '04%' Or {地类编号字段名称} LIKE '05%' Or {地类编号字段名称} LIKE '06%' Or {地类编号字段名称} LIKE '17%'")
        非建设用地要素 = 要素类.要素创建_通过融合(非建设用地要素, [地类编号字段名称])
        输入要素 = 要素类.要素创建_通过更新并合并字段(输入要素, 非建设用地要素)

    # 输出
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(输入要素, 输出要素路径)
    return 输出要素


def 对用地进行分割_按扣除地类系数分割耕地(输入要素路径, 有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数", 输出要素路径="内存临时"):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["按扣除地类系数分割耕地"]) if 输出要素路径 == "内存临时" else 输出要素路径

    用地要素 = 要素类.要素创建_通过复制(输入要素路径)
    有扣除地类系数的要素 = 要素类.要素创建_通过复制(有扣除地类系数的要素名称)
    if "扣除地类系数" not in 要素类.字段名称列表获取(有扣除地类系数的要素):
        raise Exception(f"{有扣除地类系数的要素名称}中未包括【扣除地类系数】字段，建议通过【用地/基期/字段处理并生成分项】来创建带有该字段的要素。")

    仅有耕地的要素 = 要素类.要素创建_通过筛选(用地要素, f"{基本信息.地块要素字段映射.地类编号字段名称} LIKE '01%'")

    既是耕地又带有扣除地类系数 = 要素类.要素创建_通过裁剪(输入要素路径=有扣除地类系数的要素名称, 裁剪要素路径=仅有耕地的要素)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(既是耕地又带有扣除地类系数, "AA_去除非耕地后有扣除地类系数的要素")
        日志生成器.输出并暂停("去除非耕地后有扣除地类系数的要素")

    分割后要素 = 要素类.要素创建_通过分割(用地要素, 既是耕地又带有扣除地类系数)

    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(分割后要素, "AA_分割后要素")
        日志生成器.输出并暂停("分割后要素")

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(分割后要素, 输出要素路径)
    return 输出要素


def 对用地进行分割_按开发边界分割非建设用地(输入要素路径, 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素路径="内存临时"):
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["按开发边界分割非建设用地"]) if 输出要素路径 == "内存临时" else 输出要素路径

    用地要素 = 要素类.要素创建_通过复制(输入要素路径)
    城镇集建区 = 要素类.要素创建_通过复制(城镇集建区要素名称)
    城镇弹性区 = 要素类.要素创建_通过复制(城镇弹性区要素名称)

    地类编号字段名称 = 基本信息.地块要素字段映射.地类编号字段名称

    非建设用地 = 要素类.要素创建_通过筛选(用地要素, f"{地类编号字段名称} LIKE '01%' OR {地类编号字段名称} LIKE '02%' OR {地类编号字段名称} LIKE '03%' OR {地类编号字段名称} LIKE '04%' OR {地类编号字段名称} LIKE '05%' OR {地类编号字段名称} LIKE '06%' OR {地类编号字段名称} LIKE '17%' OR {地类编号字段名称} LIKE '1207%'")

    分割后要素 = 要素类.要素创建_通过分割(非建设用地, 城镇集建区)
    分割后要素 = 要素类.要素创建_通过分割(分割后要素, 城镇弹性区)
    用地要素 = 要素类.要素创建_通过更新(用地要素, 分割后要素)

    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_分割后用地要素")
        日志生成器.输出并暂停("分割后用地要素")

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素路径)
    return 输出要素路径


def 对用地进行分割(输入要素路径, 分割要素列表, 输出要素路径="内存临时"):
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["对用地进行分割"]) if 输出要素路径 == "内存临时" else 输出要素路径
    用地 = 要素类.要素创建_通过复制(输入要素路径)
    for 分割要素路径x in 分割要素列表:
        if 分割要素路径x:
            分割要素 = 要素类.要素创建_通过复制(分割要素路径x)
            用地 = 要素类.要素创建_通过分割(用地, 分割要素)
    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(用地, 输出要素路径)
    return 输出要素路径


def 根据所属街坊生成所属街区(输入要素名称, 输出要素路径="内存临时"):
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["根据所属街坊生成所属街区"]) if 输出要素路径 == "内存临时" else 输出要素路径

    输入要素 = 要素类.要素创建_通过复制(输入要素名称)
    要素类.字段添加(输入要素, 基本信息.地块要素字段映射.所属街区字段名称)
    with 游标类.游标创建("更新", 输入要素, [基本信息.地块要素字段映射.所属街坊字段名称, 基本信息.地块要素字段映射.所属街区字段名称]) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, [基本信息.地块要素字段映射.所属街坊字段名称, 基本信息.地块要素字段映射.所属街区字段名称]):
            if x[基本信息.地块要素字段映射.所属街坊字段名称] not in ["", None, " "]:
                x[基本信息.地块要素字段映射.所属街区字段名称] = x[基本信息.地块要素字段映射.所属街坊字段名称][0:-2]
            游标类.行更新_字典形式(游标, x)

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(输入要素, 输出要素路径)
    return 输出要素


def 将道路根据街坊分村合并成多部件(输入要素路径, 输出要素路径="内存临时"):
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["道路合并成多部件"]) if 输出要素路径 == "内存临时" else 输出要素路径

    地块要素 = 要素类.要素创建_通过复制(输入要素路径)
    道路要素 = 要素类.要素创建_通过筛选(地块要素, f"{基本信息.地块要素字段映射.地类编号字段名称} LIKE '1207%'")
    道路要素 = 要素类.要素创建_通过融合(
        道路要素,
        融合字段列表=[
            基本信息.地块要素字段映射.地类编号字段名称,
            基本信息.地块要素字段映射.所属街区字段名称,
            基本信息.地块要素字段映射.所属街坊字段名称,
            基本信息.地块要素字段映射.所属分村字段名称,
        ],
        是否单部件=False,
    )
    地块要素 = 要素类.要素创建_通过更新(地块要素, 道路要素)
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(地块要素, 输出要素路径)
    return 输出要素


def 计算耕保量(输入要素名称, 有扣除地类系数的要素路径=基本信息.项目信息.CZ_三调_扣除地类系数, 输出要素路径="内存临时"):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["计算耕保量"]) if 输出要素路径 == "内存临时" else 输出要素路径

    用地要素 = 要素类.要素创建_通过复制(输入要素名称)
    要素类.字段删除(用地要素, ["扣除地类系数", 基本信息.地块要素字段映射.耕地保有量字段名称])
    有扣除地类系数的要素 = 要素类.要素创建_通过复制(有扣除地类系数的要素路径)
    有扣除地类系数的要素 = 要素类.要素创建_通过多部件至单部件(有扣除地类系数的要素)
    if "扣除地类系数" not in 要素类.字段名称列表获取(有扣除地类系数的要素):
        raise Exception(f"{有扣除地类系数的要素}中未包括【扣除地类系数】字段，建议通过【用地/基期/字段处理并生成分项】来创建带有该字段的要素。")

    仅有耕地的要素 = 要素类.要素创建_通过筛选(用地要素, f"{基本信息.地块要素字段映射.地类编号字段名称} LIKE '01%'")
    带有扣除系数的耕地要素 = 要素类.要素创建_通过裁剪(有扣除地类系数的要素, 仅有耕地的要素)
    带有扣除系数的耕地要素 = 要素类.要素创建_通过多部件至单部件(带有扣除系数的耕地要素)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(带有扣除系数的耕地要素, "AA_带有扣除系数的耕地要素")
        日志生成器.输出并暂停("带有扣除系数的耕地要素，按任意键继续……")

    合并扣除系数后耕地要素 = 要素类.要素创建_通过联合并赋值字段(仅有耕地的要素, 带有扣除系数的耕地要素, [["扣除地类系数", "扣除地类系数"]], 要素被分割时提示信息中包括的字段=[基本信息.地块要素字段映射.地类编号字段名称], 是否多部件转单部件=False)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(合并扣除系数后耕地要素, "AA_合并扣除系数后的要素")
        日志生成器.输出并暂停("合并扣除系数后，按任意键继续……")
    # 要素类.字段删除(合并扣除系数后要素, ["Shape_Length_1", "Shape_Area_1"])
    要素类.字段添加(合并扣除系数后耕地要素, 字段名称=基本信息.地块要素字段映射.耕地保有量字段名称, 字段类型="双精度", 字段长度=10)

    from bxpy.基本对象包 import 字类

    耕地保有量汇总 = 0
    操作字段列表 = [基本信息.地块要素字段映射.地类编号字段名称, "扣除地类系数", "SHAPE@AREA", 基本信息.地块要素字段映射.耕地保有量字段名称]
    with 游标类.游标创建("更新", 合并扣除系数后耕地要素, 操作字段列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段列表):
            if 字类.匹配正则(x[基本信息.地块要素字段映射.地类编号字段名称], "^01"):
                if x["扣除地类系数"] in ["", None, " "]:
                    x["扣除地类系数"] = 0.0
                耕地保有量 = (1.0 - float(x["扣除地类系数"])) * x["SHAPE@AREA"]
                耕地保有量汇总 += 耕地保有量
                x[基本信息.地块要素字段映射.耕地保有量字段名称] = 耕地保有量
                游标类.行更新_字典形式(游标, x)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(合并扣除系数后耕地要素, "AA_合并扣除系数后耕地要素")
        日志生成器.输出并暂停("合并扣除系数后耕地要素，按任意键继续……")

    要素类.字段添加(用地要素, 字段名称=基本信息.地块要素字段映射.耕地保有量字段名称, 字段类型="双精度", 字段长度=10)
    操作字段列表1 = [基本信息.地块要素字段映射.地类编号字段名称, 基本信息.地块要素字段映射.耕地保有量字段名称, "_形状", "_面积"]
    with 游标类.游标创建("更新", 用地要素, 操作字段列表1) as 游标_用地要素:
        操作字段列表2 = [基本信息.地块要素字段映射.耕地保有量字段名称, "_形状", "_面积"]
        with 游标类.游标创建("查询", 合并扣除系数后耕地要素, 操作字段列表2) as 游标_耕地要素:
            for 用地要素x in 游标类.属性获取_数据_字典形式(游标_用地要素, 操作字段列表1):
                if 用地要素x[基本信息.地块要素字段映射.耕地保有量字段名称] in ["", None, " "]:
                    用地要素x[基本信息.地块要素字段映射.耕地保有量字段名称] = 0.0
                for 耕地要素x in 游标类.属性获取_数据_字典形式(游标_耕地要素, 操作字段列表2):
                    # if 16769.0 < 用地要素x["_面积"] and 用地要素x["_面积"] < 16772.0 and 16610.0 < 耕地要素x["_面积"] and 耕地要素x["_面积"] < 16613.0:
                    #     input(几何类.关系_包含(用地要素x["_形状"], 耕地要素x["_形状"]))
                    if 几何类.关系_包含(用地要素x["_形状"], 耕地要素x["_形状"]):
                        用地要素x[基本信息.地块要素字段映射.耕地保有量字段名称] += 耕地要素x[基本信息.地块要素字段映射.耕地保有量字段名称]
                游标类.重置(游标_耕地要素)
                游标类.行更新_字典形式(游标_用地要素, 用地要素x)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_计算耕保量后用地要素")
        日志生成器.输出并暂停("计算耕保量后用地要素，按任意键继续……")

    输入输出类.输出消息(f"耕地保有量总和为：{耕地保有量汇总}")

    # 要素类.字段删除(合并扣除系数后耕地要素, ["扣除地类系数"])
    # 不同扣除系数的耕地最终还是根据地块编号进行了合并
    # 仅有耕地的要素 = 要素类.要素创建_通过筛选(合并扣除系数后要素, f"{基本信息.地块要素字段映射.地类编号字段名称} LIKE '01%'")
    # 仅有耕地的要素 = 要素类.要素创建_通过融合(仅有耕地的要素, [基本信息.地块要素字段映射.地块编号字段名称, 基本信息.地块要素字段映射.地类编号字段名称], [[基本信息.地块要素字段映射.耕地保有量字段名称, "SUM"]])

    # 合并扣除系数后要素 = 要素类.要素创建_通过更新并合并字段(合并扣除系数后要素, 仅有耕地的要素)
    # 要素类.字段删除(合并扣除系数后要素, ["扣除地类系数", 基本信息.地块要素字段映射.耕地保有量字段名称])
    # 要素类.字段修改(合并扣除系数后要素, "SUM_" + 基本信息.地块要素字段映射.耕地保有量字段名称, 基本信息.地块要素字段映射.耕地保有量字段名称, 基本信息.地块要素字段映射.耕地保有量字段名称, 清除字段别称=False)

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素路径)
    return 输出要素路径


def 根据地类编号生成名称(
    输入要素名称,
    地类编号字段名称=基本信息.地块要素字段映射.地类编号字段名称,
    性质名称字段名称=基本信息.地块要素字段映射.性质名称字段名称,
    地块性质别称字段名称=基本信息.地块要素字段映射.地块性质别称字段名称,
    用地构成字段名称=基本信息.地块要素字段映射.用地大类字段名称,
    输出要素路径="内存临时",
):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["根据地类编号生成名称"]) if 输出要素路径 == "内存临时" else 输出要素路径

    输入要素 = 要素类.要素创建_通过复制(输入要素名称)
    from bxpy.路径包 import 路径类
    from bxpy.基本对象包 import 字典类
    from bxgis.配置 import 基本信息

    配置文件路径 = 路径类.连接(基本信息.计算机信息.bxgis根目录, "配置", "地块_指标测算表.xlsx")
    基数转换映射表 = 字典类.转换_从excel(配置文件路径, 要读取的列=["性质名称", "地块性质", "地类标准", "地块性质别称", "用地构成"], 指定数据类型={"性质名称": str, "地块性质": str, "地类标准": str, "地块性质别称": str, "用地构成": str})

    日志生成器.输出调试(f"基数转换映射表为：{基数转换映射表}", 文件输出路径=r"C:\Users\beixiao\Desktop\01.txt", 内容长度=100000)
    要素类.字段添加(输入要素, 性质名称字段名称)
    要素类.字段添加(输入要素, 地块性质别称字段名称)
    要素类.字段添加(输入要素, 用地构成字段名称)
    部分地类未找到名称flag = False
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(输入要素, "AA_TEST2")
        日志生成器.输出调试(f"输入要素已导出")
    操作字段列表 = [地类编号字段名称, 性质名称字段名称, 地块性质别称字段名称, 用地构成字段名称]
    # 操作字段列表 = ["_ID", 地类编号字段名称, 性质名称字段名称, 地块性质别称字段名称, 用地构成字段名称]
    # 数据, 字段定义 = 要素类.转换_到numpy(输入要素, 操作字段列表)
    # # input(f"字段定义：{字段定义}")
    # 计数 = 0
    # for x in 数据:
    #     日志类.输出调试(f"当前性质为：{x}")
    #     对应的对象列表 = [基数转换映射表1 for 基数转换映射表1 in 基数转换映射表 if 基数转换映射表1["地块性质"] == x[地类编号字段名称] and 基数转换映射表1["地类标准"] == "国空"]
    #     日志类.输出调试(f"基数转换映射表中获取到的对应项为：{对应的对象列表}")
    #     if 对应的对象列表:
    #         x[性质名称字段名称] = 对应的对象列表[0]["性质名称"]
    #         x[地块性质别称字段名称] = 对应的对象列表[0]["地块性质别称"]
    #         x[用地构成字段名称] = 对应的对象列表[0]["用地构成"]
    #     else:
    #         输入输出类.输出消息(f"未找到 {x[地类编号字段名称]} 对应的 性质名称。")
    #         部分地类未找到名称flag = True
    #     计数 += 1
    #     from bxarcpy.环境包 import 输入输出类

    #     输入输出类.输出消息(f"计数：{str(计数)}")
    # if 部分地类未找到名称flag:
    #     raise Exception("部分地类编号没有找到对应的性质名称，请通过bxgis/配置/地块_指标测算表.xlsx添加地类。")
    # input(f"字段定义：{字段定义}")
    # 要素类.转换_从numpy(输入要素, 数据, ["_ID", "_ID"], 字段定义)
    with 游标类.游标创建("更新", 输入要素, 操作字段列表) as 游标:
        try:
            for x in 游标类.属性获取_数据_字典形式(游标, 操作字段列表):
                日志生成器.输出调试(f"当前性质为：{x}")
                对应的对象列表 = [基数转换映射表1 for 基数转换映射表1 in 基数转换映射表 if 基数转换映射表1["地块性质"] == x[地类编号字段名称] and 基数转换映射表1["地类标准"] == "国空"]
                日志生成器.输出调试(f"基数转换映射表中获取到的对应项为：{对应的对象列表}")
                if 对应的对象列表:
                    x[性质名称字段名称] = 对应的对象列表[0]["性质名称"]
                    x[地块性质别称字段名称] = 对应的对象列表[0]["地块性质别称"]
                    x[用地构成字段名称] = 对应的对象列表[0]["用地构成"]
                    游标类.行更新_字典形式(游标, x, 操作字段列表, 输入要素)
                else:
                    输入输出类.输出消息(f"未找到 {x[地类编号字段名称]} 对应的 性质名称。")
                    部分地类未找到名称flag = True
        except Exception as e:
            from bxpy.元数据包 import 追踪元数据类

            strrrr = 追踪元数据类.追踪信息获取()
            print(strrrr)
        # 日志类.输出调试(f"追踪到的错误：{strrrr}", 文件输出路径=r"C:\Users\beixiao\Desktop\01.txt")
    if 部分地类未找到名称flag:
        raise Exception("部分地类编号没有找到对应的性质名称，请通过bxgis/配置/地块_指标测算表.xlsx添加地类。")
    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(输入要素, 输出要素路径)
    return 输出要素路径


def 计算地块编号(输入要素路径, 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素路径="内存临时"):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["道路合并成多部件"]) if 输出要素路径 == "内存临时" else 输出要素路径
    # 需要保证所有地块都具有所属街区和所属街坊两个字段并赋值

    地块要素 = 要素类.要素创建_通过复制(输入要素路径)

    地类编号字段名称 = 基本信息.地块要素字段映射.地类编号字段名称
    地块编号字段名称 = 基本信息.地块要素字段映射.地块编号字段名称
    所属街坊字段名称 = 基本信息.地块要素字段映射.所属街坊字段名称
    所属分村字段名称 = 基本信息.地块要素字段映射.所属分村字段名称
    # 汇总已编号的地块情况
    需操作的字段名称列表 = [地类编号字段名称, 地块编号字段名称]
    地块编号字典 = {}
    编号存在重复flag = False
    with 游标类.游标创建("查询", 地块要素, 需操作的字段名称列表) as 游标_非建设用地:
        for 非建设用地x in 游标类.属性获取_数据_字典形式(游标_非建设用地, 需操作的字段名称列表):
            if 非建设用地x[基本信息.地块要素字段映射.地块编号字段名称] not in ["", " ", None] and 非建设用地x[基本信息.地块要素字段映射.地类编号字段名称][0:2] in ["07", "08", "09", "10", "11", "12", "13", "14", "15", "16"] and 非建设用地x[基本信息.地块要素字段映射.地类编号字段名称][0:4] not in ["1207"]:
                地块编号序号 = int(非建设用地x[基本信息.地块要素字段映射.地块编号字段名称].split("-")[-1])
                地块所属区域 = 非建设用地x[基本信息.地块要素字段映射.地块编号字段名称].split("-")[0]
                if 地块所属区域 in 地块编号字典 and 地块编号序号 not in 地块编号字典[地块所属区域]:
                    地块编号字典[地块所属区域].append(地块编号序号)
                elif 地块所属区域 in 地块编号字典 and 地块编号序号 in 地块编号字典[地块所属区域]:
                    编号存在重复flag = True
                    输入输出类.输出消息(f"{非建设用地x[基本信息.地块要素字段映射.地块编号字段名称]}存在重复")
                else:
                    地块编号字典[地块所属区域] = [地块编号序号]
    if 编号存在重复flag:
        raise Exception(f"部分地块的地块编号存在重复。")
    # print(f"地块编号字典：{地块编号字典}")
    日志生成器.输出并暂停(f"既有的地块编号字典：{地块编号字典}", 内容长度=20000)

    # 对未编号的建设用地进行编号
    是否有地块所属街坊和分村都为空flag = False
    操作字段 = [基本信息.地块要素字段映射.地类编号字段名称, 基本信息.地块要素字段映射.地块编号字段名称, 基本信息.地块要素字段映射.所属街坊字段名称, 基本信息.地块要素字段映射.所属分村字段名称, "_ID"]
    日志生成器.输出调试(f"地块要素字段列表：{要素类.字段名称列表获取(地块要素)}")
    with 游标类.游标创建("更新", 地块要素, 操作字段) as 游标_非建设用地:
        for 非建设用地x in 游标类.属性获取_数据_字典形式(游标_非建设用地, 操作字段):
            地块编号序号 = 1
            if 非建设用地x[基本信息.地块要素字段映射.地块编号字段名称] in ["", " ", None] and 非建设用地x[基本信息.地块要素字段映射.地类编号字段名称][0:2] in ["07", "08", "09", "10", "11", "12", "13", "14", "15", "16"] and 非建设用地x[基本信息.地块要素字段映射.地类编号字段名称][0:4] not in ["1207"]:
                if 非建设用地x[基本信息.地块要素字段映射.所属街坊字段名称] not in ["", " ", None]:
                    字典类.默认值设置(地块编号字典, [非建设用地x[基本信息.地块要素字段映射.所属街坊字段名称]], [])
                    while 地块编号序号 in 地块编号字典[非建设用地x[基本信息.地块要素字段映射.所属街坊字段名称]]:
                        地块编号序号 += 1
                    地块编号字典[非建设用地x[基本信息.地块要素字段映射.所属街坊字段名称]].append(地块编号序号)
                    非建设用地x[基本信息.地块要素字段映射.地块编号字段名称] = 非建设用地x[基本信息.地块要素字段映射.所属街坊字段名称] + "-" + 字类.格式_补位(str(地块编号序号), 2)
                    游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
                elif 非建设用地x[基本信息.地块要素字段映射.所属分村字段名称] not in ["", " ", None]:
                    字典类.默认值设置(地块编号字典, [非建设用地x[基本信息.地块要素字段映射.所属分村字段名称]], [])
                    while 地块编号序号 in 地块编号字典[非建设用地x[基本信息.地块要素字段映射.所属分村字段名称]]:
                        地块编号序号 += 1
                    地块编号字典[非建设用地x[基本信息.地块要素字段映射.所属分村字段名称]].append(地块编号序号)
                    非建设用地x[基本信息.地块要素字段映射.地块编号字段名称] = 非建设用地x[基本信息.地块要素字段映射.所属分村字段名称] + "-" + 字类.格式_补位(str(地块编号序号), 2)
                    游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
                else:
                    是否有地块所属街坊和分村都为空flag = True
                    输入输出类.输出消息(f"ID为{非建设用地x['_ID']}的地块所属街坊和所属分村都为空，无法生成编号。")
    if 是否有地块所属街坊和分村都为空flag:
        raise Exception("似乎有地块所属街坊和所属分村均为空。")
    日志生成器.输出并暂停(f"建设用地编号结束后的编号字典：{地块编号字典}", 内容长度=20000)

    # 对开发边界内的非建设用地（含河道、耕地等）进行编号
    非建设用地 = 要素类.要素创建_通过筛选(地块要素, f"{地类编号字段名称} LIKE '01%' Or {地类编号字段名称} LIKE '02%' Or {地类编号字段名称} LIKE '03%' Or {地类编号字段名称} LIKE '04%' Or {地类编号字段名称} LIKE '05%' Or {地类编号字段名称} LIKE '06%' Or {地类编号字段名称} LIKE '17%'")
    要素类.字段计算(非建设用地, 地块编号字段名称, "''")  # 清空所有非建设用地编号
    地块要素 = 要素类.要素创建_通过更新(地块要素, 非建设用地)

    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(地块要素, "AA_已完成非建设用地编号清除")
        日志生成器.输出并暂停("已完成非建设用地编号清除")

    # 非建设用地_边界外 = 要素类.要素创建_通过擦除(非建设用地, 城镇集建区要素名称)
    # 非建设用地_边界外 = 要素类.要素创建_通过擦除(非建设用地_边界外, 城镇弹性区要素名称)
    # 非建设用地_边界内 = 要素类.要素创建_通过擦除(非建设用地, 非建设用地_边界外)

    # if 日志类.属性获取_当前函数内日志开启状态():
    #     要素类.要素创建_通过复制并重命名重名要素(非建设用地_边界内, "AA_已完成边界内非建设用地提取")
    #     日志类.输出并暂停("已完成边界内非建设用地提取")

    开发边界要素 = 要素类.要素创建_通过合并([城镇集建区要素名称, 城镇弹性区要素名称])

    是否有河道所属街坊和分村都为空flag = False
    with 游标类.游标创建("更新", 非建设用地, [地类编号字段名称, 地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID", "_形状"]) as 游标_非建设用地:
        with 游标类.游标创建("查询", 开发边界要素, ["_形状"]) as 游标_开发边界:
            for 非建设用地x in 游标类.属性获取_数据_字典形式(游标_非建设用地, [地类编号字段名称, 地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID"]):
                是否在开发边界内 = False
                for 开发边界x in 游标类.属性获取_数据_字典形式(游标_开发边界, ["_形状"]):
                    if 几何类.关系_包含(开发边界x["_形状"], 几何类.属性获取_内点(非建设用地x["_形状"])):
                        是否在开发边界内 = True
                        break
                游标类.重置(游标_非建设用地)
                if 是否在开发边界内:
                    地块编号序号 = 1
                    if 非建设用地x[所属街坊字段名称] not in ["", " ", None]:
                        字典类.默认值设置(地块编号字典, [非建设用地x[所属街坊字段名称]], [])
                        日志生成器.输出调试(f"当前{非建设用地x[所属街坊字段名称]}编号列表是：{地块编号字典[非建设用地x[所属街坊字段名称]]}")
                        while 地块编号序号 in 地块编号字典[非建设用地x[所属街坊字段名称]]:
                            地块编号序号 += 1
                        地块编号字典[非建设用地x[所属街坊字段名称]].append(地块编号序号)
                        非建设用地x[地块编号字段名称] = 非建设用地x[所属街坊字段名称] + "-" + 字类.格式_补位(str(地块编号序号), 2)
                        日志生成器.输出调试(f"开发边界内非建设用地被编号为：{非建设用地x[地块编号字段名称]}")
                        游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
                    elif 非建设用地x[所属分村字段名称] not in ["", " ", None]:
                        字典类.默认值设置(地块编号字典, [非建设用地x[所属分村字段名称]], [])
                        while 地块编号序号 in 地块编号字典[非建设用地x[所属分村字段名称]]:
                            地块编号序号 += 1
                        地块编号字典[非建设用地x[所属分村字段名称]].append(地块编号序号)
                        非建设用地x[地块编号字段名称] = 非建设用地x[所属分村字段名称] + "-" + 字类.格式_补位(str(地块编号序号), 2)
                        游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
                    else:
                        是否有河道所属街坊和分村都为空flag = True
                        输入输出类.输出消息(f"ID为{非建设用地x['_ID']}的非建设用地所属街坊和所属分村都为空，无法生成编号。")
    if 是否有河道所属街坊和分村都为空flag:
        raise Exception("似乎有河道所属街坊和所属分村均为空")
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(非建设用地, "AA_已完成边界内非建设用地的编号")
        日志生成器.输出并暂停("已完成边界内非建设用地的编号")

    地块要素 = 要素类.要素创建_通过更新并合并字段(地块要素, 非建设用地, 是否多部件转单部件=False)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(地块要素, "AA_已完成开发边界内非建设用地编号的合并")
        日志生成器.输出并暂停("已完成开发边界内非建设用地编号的合并")
    日志生成器.输出并暂停(f"开发边界内非建设用地编号结束后的编号字典：{地块编号字典}", 内容长度=20000)

    # 道路编号
    道路要素 = 要素类.要素创建_通过筛选(地块要素, f"{地类编号字段名称} LIKE '1207%'")
    是否有道路所属街坊和分村都为空flag = False
    with 游标类.游标创建("更新", 道路要素, [地类编号字段名称, 地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID"]) as 游标_非建设用地:
        for 非建设用地x in 游标类.属性获取_数据_字典形式(游标_非建设用地, [地类编号字段名称, 地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID"]):
            if 非建设用地x[所属街坊字段名称] not in ["", " ", None]:
                if 非建设用地x[地类编号字段名称] == "1207":
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属街坊字段名称] + "-" + "CZ"
                elif 非建设用地x[地类编号字段名称] == "1207v":
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属街坊字段名称] + "-" + "XC"
            elif 非建设用地x[所属分村字段名称] not in ["", " ", None]:
                if 非建设用地x[地类编号字段名称] == "1207":
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属分村字段名称] + "-" + "CZ"
                elif 非建设用地x[地类编号字段名称] == "1207v":
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属分村字段名称] + "-" + "XC"
            else:
                是否有道路所属街坊和分村都为空flag = True
                输入输出类.输出消息(f"ID为{非建设用地x['_ID']}的道路所属街坊和所属分村都为空，无法生成编号。")
            游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
    if 是否有道路所属街坊和分村都为空flag:
        raise Exception("似乎有道路所属街区和所属分村均为空")
    地块要素 = 要素类.要素创建_通过更新并合并字段(地块要素, 道路要素, 是否多部件转单部件=False)
    日志生成器.输出并暂停(f"道路编号结束后的编号字典：{地块编号字典}", 内容长度=20000)

    # 非建设用地编号
    非建设用地要素 = 要素类.要素创建_通过筛选(地块要素, f"{地类编号字段名称} LIKE '01%' Or {地类编号字段名称} LIKE '02%' Or {地类编号字段名称} LIKE '03%' Or {地类编号字段名称} LIKE '04%' Or {地类编号字段名称} LIKE '05%' Or {地类编号字段名称} LIKE '06%' Or {地类编号字段名称} LIKE '17%'")
    非建设用地编号 = 0
    是否有非建设用地所属街坊和分村都为空flag = False
    with 游标类.游标创建("更新", 非建设用地要素, [地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID"]) as 游标_非建设用地:
        for 非建设用地x in 游标类.属性获取_数据_字典形式(游标_非建设用地, [地块编号字段名称, 所属街坊字段名称, 所属分村字段名称, "_ID"]):
            if 非建设用地x[所属街坊字段名称] not in ["", " ", None]:
                if 非建设用地x[地块编号字段名称] in ["", " ", None]:
                    非建设用地编号 += 1
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属街坊字段名称][0:4] + "-" + 字类.格式_补位(str(非建设用地编号), 2)  # type: ignore
            elif 非建设用地x[所属分村字段名称] not in ["", " ", None]:
                if 非建设用地x[地块编号字段名称] in ["", " ", None]:
                    非建设用地编号 += 1
                    非建设用地x[地块编号字段名称] = 非建设用地x[所属分村字段名称][0:4] + "-" + 字类.格式_补位(str(非建设用地编号), 2)  # type: ignore
            else:
                是否有非建设用地所属街坊和分村都为空flag = True
                输入输出类.输出消息(f"ID为{非建设用地x['_ID']}的非建设用地所属街坊和所属分村都为空，无法生成编号。")
            游标类.行更新_字典形式(游标_非建设用地, 非建设用地x)
    if 是否有非建设用地所属街坊和分村都为空flag:
        raise ValueError("似乎有非建设用地所属街区和所属分村均为空")
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(地块要素, "AA_已完成所有非建设用地编号")
        日志生成器.输出并暂停("已完成所有非建设用地编号")
    地块要素 = 要素类.要素创建_通过更新并合并字段(地块要素, 非建设用地要素, 是否多部件转单部件=False)
    日志生成器.输出并暂停(f"开发边界外非建设用地编号后字典：{地块编号字典}", 内容长度=20000)
    要素类.字段删除(地块要素, ["ORIG_FID", "扣除地类系数"])
    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(地块要素, 输出要素路径)
    return 输出要素路径


def 计算土地码(输入要素名称, 地籍要素名称="CZ_三调筛选_坐落单位名称", 输出要素名称="in_memory\\AA_计算土地码"):
    # 需要保证该编号的地块都已经编号
    日志生成器.临时关闭日志()
    if 输出要素名称 == "in_memory\\AA_计算土地码":
        输出要素名称 = 输出要素名称 + "_" + 工具包.生成短GUID()

    地块要素 = 要素类.要素创建_通过复制(输入要素名称)
    地籍要素 = 要素类.要素创建_通过复制(地籍要素名称)
    if "坐落单位代码" not in 要素类.字段名称列表获取(地籍要素):
        raise Exception(f"{地籍要素名称}中未包括 坐落单位代码 字段，建议通过 用地/基期/字段处理并生成分项 来创建带有该字段的要素。")
    要素类.字段添加(地块要素, 基本信息.地块要素字段映射.土地码字段名称)
    要素类.字段删除(地块要素, ["坐落单位代码"])
    要素类.字段删除(地籍要素, 保留字段名称列表=["坐落单位代码"])
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(地籍要素, "AA_清理字段后的地籍要素")
        日志生成器.输出并暂停("清理字段后的地籍要素")

    有地籍地块要素 = 要素类.要素创建_通过空间连接(地块要素, 地籍要素, "内点在连接要素内")

    需操作的字段名称列表 = [基本信息.地块要素字段映射.地块编号字段名称, 基本信息.地块要素字段映射.地类编号字段名称, 基本信息.地块要素字段映射.土地码字段名称, "坐落单位代码"]

    地块编号存在空值的要素 = 要素类.要素创建_通过筛选(有地籍地块要素, f"{基本信息.地块要素字段映射.地块编号字段名称} IS NULL")
    if 要素类.属性获取_几何数量(地块编号存在空值的要素) > 0:
        raise Exception(f"部分地块的地块编号为空，影响土地码生成。")
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(有地籍地块要素, "AA_将地块和地籍空间连接后")
        日志生成器.输出并暂停("导出了地块和地籍空间连接后要素")
    with 游标类.游标创建("更新", 有地籍地块要素, 需操作的字段名称列表) as 游标_地块:
        for x in 游标类.属性获取_数据_字典形式(游标_地块, 需操作的字段名称列表):
            地籍代码 = "H00000000"
            主地类编号 = "00000000"
            兼容性质数量 = 1
            街区编号 = "00"
            街坊编号 = "00"
            地块编号 = "000"

            # print(x["地块编号"])
            # print(len(x["地块编号"].split("-")))
            # print(x["地类编号"][0:2])

            if x[基本信息.地块要素字段映射.地块编号字段名称] not in ["", " ", None] and len(x[基本信息.地块要素字段映射.地块编号字段名称].split("-")) == 2 and len(x[基本信息.地块要素字段映射.地块编号字段名称].split("-")[0]) == 8:
                地籍代码 = "H" + x["坐落单位代码"][4:12]
                主地类编号 = x[基本信息.地块要素字段映射.地类编号字段名称].split("(")[0].split("/")[0].replace("v", "")
                兼容性质数量 = len(x[基本信息.地块要素字段映射.地类编号字段名称].split("(")[0].split("/"))
                街区编号 = x[基本信息.地块要素字段映射.地块编号字段名称][4:6]
                街坊编号 = x[基本信息.地块要素字段映射.地块编号字段名称][6:8]
                地块编号 = 字类.格式_补位(x[基本信息.地块要素字段映射.地块编号字段名称].split("-")[-1], 3)
                # print(地籍代码 + 主地类编号.ljust(8, "0") + f"X{兼容性质数量}" + 街区编号 + 街坊编号 + 地块编号 + "0")

                土地码 = 地籍代码 + 字类.格式_补位(主地类编号, 8, "后方") + f"X{兼容性质数量}" + 街区编号 + 街坊编号 + 地块编号 + "0"
                x[基本信息.地块要素字段映射.土地码字段名称] = 土地码

            游标类.行更新_字典形式(游标_地块, x)

    要素类.字段删除(有地籍地块要素, ["坐落单位代码"])
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(有地籍地块要素, 输出要素名称)
    return 输出要素


def 计算开发动态(输入要素名称, 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素名称="in_memory\\AA_计算开发动态"):
    if 输出要素名称 == "in_memory\\AA_计算开发动态":
        输出要素名称 = 输出要素名称 + "_" + 工具包.生成短GUID()
    from bxgis import 配置
    from bxgis.常用 import 属性更新

    输入要素 = 要素类.要素创建_通过复制(输入要素名称)
    集建区要素 = 要素类.要素创建_通过复制(城镇集建区要素名称)
    弹性区要素 = 要素类.要素创建_通过复制(城镇弹性区要素名称)
    开发边界要素 = 要素类.要素创建_通过合并([集建区要素, 弹性区要素])
    if 基本信息.控制线要素字段映射.控制线名称字段名称 not in 要素类.字段名称列表获取(开发边界要素):
        raise Exception(f"{城镇集建区要素名称}和{城镇弹性区要素名称}中未包括 {基本信息.控制线要素字段映射.控制线名称字段名称} 字段。")
    用地要素 = 属性更新.要素创建_通过更新_根据面(输入要素, 开发边界要素, 字段映射列表=[["所属三线", "控制线名称"]], 计算方式="内点在区域要素内")
    with 游标类.游标创建("更新", 用地要素, ["所属三线", 基本信息.地块要素字段映射.地类编号字段名称, 基本信息.地块要素字段映射.开发动态字段名称]) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, ["所属三线", 基本信息.地块要素字段映射.地类编号字段名称, 基本信息.地块要素字段映射.开发动态字段名称]):
            if x["所属三线"] not in ["", " ", None]:
                x["所属三线"] = "开发边界内"

            if x["开发动态"] in ["现状已实施", "现状保留", "保留"]:
                x["开发动态"] = "保留"
            elif x["开发动态"] in ["改/扩建", "改扩建", "盘活"] and x["所属三线"] == "开发边界内":
                x["开发动态"] = "改/扩建"
            elif x["开发动态"] in ["改/扩建", "改扩建", "盘活"] and x["所属三线"] != "开发边界内":
                x["开发动态"] = "盘活"
            elif x["地类编号"][0:2] in ["07", "08", "09", "10", "11", "12", "13", "14", "15", "16"] and x["地类编号"][0:4] not in ["1207", "1202"] and x["所属三线"] == "开发边界内":
                x["开发动态"] = "新建"
            elif x["地类编号"][0:2] in ["07", "08", "09", "10", "11", "12", "13", "14", "15", "16"] and x["地类编号"][0:4] not in ["1207", "1202"] and x["所属三线"] != "开发边界内":
                x["开发动态"] = "新增"
            else:
                x["开发动态"] = None

            游标类.行更新_字典形式(游标, x)
    要素类.字段删除(用地要素, ["所属三线"])

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素名称)
    return 输出要素


def 计算地块内设施规模(输入要素名称="DIST_用地规划图", 设施要素名称="SS_配套设施", 输出要素名称="内存临时"):
    日志生成器.临时关闭日志()
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_计算地块内设施规模" + "_" + 工具包.生成短GUID()

    用地要素 = 要素类.要素创建_通过复制(输入要素名称)
    设施要素 = 要素类.要素创建_通过复制(设施要素名称)

    设施字段名称列表 = 要素类.字段名称列表获取(设施要素)
    日志生成器.输出调试(f"设施字段名称列表：{设施字段名称列表}")
    if 基本信息.设施要素字段映射.设施名称字段名称 not in 设施字段名称列表 or 基本信息.设施要素字段映射.设施规模字段名称 not in 设施字段名称列表:
        raise Exception(f"{输入要素名称}缺少了{基本信息.设施要素字段映射.设施名称字段名称}或者{基本信息.设施要素字段映射.设施规模字段名称}字段。")

    要素类.字段添加(用地要素, 基本信息.地块要素字段映射.配套设施规模字段名称, 字段长度=255)
    要素类.字段添加(用地要素, 基本信息.地块要素字段映射.配套设施规模字段名称 + "2", 字段长度=255)
    要素类.字段添加(用地要素, 基本信息.地块要素字段映射.配套设施规模字段名称 + "3", 字段长度=255)
    使用到了配套设施规模2字段 = False
    使用到了配套设施规模3字段 = False
    用地游标操作字段 = ["_ID", "_形状", 基本信息.地块要素字段映射.配套设施规模字段名称, 基本信息.地块要素字段映射.配套设施规模字段名称 + "2", 基本信息.地块要素字段映射.配套设施规模字段名称 + "3"]
    设施游标操作字段 = ["_ID", "_形状", 基本信息.设施要素字段映射.设施名称字段名称, 基本信息.设施要素字段映射.设施规模字段名称]
    with 游标类.游标创建("更新", 用地要素, 用地游标操作字段) as 用地游标:
        with 游标类.游标创建("查询", 设施要素, 设施游标操作字段) as 设施游标:
            for 用地x in 游标类.属性获取_数据_字典形式(用地游标, 用地游标操作字段):
                地块设施规模内容 = []
                if 日志生成器.属性获取_当前函数内日志开启状态():
                    if int(用地x["_ID"]) == 300:
                        日志生成器.输出并暂停("开始ID300对象")
                for 设施x in 游标类.属性获取_数据_字典形式(设施游标, 设施游标操作字段):
                    if 几何类.关系_包含(用地x["_形状"], 设施x["_形状"]):
                        设施名称 = 设施x[基本信息.设施要素字段映射.设施名称字段名称]
                        设施规模 = 设施x[基本信息.设施要素字段映射.设施规模字段名称]
                        retList = [x for x in 地块设施规模内容 if x["设施名称"] == 设施名称]
                        if len(retList) > 0:
                            if 设施规模 not in ["", " ", None]:
                                newRet = {"设施名称": 设施名称, "设施数量": retList[0]["设施数量"] + 1, "设施规模": retList[0]["设施规模"] + "," + 设施规模}
                            else:
                                newRet = {"设施名称": 设施名称, "设施数量": retList[0]["设施数量"] + 1, "设施规模": retList[0]["设施规模"]}
                            地块设施规模内容.remove(retList[0])
                            地块设施规模内容.append(newRet)
                        else:
                            if 设施规模 not in ["", " ", None]:
                                newRet = {"设施名称": 设施名称, "设施数量": 1, "设施规模": 设施规模}
                            else:
                                newRet = {"设施名称": 设施名称, "设施数量": 1, "设施规模": ""}
                            地块设施规模内容.append(newRet)
                游标类.重置(设施游标)
                if 日志生成器.属性获取_当前函数内日志开启状态():
                    if int(用地x["_ID"]) == 300:
                        日志生成器.输出调试(f"地块设施规模内容为：{地块设施规模内容}")
                地块设施规模内容_字符串形式 = ""
                for x in 地块设施规模内容:
                    if x["设施规模"] not in ["", " ", None]:
                        地块设施规模内容_字符串形式 = f'{地块设施规模内容_字符串形式}{x["设施名称"]}-{str(x["设施数量"])}-{str(x["设施规模"])}/'
                    else:
                        地块设施规模内容_字符串形式 = f'{地块设施规模内容_字符串形式}{x["设施名称"]}-{str(x["设施数量"])}/'
                地块设施规模内容_字符串形式 = 地块设施规模内容_字符串形式[:-1]
                if 日志生成器.属性获取_当前函数内日志开启状态():
                    if int(用地x["_ID"]) == 300:
                        日志生成器.输出调试(f"地块设施规模内容_字符串形式为：{地块设施规模内容_字符串形式}")
                if len(地块设施规模内容_字符串形式) > 765:
                    raise Exception(f"ID为{用地x['_ID']}的地块的配套设施规模字符串长度超过了765。")
                elif len(地块设施规模内容_字符串形式) > 510:
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称] = 地块设施规模内容_字符串形式[0:255]
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称 + "2"] = 地块设施规模内容_字符串形式[255:510]
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称 + "3"] = 地块设施规模内容_字符串形式[510:]
                    使用到了配套设施规模2字段 = True
                    使用到了配套设施规模3字段 = True
                elif len(地块设施规模内容_字符串形式) > 255:
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称] = 地块设施规模内容_字符串形式[0:255]
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称 + "2"] = 地块设施规模内容_字符串形式[255:]
                    使用到了配套设施规模2字段 = True
                else:
                    用地x[基本信息.地块要素字段映射.配套设施规模字段名称] = 地块设施规模内容_字符串形式
                游标类.行更新_字典形式(用地游标, 用地x)
    # if 使用到了配套设施规模3字段 == False:
    #     要素类.字段删除(用地要素, [基本信息.地块要素字段映射.配套设施规模字段名称 + "3"])
    # if 使用到了配套设施规模2字段 == False:
    #     要素类.字段删除(用地要素, [基本信息.地块要素字段映射.配套设施规模字段名称 + "2"])
    用地要素 = 要素类.字段排序(用地要素, [基本信息.地块要素字段映射.地类编号字段名称])

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素名称)
    return 输出要素


def 计算地块其他属性(输入要素路径="DIST_用地规划图", 输出要素路径="内存临时"):
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["融合部分地类"]) if 输出要素路径 == "内存临时" else 输出要素路径

    输入要素 = 要素类.要素创建_通过复制(输入要素路径)
    输入要素字段名称列表 = 要素类.字段名称列表获取(输入要素)
    地块属性表 = 基本信息.应用信息.地块属性表获取()
    for 地块属性x in 地块属性表:
        if 地块属性x["属性名称"] not in 输入要素字段名称列表 and not 地块属性x["属性名称"].startswith("FS") and not 地块属性x["属性名称"].startswith("FN") and not 地块属性x["属性名称"].startswith("FD") and not 地块属性x["属性名称"].startswith("FAPP"):
            from bxarcpy.环境包 import 输入输出类

            要素类.字段添加(输入要素, 地块属性x["属性名称"], 字段类型=地块属性x["字段类型"], 字段长度=int(地块属性x["字段长度"]))
            输入输出类.输出消息(f'{要素类.属性获取_要素名称(输入要素)}，添加了字段，{地块属性x["属性名称"]}')
    from bxpy.进度条包 import 进度条类

    进度条实例 = 进度条类.进度条创建(总进度=要素类.属性获取_几何数量(输入要素), 前置信息="开始更新地块信息")
    用地游标操作字段 = [*要素类.字段名称列表获取(输入要素), "_面积"]
    with 游标类.游标创建("更新", 输入要素, 用地游标操作字段) as 用地游标:
        for 用地x in 游标类.属性获取_数据_字典形式(用地游标, 用地游标操作字段):
            # if 8956.0 < 用地x["_面积"] and 用地x["_面积"] < 8958.0:
            #     print(用地x)
            用地x = 计算地块其他属性_单个(用地x)
            # if 8956.0 < 用地x["_面积"] and 用地x["_面积"] < 8958.0:
            #     print(用地x)
            游标类.行更新_字典形式(用地游标, 用地x, 用地游标操作字段, 输入操作要素进行数据验证=输入要素)
            进度条类.更新(进度条实例, 1)

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(输入要素, 输出要素路径)
    return 输出要素


def 计算地块其他属性_单个(地块对象字典):
    临时字典 = {}
    地块对象字典, 临时字典 = 计算地块其他属性_单个_基本数据梳理(地块对象字典, 临时字典)
    地块对象字典, 临时字典 = 计算地块其他属性_单个_兼容比例设置(地块对象字典, 临时字典)
    地块对象字典, 临时字典 = 计算地块其他属性_单个_自生成属性设置(地块对象字典, 临时字典)
    地块对象字典, 临时字典 = 计算地块其他属性_单个_计算人防(地块对象字典, 临时字典)
    return 地块对象字典


def 计算地块其他属性_单个_基本数据梳理(地块对象字典, 临时字典):
    from bxpy.基本对象包 import 字类

    地块对象字典["地块性质"] = 地块对象字典["地类编号"] if 地块对象字典["地块性质"] in ["", None] else 地块对象字典["地块性质"]
    地块对象字典["面积"] = 字类.转换_到字(地块对象字典["_面积"])
    地块对象字典["面积公顷"] = 字类.转换_到字(地块对象字典["_面积"] / 10000, 小数点后位数=4)

    配套设施 = 地块对象字典["配套设施"]
    临时字典["配套设施列表"] = 配套设施.split("/") if isinstance(配套设施, str) else [""]
    if "" not in 临时字典["配套设施列表"]:
        临时字典["指标测算表"] = _根据地块性质输出特定性质的指标测算字典(地块对象字典["地块性质"], 临时字典["配套设施列表"])
    else:
        临时字典["指标测算表"] = _根据地块性质输出特定性质的指标测算字典(地块对象字典["地块性质"], 通过配套设施列表过滤=[None, ""])
    地块对象字典["唯一标识"] = 临时字典["指标测算表"]["唯一标识"]
    地块对象字典["性质名称"] = 临时字典["指标测算表"]["性质名称"]
    地块对象字典["用地构成"] = 临时字典["指标测算表"]["用地构成"]
    地块对象字典["地块颜色"] = 临时字典["指标测算表"]["地块颜色"]
    地块对象字典["地块性质别称"] = 临时字典["指标测算表"]["地块性质别称"].split(" ")[0] if 临时字典["指标测算表"]["地块性质别称"] not in [None, "", 0] else 地块对象字典["地块性质"]
    return 地块对象字典, 临时字典


def 计算地块其他属性_单个_兼容比例设置(地块对象字典, 临时字典):
    地块性质 = 地块对象字典["地块性质"]
    地块性质列表 = 地块性质.split("/")
    if len(地块性质列表) == 1:
        from bxpy.基本对象包 import 正则类

        # 将R2B1变成['R2','B1']
        地块性质列表 = 正则类(r"(?<!^)(?=[A-Z])").匹配字符串(地块性质, "替换匹配项", "_").split("_")  # type: ignore
    if len(地块性质列表) > 1:
        if 地块对象字典["兼容比例"] in [None, ""]:
            临时字典["兼容比例"] = "100" + "/0" * (len(地块性质列表) - 1)
        elif len(地块对象字典["兼容比例"]) != len(地块性质列表):
            临时字典["兼容比例"] = 地块对象字典["兼容比例"] + "/0" * (len(地块性质列表) - len(地块对象字典["兼容比例"].split("/")))
        else:
            临时字典["兼容比例"] = 地块对象字典["兼容比例"]
        兼容比例列表 = 临时字典["兼容比例"].split("/")
        for i in range(len(地块性质列表)):
            临时字典["兼容比例" + str(i + 1)] = float(兼容比例列表[i]) / 100
    return 地块对象字典, 临时字典


def 计算地块其他属性_单个_自生成属性设置(地块对象字典, 临时字典):
    from bxpy.基本对象包 import 字类, 字典类, 浮类

    if 地块对象字典["实体GUID"] in ["", " ", None] or len(地块对象字典["实体GUID"].split("-")) != 6:
        地块对象字典["实体GUID"] = 字类.字符串生成_GUID()

    地块对象字典["实体类型"] = "控规地块"

    if "-" not in 地块对象字典["容积率"]:
        临时字典["容积率区间"] = 地块对象字典["容积率"]
        临时字典["容积率"] = 地块对象字典["容积率"]
    else:
        临时字典["容积率区间"] = 地块对象字典["容积率"]
        临时字典["容积率"] = 地块对象字典["容积率"].split("-")[-1]

    地块属性表 = 基本信息.应用信息.地块属性表获取()

    班数 = 地块对象字典["班数"] if 地块对象字典["班数"] not in ["", None, 0, "0"] else "0+0+0+0"
    班数列表 = 班数.split("+")
    临时字典["班数幼"] = 班数列表[0]
    临时字典["班数小"] = 班数列表[1]
    临时字典["班数初"] = 班数列表[2]
    临时字典["班数高"] = 班数列表[3]
    for 属性定义x in 地块属性表:
        if 属性定义x["判断是否从测算表引入"] is not None:
            是否从测算表引入flag = 地块对象字典[属性定义x["判断是否从测算表引入"]]
            if 是否从测算表引入flag not in ["现状", "特殊"]:
                地块对象字典[属性定义x["属性名称"]] = 临时字典["指标测算表"][属性定义x["属性名称"]]
    for 属性定义x in 地块属性表:
        if 属性定义x["依托其他字段计算"] is not None:
            小数位数 = int(属性定义x["小数位数"])
            公式字符串 = 地块对象字典[属性定义x["依托其他字段计算"]]
            用于计算的字典 = 字典类.解包合并(地块对象字典, 临时字典)
            计算结果 = 字类.转换_到字(_公式计算(公式字符串, 用于计算的字典), 小数位数)
            地块对象字典[属性定义x["属性名称"]] = 计算结果
            if 属性定义x["属性名称"] == "面积指定":
                临时字典["面积"] = 地块对象字典["面积指定"] if 地块对象字典["面积指定"] not in ["", None, 0, "0"] else 地块对象字典["面积"]
                临时字典["面积平方米"] = 临时字典["面积"]
                临时字典["面积公顷"] = 字类.转换_到字(浮类.转换_到浮(临时字典["面积"]) / 10000, 小数点后位数=4)
                临时字典["用地面积"] = 字类.转换_到字(浮类.转换_到浮(临时字典["面积"]) / 10000)
                地块对象字典["面积公顷"] = 字类.转换_到字(浮类.转换_到浮(临时字典["面积"]) / 10000, 小数点后位数=4)
            if 属性定义x["属性名称"] == "地块建筑面积":
                临时字典["建筑面积"] = 地块对象字典["地块建筑面积"]

    return 地块对象字典, 临时字典


def 计算地块其他属性_单个_计算人防(地块对象字典, 临时字典):
    from bxpy.基本对象包 import 字类, 字典类, 浮类

    开发动态 = 地块对象字典["开发动态"]
    地块性质 = 地块对象字典["地块性质"]
    配套设施规模 = 地块对象字典["配套设施规模"]
    地块建筑面积 = 地块对象字典["地块建筑面积"]

    临时字典["配套设施规模列表"] = [x.split("-") for x in 配套设施规模.split("/")]

    地块对象字典["人防规模"] = "0" if 浮类.转换_到浮(地块建筑面积) <= 2000 else 地块对象字典["人防规模"]
    if 开发动态 in ["现状已实施", "现状保留", "保留"]:
        人防规模现状 = 地块对象字典["人防规模"]
        人防规模规划最小 = "0"
        人防可易地规模 = "0"
    elif "1001" in 地块性质 and float(地块对象字典["人防规模"]) < 800:
        人防规模现状 = "0"
        人防规模规划最小 = "0"
        人防可易地规模 = "0"
    elif "1001" in 地块性质 and float(地块对象字典["人防规模"]) >= 800:
        人防规模现状 = "0"
        人防规模规划最小 = "0"
        人防可易地规模 = 地块对象字典["人防规模"]
    elif "1001" not in 地块性质 and float(地块对象字典["人防规模"]) <= 1000:
        人防规模现状 = "0"
        人防规模规划最小 = 地块对象字典["人防规模"]
        人防可易地规模 = 地块对象字典["人防规模"]
    else:
        人防规模现状 = "0"
        人防规模规划最小 = 地块对象字典["人防规模"]
        人防可易地规模 = "0"
    人防规模现状 = 地块对象字典["人防规模现状指定"] if 地块对象字典["人防规模现状指定"] not in ["", None] else 人防规模现状
    人防可易地规模 = 地块对象字典["人防可易地规模指定"] if 地块对象字典["人防可易地规模指定"] not in ["", None] else 人防可易地规模

    配套指标测算表 = 基本信息.应用信息.配套指标测算表获取()
    人防配套设施规模列表, 人防设施总规模, 人防设施总规模_折算后 = [], 0, 0
    for 配套设施x in 临时字典["配套设施规模列表"]:
        if 配套设施x == [""]:
            continue
        设施属性字典 = {}
        for 设施属性字典x in 配套指标测算表:
            if 配套设施x[0] == 设施属性字典x["设施名称"]:
                设施属性字典 = 设施属性字典x
                break
            elif 设施属性字典x["设施别称"] not in ["", None] and 配套设施x[0] in 设施属性字典x["设施别称"].split(" "):
                设施属性字典 = 设施属性字典x
                break
        if 设施属性字典 == {}:
            from bxarcpy.环境包 import 输入输出类

            输入输出类.输出消息(f"未在配套指标测算表中找到设施：{配套设施x[0]}")
            continue
        if 设施属性字典["设施类型"] == "市政人防":
            人防配套设施规模列表.append(配套设施x)
            if len(配套设施x) >= 3 and "（用地）" not in 配套设施x[2] and "ha" not in 配套设施x[2]:
                if 配套设施x[0] in ["战时中心医院", "战时急救医院", "战时救护站"]:
                    人防设施总规模 += 浮类.转换_到浮(配套设施x[2])
                    人防设施总规模_折算后 += 浮类.转换_到浮(配套设施x[2]) / 0.6
                elif "一等" in 配套设施x[0]:
                    人防设施总规模 += 浮类.转换_到浮(配套设施x[2])
                    人防设施总规模_折算后 += 浮类.转换_到浮(配套设施x[2]) / 0.7
                elif "专业队工程" in 配套设施x[0]:
                    人防设施总规模 += 浮类.转换_到浮(配套设施x[2])
                    人防设施总规模_折算后 += 浮类.转换_到浮(配套设施x[2]) / 0.7
                else:
                    人防设施总规模 += 浮类.转换_到浮(配套设施x[2])
                    人防设施总规模_折算后 += 浮类.转换_到浮(配套设施x[2])

    if 开发动态 not in ["现状已实施", "现状保留", "保留", "现状"]:
        二等人员掩蔽工程规模 = 浮类.转换_到浮(人防规模规划最小) - 人防设施总规模_折算后
        二等人员掩蔽工程规模 = 0 if 二等人员掩蔽工程规模 < 0 else 二等人员掩蔽工程规模
        if 二等人员掩蔽工程规模 > 0:
            人防配套设施规模列表.append(["二等人员掩蔽工程", "1", f"{字类.转换_到字(二等人员掩蔽工程规模)}㎡"])
        人防规模规划 = 二等人员掩蔽工程规模 + 人防设施总规模
    if 开发动态 in ["现状已实施", "现状保留", "保留", "现状"]:
        二等人员掩蔽工程规模 = 浮类.转换_到浮(人防规模现状) - 人防设施总规模_折算后
        二等人员掩蔽工程规模 = 0 if 二等人员掩蔽工程规模 < 0 else 二等人员掩蔽工程规模
        if 二等人员掩蔽工程规模 > 0:
            人防配套设施规模列表.append(["二等人员掩蔽工程", "1", f"{字类.转换_到字(二等人员掩蔽工程规模)}㎡"])
        人防规模规划 = 0
    人防配套设施 = "/".join(["-".join(x) for x in 人防配套设施规模列表])

    地块对象字典["人防规模现状"] = 字类.转换_到字(人防规模现状)
    地块对象字典["人防可易地规模"] = 字类.转换_到字(人防可易地规模)
    地块对象字典["人防规模规划"] = 字类.转换_到字(人防规模规划)
    地块对象字典["人防配套设施"] = 字类.转换_到字(人防配套设施)

    return 地块对象字典, 临时字典


def _公式计算(公式字符串, 变量字典):
    import re
    from bxpy.基本对象包 import 字类,浮类

    # print(公式字符串)
    公式列表 = re.split(r"([+\-*/()])", 公式字符串)
    公式列表 = [字类.格式_去空格(x) for x in 公式列表]
    公式列表_变量计算后 = []
    for x in 公式列表:
        if bool(re.match(r"^[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?$", x)):
            公式列表_变量计算后.append(x)
        elif x not in ["+", "-", "*", "/", "(", ")"]:
            变量值 = "0" if 变量字典[x] == "" else 变量字典[x]
            变量值 = 字类.转换_到字(浮类.转换_到浮(变量值))
            公式列表_变量计算后.append(变量值)
        else:
            公式列表_变量计算后.append(x)
    # print(公式列表_变量计算后)
    公式 = "".join(公式列表_变量计算后)
    return eval(公式)


def _根据地块性质输出特定性质的指标测算字典(地块性质, 通过配套设施列表过滤=None):
    指标测算字典列表 = 基本信息.应用信息.地块指标测算表获取()
    日志生成器.临时关闭日志()
    日志生成器.输出调试(str(指标测算字典列表), 内容长度=1000)
    if 通过配套设施列表过滤 is None:
        通过配套设施列表过滤 = [None, ""]
    else:
        通过配套设施列表过滤.append(None)
        通过配套设施列表过滤.append("")
    for 指标测算字典x in 指标测算字典列表:
        if 指标测算字典x["地块性质"] == 地块性质 and 指标测算字典x["地块性质过滤"] in 通过配套设施列表过滤 and 指标测算字典x["地类标准"] == 基本信息.项目信息.地类标准:
            return 指标测算字典x
        if isinstance(指标测算字典x["地块性质别称"], str) and 地块性质 in 指标测算字典x["地块性质别称"].split(" ") and 指标测算字典x["地块性质过滤"] in 通过配套设施列表过滤 and 指标测算字典x["地类标准"] == 基本信息.项目信息.地类标准:
            return 指标测算字典x
        if 指标测算字典x["唯一标识"] == 地块性质 and 指标测算字典x["地块性质过滤"] in 通过配套设施列表过滤 and 指标测算字典x["地类标准"] == 基本信息.项目信息.地类标准:
            return 指标测算字典x
    raise Exception(f"未在地块指标测算表中找到以下性质：{地块性质}，通过配套设施列表过滤：{通过配套设施列表过滤}")


if __name__ == "__main__":
    日志处理器.格式化器_内容着色 = False
    日志生成器.开启()
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    # 工作空间 = r"C:\Users\beixiao\Project\F富阳受降控规\受降北_数据库.gdb"
    # print(基本信息.应用信息.地块属性表获取())
    # 工作空间 = r"C:\Users\beixiao\Project\F富阳受降控规\0.资料\7.流程_24.06.13_质检\富阳区受降北单元入库数据.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        用地更新(
            用地要素路径="DIST_用地规划图",
            街坊范围线要素名称="JX_街坊范围线",
            分村范围线要素名称=None,
            城镇集建区要素名称="KZX_城镇集建区",
            城镇弹性区要素名称="KZX_城镇弹性区",
            有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
            有坐落单位信息的要素名称="CZ_三调筛选_坐落单位名称",
            设施要素名称="SS_配套设施",
            是否进行合规性检查=False,
            是否对用地边界进行调整=False,
            是否重新计算所属街区街坊和分村=True,
            是否重新计算耕保量=True,
            是否根据地类编号生成地类名称=True,
            是否计算地块编号=False,
            是否计算土地码=False,
            是否计算开发动态=False,
            是否计算地块内设施规模=False,
            是否计算建筑规模市政规模等其他属性=True,
            输出要素路径="DIST_用地规划图1",
        )
        # 用地更新(
        #     用地要素路径="DIST_用地规划图",
        #     街坊范围线要素名称="JX_街坊范围线",
        #     分村范围线要素名称=None,
        #     城镇集建区要素名称="KZX_城镇集建区",
        #     城镇弹性区要素名称="KZX_城镇弹性区",
        #     有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
        #     有坐落单位信息的要素名称="CZ_三调筛选_坐落单位名称",
        #     设施要素名称="SS_配套设施",
        #     是否进行合规性检查=False,
        #     是否对用地边界进行调整=False,
        #     是否重新计算所属街区街坊和分村=False,
        #     是否重新计算耕保量=False,
        #     是否根据地类编号生成地类名称=False,
        #     是否计算地块编号=False,
        #     是否计算土地码=False,
        #     是否计算开发动态=False,
        #     是否计算地块内设施规模=False,
        #     是否计算建筑规模市政规模等其他属性=True,
        #     输出要素路径="DIST_用地规划图1",
        # )
