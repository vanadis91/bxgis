# -*- coding: utf-8 -*-

from bxarcpy.要素包 import 要素类
from bxpy.日志包 import 日志类
from bxarcpy.游标包 import 游标类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息


def 用途分区规划图生成(
    用地调整要素名称="DIST_用地调整图",
    农田整备要素名称列表=["YD_上位_粮食生产功能区", "YD_上位农用地落实_耕地质量提升"],
    城镇集建区要素名称="KZX_城镇集建区",
    城镇弹性区要素名称="KZX_城镇弹性区",
    永久基本农田要素名称="KZX_永久基本农田",
    城镇开发边界外集建区修改要素名称="YT_城镇开发边界外集建区修改",
    其他需要叠合的要素名称列表=[],
    批量分区名称替换列表=[["陆域生态控制区", "一般农业区"], ["林业发展区", "一般农业区"]],
    规划范围线要素名称="JX_规划范围线",
    输出要素名称="DIST_用途分区规划图",
):
    日志类.临时关闭日志()
    from bxgis import 配置

    地类编号字段名称 = 基本信息.地块要素字段映射.地类编号字段名称

    用地要素 = 要素类.要素创建_通过复制(用地调整要素名称)
    规划范围线要素 = 要素类.要素创建_通过复制(规划范围线要素名称)

    要素类.字段删除(用地要素, 保留字段名称列表=[地类编号字段名称 + "_规划", 地类编号字段名称 + "_现状"])
    要素类.字段添加(用地要素, 基本信息.分区要素字段映射.分区名称字段名称)
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_现状和规划用地联合后")
        日志类.输出调试并暂停("完成了现状和规划用地的联合")

    # 将地类编号映射为用途管制分区
    用地要素 = _将地类编号映射为用途管制分区(用地要素)
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_将地类编号映射为用途管制分区")
        日志类.输出调试并暂停("将地类编号映射为用途管制分区")

    # 梳理哪些属于农田整备区
    操作字段 = [地类编号字段名称 + "_现状", 地类编号字段名称 + "_规划", 基本信息.分区要素字段映射.分区名称字段名称]
    with 游标类.游标创建("更新", 用地要素, 操作字段) as 游标:
        from bxpy.基本对象包 import 字类

        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
            if 字类.匹配正则(x[地类编号字段名称 + "_现状"], "^(?!01).*") and 字类.匹配正则(x[地类编号字段名称 + "_规划"], "^01.*"):
                x[基本信息.分区要素字段映射.分区名称字段名称] = "农田整备区"
                游标类.行更新_字典形式(游标, x)

    for x in 农田整备要素名称列表:
        农田整备要素 = 要素类.要素创建_通过复制(x)
        要素类.字段添加(农田整备要素, "用途管制分区_temp1")
        要素类.字段计算(农田整备要素, "用途管制分区_temp1", '"农田整备区"')
        要素类.字段删除(农田整备要素, 保留字段名称列表=["用途管制分区_temp1"])

        仅有农田的用地要素 = 要素类.要素创建_通过筛选(用地要素, f"{地类编号字段名称 + '_规划'} LIKE '01%'")
        相交后要素 = 要素类.要素创建_通过相交([仅有农田的用地要素, 农田整备要素], 输出字段设置="除FID外所有字段")
        操作字段 = [基本信息.分区要素字段映射.分区名称字段名称, "用途管制分区_temp1"]
        with 游标类.游标创建("更新", 相交后要素, 操作字段) as 游标:
            for x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
                if x["用途管制分区_temp1"] not in [None, "", " "]:
                    x[基本信息.分区要素字段映射.分区名称字段名称] = x["用途管制分区_temp1"]
                    游标类.行更新_字典形式(游标, x)
        要素类.字段删除(相交后要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
        用地要素 = 要素类.要素创建_通过更新并合并字段(用地要素, 相交后要素)
    用地要素 = 要素类.要素创建_通过裁剪(用地要素, 规划范围线要素)
    用地要素 = 要素类.要素创建_通过融合(用地要素, [基本信息.分区要素字段映射.分区名称字段名称])
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_处理了农田整备区")
        日志类.输出调试并暂停("处理了农田整备区")

    # 处理永久基本农田
    永久基本农田要素 = 要素类.要素创建_通过复制(永久基本农田要素名称)
    要素类.字段添加(永久基本农田要素, "用途管制分区_temp1")
    要素类.字段计算(永久基本农田要素, "用途管制分区_temp1", '"永久基本农田一般区"')
    要素类.字段删除(永久基本农田要素, 保留字段名称列表=["用途管制分区_temp1"])
    相交后要素 = 要素类.要素创建_通过联合([用地要素, 永久基本农田要素])

    操作字段列表 = [基本信息.分区要素字段映射.分区名称字段名称, "用途管制分区_temp1"]
    with 游标类.游标创建("更新", 相交后要素, 操作字段列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段列表):
            if x["用途管制分区_temp1"] not in [None, "", " "]:
                x[基本信息.分区要素字段映射.分区名称字段名称] = x["用途管制分区_temp1"]
                游标类.行更新_字典形式(游标, x)

    要素类.字段删除(相交后要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
    用地要素 = 相交后要素
    用地要素 = 要素类.要素创建_通过裁剪(用地要素, 规划范围线要素)
    用地要素 = 要素类.要素创建_通过融合(用地要素, [基本信息.分区要素字段映射.分区名称字段名称])
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_处理了永农")
        日志类.输出调试并暂停("处理了永农")

    # 处理城镇开发边界
    城镇开发边界要素 = _获取城镇开发边界要素(城镇集建区要素名称, 城镇弹性区要素名称)

    要素类.字段添加(城镇开发边界要素, "用途管制分区_temp1")
    要素类.字段计算(城镇开发边界要素, "用途管制分区_temp1", f"!{基本信息.控制线要素字段映射.控制线名称字段名称}!")
    要素类.字段删除(城镇开发边界要素, 保留字段名称列表=["用途管制分区_temp1"])

    相交后要素 = 要素类.要素创建_通过联合([用地要素, 城镇开发边界要素])
    操作字段列表 = [基本信息.分区要素字段映射.分区名称字段名称, "用途管制分区_temp1"]
    with 游标类.游标创建("更新", 相交后要素, 操作字段列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段列表):
            if x["用途管制分区_temp1"] not in [None, "", " "]:
                x[基本信息.分区要素字段映射.分区名称字段名称] = x["用途管制分区_temp1"]
                游标类.行更新_字典形式(游标, x)
    要素类.字段删除(相交后要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
    用地要素 = 相交后要素
    用地要素 = 要素类.要素创建_通过融合(用地要素, [基本信息.分区要素字段映射.分区名称字段名称])
    用地要素 = 要素类.要素创建_通过裁剪(用地要素, 规划范围线要素)
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_处理了城镇开发边界")
        日志类.输出调试并暂停("处理了城镇开发边界")

    # 梳理开发边界外的集建区
    用地要素 = _梳理开发边界外的集建区(用地要素, 城镇集建区要素名称, 城镇弹性区要素名称, 城镇开发边界外集建区修改要素名称)

    # 叠合其他要素
    for x in 其他需要叠合的要素名称列表:
        其他要素 = 要素类.要素创建_通过复制(x)
        用地要素 = 要素类.要素创建_通过更新并合并字段(用地要素, 其他要素)

    # 批量替换分区名称
    用地要素 = _批量分区名称替换(用地要素, 批量分区名称替换列表)

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素名称)

    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_叠合了其他要素")
        日志类.输出调试并暂停("叠合了其他要素")
    return 输出要素


def _获取城镇开发边界要素(城镇集建区要素名称, 城镇弹性区要素名称):
    城镇集建区要素 = 要素类.要素创建_通过复制(城镇集建区要素名称)
    要素类.字段添加(城镇集建区要素, 基本信息.控制线要素字段映射.控制线名称字段名称)
    要素类.字段删除(城镇集建区要素, 保留字段名称列表=[基本信息.控制线要素字段映射.控制线名称字段名称])
    要素类.字段计算(城镇集建区要素, 基本信息.控制线要素字段映射.控制线名称字段名称, "'城镇集中建设区'")

    城镇弹性区要素 = 要素类.要素创建_通过复制(城镇弹性区要素名称)
    要素类.字段添加(城镇弹性区要素, 基本信息.控制线要素字段映射.控制线名称字段名称)
    要素类.字段删除(城镇弹性区要素, 保留字段名称列表=[基本信息.控制线要素字段映射.控制线名称字段名称])
    要素类.字段计算(城镇弹性区要素, 基本信息.控制线要素字段映射.控制线名称字段名称, "'城镇弹性发展区'")

    城镇开发边界要素 = 要素类.要素创建_通过合并([城镇集建区要素, 城镇弹性区要素])
    要素类.字段删除(城镇开发边界要素, 保留字段名称列表=[基本信息.控制线要素字段映射.控制线名称字段名称])
    城镇开发边界要素 = 要素类.要素创建_通过融合(城镇开发边界要素, [基本信息.控制线要素字段映射.控制线名称字段名称])
    return 城镇开发边界要素


def _梳理开发边界外的集建区(用地要素, 城镇集建区要素名称, 城镇弹性区要素名称, 城镇开发边界外集建区修改要素名称):
    城镇开发边界要素 = _获取城镇开发边界要素(城镇集建区要素名称, 城镇弹性区要素名称)
    现有城镇开发边界外集建区修改要素 = 要素类.要素创建_通过复制(城镇开发边界外集建区修改要素名称)

    擦除城镇开发边界后要素 = 要素类.要素创建_通过擦除(用地要素, 城镇开发边界要素)

    需要修改用途的要素 = 要素类.要素创建_通过筛选(擦除城镇开发边界后要素, f"{基本信息.分区要素字段映射.分区名称字段名称} LIKE '城镇集中建设区' OR {基本信息.分区要素字段映射.分区名称字段名称} LIKE '城镇弹性发展区'")

    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(需要修改用途的要素, "AA_需要修改用途的要素")
        日志类.输出调试并暂停("需要修改用途的要素")

    要素类.字段删除(现有城镇开发边界外集建区修改要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
    现有城镇开发边界外集建区修改要素 = 要素类.要素创建_通过融合(现有城镇开发边界外集建区修改要素, [基本信息.分区要素字段映射.分区名称字段名称])
    已修改要素 = 要素类.要素创建_通过相交([现有城镇开发边界外集建区修改要素, 需要修改用途的要素])
    要素类.字段删除(已修改要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(已修改要素, "AA_已修改要素")
        日志类.输出调试并暂停("已修改要素")

    更新后要素 = 要素类.要素创建_通过更新(需要修改用途的要素, 已修改要素)
    要素类.字段删除(更新后要素, 保留字段名称列表=[基本信息.分区要素字段映射.分区名称字段名称])
    更新后要素 = 要素类.要素创建_通过多部件至单部件(更新后要素)

    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(更新后要素, "AA_更新后要素")
        日志类.输出调试并暂停("更新后要素")

    更新后城镇开发边界外集建区修改要素 = 要素类.要素创建_通过复制并重命名重名要素(更新后要素, 城镇开发边界外集建区修改要素名称)

    更新后仍需要修改用途的要素 = 要素类.要素创建_通过筛选(更新后要素, f"{基本信息.分区要素字段映射.分区名称字段名称} LIKE '城镇集中建设区' OR {基本信息.分区要素字段映射.分区名称字段名称} LIKE '城镇弹性发展区'")
    if 要素类.属性获取_几何数量(更新后仍需要修改用途的要素) > 0:
        输入输出类.输出消息(f"城镇开发边界外还存在城镇集中建设区或者城镇弹性发展区")
    else:
        输入输出类.输出消息(f"城镇开发边界外已经不存在集建区了")

    要素类.字段修改(更新后要素, 基本信息.分区要素字段映射.分区名称字段名称, "用途管制分区_temp1")
    要素类.字段删除(更新后要素, 保留字段名称列表=["用途管制分区_temp1"])

    用地要素 = 要素类.要素创建_通过联合并赋值字段(用地要素, 联合要素路径=更新后要素, 字段映射列表=[[基本信息.分区要素字段映射.分区名称字段名称, "用途管制分区_temp1"]], 是否检查两者差异=False, 差异是否输出到CAD=False, 是否删除字段的既有值=False)
    用地要素 = 要素类.要素创建_通过融合(用地要素, [基本信息.分区要素字段映射.分区名称字段名称])
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(用地要素, "AA_处理了城镇开发边界外用地")
        日志类.输出调试并暂停("处理了城镇开发边界外用地")

    return 用地要素


def _批量分区名称替换(用地要素, 批量分区名称替换列表):
    用地要素_复制 = 要素类.要素创建_通过复制(用地要素)
    for 批量替换元祖 in 批量分区名称替换列表:
        选择集 = 要素类.选择集创建_通过属性(用地要素_复制, SQL语句=f"{基本信息.分区要素字段映射.分区名称字段名称} LIKE '{批量替换元祖[0]}'")
        要素类.字段计算(选择集, 基本信息.分区要素字段映射.分区名称字段名称, f"'{批量替换元祖[1]}'")
    return 用地要素_复制


def _将地类编号映射为用途管制分区(用地要素):
    from bxpy.系统包 import 系统类
    from bxpy.路径包 import 路径类

    地类编号字段名称 = 基本信息.地块要素字段映射.地类编号字段名称

    当前文件所在目录 = 路径类.属性获取_目录(__file__)
    转换文件路径 = 路径类.转绝对("..", 当前文件所在目录)
    转换文件路径 = 路径类.连接(转换文件路径, "配置", "地类转换_地类与用途分区转换.xls")
    from bxpandas.数据框架包 import 数据框架类

    a = 数据框架类.转换_从excel文件(转换文件路径, 要读取的列=[0, 1], 指定数据类型={"新地类编号": str, "用途管制分区1": str})
    用途管制分区映射 = 数据框架类.转换_到字典(a)

    操作字段 = [地类编号字段名称 + "_规划", 基本信息.分区要素字段映射.分区名称字段名称]
    with 游标类.游标创建("更新", 用地要素, 操作字段) as 游标:
        无对应用途管制分区的地类set = set()
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
            对应的对象列表 = [y for y in 用途管制分区映射 if y["新地类编号"] == x["地类编号_规划"]]
            if len(对应的对象列表) > 0:
                x[基本信息.分区要素字段映射.分区名称字段名称] = 对应的对象列表[0]["用途管制分区1"]
                游标类.行更新_字典形式(游标, x)
            else:
                无对应用途管制分区的地类set.add(x[地类编号字段名称 + "_规划"])
    if len(无对应用途管制分区的地类set) > 0:
        输入输出类.输出消息(f"未找到地类编号 {无对应用途管制分区的地类set} 对应的用途管制分区")
        raise Exception("程序中断，部分地类未找到对应的用途管制分区。")

    return 用地要素


if __name__ == "__main__":
    日志类.开启()
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        用途分区规划图生成(
            用地调整要素名称="DIST_用地调整图",
            农田整备要素名称列表=["YD_上位_粮食生产功能区", "YD_上位农用地落实_耕地质量提升", "YD_上位农用地落实_旱改水"],
            城镇集建区要素名称="KZX_城镇集建区",
            城镇弹性区要素名称="KZX_城镇弹性区",
            永久基本农田要素名称="KZX_永久基本农田",
            城镇开发边界外集建区修改要素名称="YT_城镇开发边界外集建区修改",
            其他需要叠合的要素名称列表=[],
            批量分区名称替换列表=[["陆域生态控制区", "一般农业区"], ["林业发展区", "一般农业区"]],
            规划范围线要素名称="JX_规划范围线",
            输出要素名称="DIST_用途分区规划图",
        )
