import bxarcpy
from bxgis import 常用
from bxgis import 配置
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息
from bxgis.常用 import 计算所属区域


def 设施更新(输入要素名称="SS_配套设施", 是否根据坐标字段移动设施坐标=True, 规划范围线要素名称="JX_规划范围线", 工业片区范围线要素名称="JX_工业片区范围线", 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素名称="内存临时"):
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_设施更新" + "_" + 工具包.生成短GUID()
    设施要素 = 要素类.要素创建_通过复制(输入要素名称)
    if 是否根据坐标字段移动设施坐标:
        设施要素 = 移动至正确位置(输入要素名称=设施要素)
    设施要素 = 清理范围外设施(输入要素名称=设施要素, 范围要素名称=规划范围线要素名称)
    设施要素 = 计算所属区域.计算所属区域(设施要素, 工业片区范围线要素名称, 字段映射列表=[[基本信息.设施要素字段映射.所属工业片区字段名称, 基本信息.区域要素字段映射.区域编号字段名称]], 计算方式="内点在区域要素内")
    设施要素 = 计算远期预留(输入要素名称=设施要素, 城镇集建区要素名称=城镇集建区要素名称, 城镇弹性区要素名称=城镇弹性区要素名称)
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素名称)
    return 输出要素
    # task: 计算开发动态字段


def 移动至正确位置(输入要素名称, 输出要素名称="内存临时"):
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_移动至正确位置" + "_" + 工具包.生成短GUID()

    设施要素 = 要素类.要素创建_通过复制(输入要素名称)
    if 基本信息.设施要素字段映射.设施坐标字段名称 not in 要素类.字段名称列表获取(设施要素):
        raise ValueError(f"{输入要素名称}缺少{基本信息.设施要素字段映射.设施坐标字段名称}字段，无法移动设施坐标。字段的值的格式为：(x坐标 y坐标 z坐标)。")
    with 游标类.游标创建("更新", 设施要素, ["SHAPE@XY", 基本信息.设施要素字段映射.设施坐标字段名称]) as 游标:
        for x in 游标类.游标迭代器转换_字典形式(游标, ["SHAPE@XY", 基本信息.设施要素字段映射.设施坐标字段名称]):
            坐标字段内容: str = x[基本信息.设施要素字段映射.设施坐标字段名称]
            if 坐标字段内容[0] == "(":
                坐标字段内容 = 坐标字段内容[1:]
            if 坐标字段内容[-1] == ")":
                坐标字段内容 = 坐标字段内容[:-1]
            坐标字段内容 = 坐标字段内容.strip()
            if "," in 坐标字段内容:
                坐标字段内容列表 = 坐标字段内容.split(",")
            elif " " in 坐标字段内容:
                坐标字段内容列表 = 坐标字段内容.split(" ")
            # 设施坐标 = re.split(r"[()\s]", x[基本信息.设施要素字段映射.设施坐标字段名称])
            x["SHAPE@XY"] = (float(坐标字段内容列表[0]), float(坐标字段内容列表[1]))

            游标.行更新(x)
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素名称)
    return 输出要素


def 清理范围外设施(输入要素名称, 范围要素名称="JX_规划范围线", 输出要素名称="内存临时"):
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_清理范围外设施" + "_" + 工具包.生成短GUID()

    设施要素 = 要素类.要素创建_通过复制(输入要素名称)
    范围要素 = 要素类.要素创建_通过复制(范围要素名称)

    相交后要素 = 要素类.要素创建_通过相交([设施要素, 范围要素])
    要素类.字段删除(相交后要素, 保留字段名称列表=要素类.字段名称列表获取(设施要素))

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(相交后要素, 输出要素名称)
    return 输出要素


def 计算远期预留(输入要素名称, 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素名称="内存临时"):
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_计算远期预留" + "_" + 工具包.生成短GUID()

    设施要素 = 要素类.要素创建_通过复制(输入要素名称)
    集建区要素 = 要素类.要素创建_通过复制(城镇集建区要素名称)
    弹性区要素 = 要素类.要素创建_通过复制(城镇弹性区要素名称)
    开发边界要素 = 要素类.要素创建_通过合并([集建区要素, 弹性区要素])

    if 基本信息.控制线要素字段映射.控制线名称字段名称 not in 要素类.字段名称列表获取(开发边界要素):
        raise ValueError(f"{城镇集建区要素名称}和{城镇弹性区要素名称}中未包括 {基本信息.控制线要素字段映射.控制线名称字段名称} 字段。")

    设施要素 = 计算所属区域.计算所属区域(设施要素, 开发边界要素, 字段映射列表=[["所属三线", "控制线名称"]], 计算方式="内点在区域要素内")
    要素类.字段添加(设施要素, 基本信息.设施要素字段映射.远期预留字段名称)

    需操作字段列表 = [基本信息.设施要素字段映射.远期预留字段名称, "所属三线", 基本信息.设施要素字段映射.开发动态字段名称]
    with 游标类.游标创建("更新", 设施要素, 需操作字段列表) as 游标:
        for x in 游标类.游标迭代器转换_字典形式(游标, 需操作字段列表):
            if x["所属三线"] in ["", " ", None] and x[基本信息.设施要素字段映射.开发动态字段名称] not in ["现状", "现状已实施", "现状保留"]:
                x[基本信息.设施要素字段映射.远期预留字段名称] = "是"
            else:
                x[基本信息.设施要素字段映射.远期预留字段名称] = "否"
            游标类.行更新_字典形式(游标, x)
    要素类.字段删除(设施要素, ["所属三线"])
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素名称)
    return 输出要素


if __name__ == "__main__":
    # 工作空间 = r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb"
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        设施更新("SS_配套设施", 规划范围线要素名称="JX_规划范围线", 工业片区范围线要素名称="JX_工业片区范围线", 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素名称="SS_配套设施_更新后")
