# *-* coding:utf8 *-*
from bxgis import 常用
from bxgis import 配置
import bxarcpy.工具包 as 工具包
from bxpy.日志包 import 日志生成器
from bxpy.时间包 import 时间类
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息
from bxgis.常用 import 属性更新
from bxarcpy.工具包 import 输出路径生成_当采用内存临时时
from typing import Union, Literal, Any, List, Dict, Optional, TypedDict

# from pydantic import BaseModel


@时间类.装饰器_运行时长
def 设施更新(
    输入要素路径="SS_配套设施",
    是否根据坐标字段移动设施坐标=True,
    规划范围线要素名称="JX_规划范围线",
    工业片区要素名称="JX_工业片区范围线",
    街区要素名称="JX_街区范围线",
    街坊要素名称="JX_街坊范围线",
    分村要素名称: Literal["JX_分村范围线", None] = "JX_分村范围线",
    用地规划要素路径="DIST_用地规划图",
    与用地规划要素中配套设施如何统一: Literal["从设施到用地", "从用地到设施", "不统一"] = "从设施到用地",
    城镇集建区要素名称="KZX_城镇集建区",
    城镇弹性区要素名称="KZX_城镇弹性区",
    输出要素路径_用地="内存临时",
    输出要素路径_设施="内存临时",
):
    输出要素路径_用地 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径_用地 == "内存临时" else 输出要素路径_用地
    输出要素路径_设施 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径_设施 == "内存临时" else 输出要素路径_设施

    设施要素路径 = 要素类.要素创建_通过复制(输入要素路径)
    用地规划要素路径 = 要素类.要素创建_通过复制(用地规划要素路径)

    if 与用地规划要素中配套设施如何统一 != "不统一":
        用地规划要素路径, 设施要素路径 = _和地块中配套信息进行统一(
            设施要素路径,
            用地规划要素路径,
            与用地规划要素中配套设施如何统一,
        )
    日志生成器.输出调试("开始计算类别代码等属性")
    设施要素路径 = _计算类别代码等属性(设施要素路径)

    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(设施要素路径, "AA_计算类别代码")
        日志生成器.输出调试("已计算类别代码")

    if 是否根据坐标字段移动设施坐标:
        日志生成器.输出调试("开始将设施的点移动到正确的位置")
        设施要素路径 = _移动至正确位置(设施要素路径)
    if 规划范围线要素名称:
        日志生成器.输出调试("开始清理规划范围线以外的设施")
        设施要素路径 = _清理范围外设施(设施要素路径, 规划范围线要素名称)

    if 用地规划要素路径:
        日志生成器.输出调试("开始计算设施所属地块")
        设施要素路径 = _计算设施所属区域和开发动态(输入要素路径=设施要素路径, 用地要素路径=用地规划要素路径, 街区要素路径=街区要素名称, 街坊要素路径=街坊要素名称, 分村要素路径=分村要素名称, 工业片区要素路径=工业片区要素名称)

    if 城镇集建区要素名称 and 城镇弹性区要素名称:
        日志生成器.输出调试("开始计算设施是否为远期预留")
        设施要素路径 = _计算远期预留(输入要素路径=设施要素路径, 城镇集建区要素名称=城镇集建区要素名称, 城镇弹性区要素名称=城镇弹性区要素名称)

    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(设施要素路径, "AA_计算远期预留")
        日志生成器.输出调试("已计算远期预留")

    输出要素_用地 = 要素类.要素创建_通过复制并重命名重名要素(用地规划要素路径, 输出要素路径_用地)
    输出要素_设施 = 要素类.要素创建_通过复制并重命名重名要素(设施要素路径, 输出要素路径_设施)
    return 输出要素_用地, 输出要素_设施
    # task: 计算开发动态字段


def _移动至正确位置(输入要素路径, 输出要素路径="内存临时"):
    输出要素路径 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径 == "内存临时" else 输出要素路径

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)
    if 基本信息.设施要素字段映射.设施坐标字段名称 not in 要素类.字段名称列表获取(设施要素):
        raise Exception(f"【{输入要素路径}】缺少【{基本信息.设施要素字段映射.设施坐标字段名称}】字段，无法移动设施坐标。字段的值的格式为：(x坐标 y坐标 z坐标)")
    with 游标类.游标创建("更新", 设施要素, ["SHAPE@XY", 基本信息.设施要素字段映射.设施坐标字段名称]) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, ["SHAPE@XY", 基本信息.设施要素字段映射.设施坐标字段名称]):
            坐标字段内容: str = x[基本信息.设施要素字段映射.设施坐标字段名称]
            if 坐标字段内容 in ["", None]:
                continue
            if 坐标字段内容[0] == "(":
                坐标字段内容 = 坐标字段内容[1:]
            if 坐标字段内容[-1] == ")":
                坐标字段内容 = 坐标字段内容[:-1]
            坐标字段内容 = 坐标字段内容.strip()
            if "," in 坐标字段内容:
                坐标字段内容列表 = 坐标字段内容.split(",")
            elif " " in 坐标字段内容:
                坐标字段内容列表 = 坐标字段内容.split(" ")
            # 设施坐标 = re.split(r"[()\s]", x[基本信息.设施要素字段映射.设施坐标字段名称])
            x["SHAPE@XY"] = (float(坐标字段内容列表[0]), float(坐标字段内容列表[1]))

            游标类.行更新_字典形式(游标, x)
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素路径)
    return 输出要素


def _清理范围外设施(输入要素路径, 范围要素名称="JX_规划范围线", 输出要素路径="内存临时"):
    输出要素路径 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径 == "内存临时" else 输出要素路径

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)
    范围要素 = 要素类.要素创建_通过复制(范围要素名称)

    相交后要素 = 要素类.要素创建_通过相交_原始([设施要素, 范围要素])
    要素类.字段删除(相交后要素, 保留字段名称列表=要素类.字段名称列表获取(设施要素))

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(相交后要素, 输出要素路径)
    return 输出要素


def _计算远期预留(输入要素路径, 城镇集建区要素名称="KZX_城镇集建区", 城镇弹性区要素名称="KZX_城镇弹性区", 输出要素路径="内存临时"):
    输出要素路径 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径 == "内存临时" else 输出要素路径

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)
    集建区要素 = 要素类.要素创建_通过复制(城镇集建区要素名称)
    弹性区要素 = 要素类.要素创建_通过复制(城镇弹性区要素名称)
    开发边界要素 = 要素类.要素创建_通过合并([集建区要素, 弹性区要素])

    if 基本信息.控制线要素字段映射.控制线名称字段名称 not in 要素类.字段名称列表获取(开发边界要素):
        raise Exception(f"【{城镇集建区要素名称}】和【{城镇弹性区要素名称}】中未包括【{基本信息.控制线要素字段映射.控制线名称字段名称}】字段")

    要素类.字段添加(设施要素, "所属三线")
    设施要素 = 属性更新.要素创建_通过更新_根据面(设施要素, 开发边界要素, 字段映射列表=[["所属三线", 基本信息.控制线要素字段映射.控制线名称字段名称]], 计算方式="内点在区域要素内")
    要素类.字段添加(设施要素, 基本信息.设施要素字段映射.远期预留字段名称)

    需操作字段列表 = [基本信息.设施要素字段映射.远期预留字段名称, "所属三线", 基本信息.设施要素字段映射.开发动态字段名称]
    with 游标类.游标创建("更新", 设施要素, 需操作字段列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 需操作字段列表):
            if x["所属三线"] in ["", " ", None] and x[基本信息.设施要素字段映射.开发动态字段名称] not in ["现状", "现状已实施", "现状保留"]:
                x[基本信息.设施要素字段映射.远期预留字段名称] = "是"
            else:
                x[基本信息.设施要素字段映射.远期预留字段名称] = "否"
            游标类.行更新_字典形式(游标, x)
    要素类.字段删除(设施要素, ["所属三线"])
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素路径)
    return 输出要素


def _计算设施所属区域和开发动态(输入要素路径, 用地要素路径, 街区要素路径=None, 街坊要素路径=None, 分村要素路径=None, 工业片区要素路径=None, 输出要素路径="内存临时"):
    from bxarcpy.几何包 import 几何类
    from bxpy.进度条包 import 进度条类

    输出要素路径 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径 == "内存临时" else 输出要素路径

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)
    用地要素 = 要素类.要素创建_通过复制(用地要素路径)

    设施所在地块编号_设施 = 基本信息.设施要素字段映射.设施所在地块编号字段名称
    开发动态_设施 = 基本信息.设施要素字段映射.开发动态字段名称
    开发动态锁定_设施 = 基本信息.设施要素字段映射.开发动态锁定字段名称

    地块编号_地块 = 基本信息.地块要素字段映射.地块编号字段名称
    开发动态_地块 = 基本信息.地块要素字段映射.开发动态字段名称

    需操作字段名称列表_设施 = [设施所在地块编号_设施, 开发动态_设施, 开发动态锁定_设施, "_形状", "_ID"]
    需操作字段名称列表_用地 = [地块编号_地块, 开发动态_地块, "_形状"]
    with 游标类.游标创建("更新", 设施要素, 需操作字段名称列表_设施) as 游标_设施, 游标类.游标创建("查询", 用地要素, 需操作字段名称列表_用地) as 游标_用地:
        for 设施x in 进度条类.进度条创建(游标类.属性获取_数据_字典形式(游标_设施, 需操作字段名称列表_设施), 总进度=要素类.属性获取_几何数量(设施要素), 前置信息="开始计算所属地块"):
            for 用地x in 游标类.属性获取_数据_字典形式(游标_用地, 需操作字段名称列表_用地):
                if 几何类.关系_被包含(设施x["_形状"], 用地x["_形状"]):
                    if 设施x[设施所在地块编号_设施] != 用地x[地块编号_地块]:
                        if 设施x[设施所在地块编号_设施] not in ["", None]:
                            输入输出类.输出消息(f'ID{设施x["_ID"]}的设施的所在地块编号由{设施x[设施所在地块编号_设施]}改为{用地x[地块编号_地块]}')
                        设施x[设施所在地块编号_设施] = 用地x[地块编号_地块]
                    设施x[开发动态锁定_设施] = "false" if 设施x[开发动态锁定_设施] in ["", None] else 设施x[开发动态锁定_设施]
                    if 设施x[开发动态锁定_设施] != "true" and 设施x[开发动态_设施] != 用地x[开发动态_地块]:
                        if 设施x[开发动态_设施] not in ["", None]:
                            输入输出类.输出消息(f'ID{设施x["_ID"]}的设施的开发动态由{设施x[开发动态_设施]}改为{用地x[开发动态_地块]}')
                        设施x[开发动态_设施] = 用地x[开发动态_地块]
                    break
            游标类.重置(游标_用地)
            游标类.行更新_字典形式(游标_设施, 设施x)

    def _更新所属区域(设施要素, 需要更新的字段名称, 区域要素, 区域类型="街区"):
        区域要素 = 要素类.要素创建_通过复制(区域要素)

        所属区域_设施 = 需要更新的字段名称
        区域编号_区域 = 基本信息.区域要素字段映射.区域编号字段名称

        需操作字段名称列表_设施 = [所属区域_设施, "_形状", "_ID"]
        需操作字段名称列表_区域 = [区域编号_区域, "_形状"]
        with 游标类.游标创建("更新", 设施要素, 需操作字段名称列表_设施) as 游标_设施, 游标类.游标创建("查询", 区域要素, 需操作字段名称列表_区域) as 游标_区域:
            for 设施x in 进度条类.进度条创建(游标类.属性获取_数据_字典形式(游标_设施, 需操作字段名称列表_设施), 总进度=要素类.属性获取_几何数量(设施要素), 前置信息=f"开始计算所属{区域类型}"):
                for 区域x in 游标类.属性获取_数据_字典形式(游标_区域, 需操作字段名称列表_区域):
                    if 几何类.关系_被包含(设施x["_形状"], 区域x["_形状"]):
                        if 设施x[所属区域_设施] != 区域x[区域编号_区域]:
                            if 设施x[所属区域_设施] not in ["", None]:
                                输入输出类.输出消息(f'ID{设施x["_ID"]}的设施的所属{区域类型}由{设施x[所属区域_设施]}改为{区域x[区域编号_区域]}')
                            设施x[所属区域_设施] = 区域x[区域编号_区域]
                        break
                游标类.重置(游标_区域)
                游标类.行更新_字典形式(游标_设施, 设施x)
        return 设施要素

    if 街区要素路径:
        设施要素 = _更新所属区域(设施要素, 基本信息.设施要素字段映射.所属街区字段名称, 街区要素路径, "街区")
    if 街坊要素路径:
        设施要素 = _更新所属区域(设施要素, 基本信息.设施要素字段映射.所属街坊字段名称, 街坊要素路径, "街坊")
    if 分村要素路径:
        设施要素 = _更新所属区域(设施要素, 基本信息.设施要素字段映射.所属分村字段名称, 分村要素路径, "分村")
    if 工业片区要素路径:
        设施要素 = _更新所属区域(设施要素, 基本信息.设施要素字段映射.所属工业片区字段名称, 工业片区要素路径, "工业片区")

    # 用地要素 = 要素类.字段删除(用地要素, 保留字段名称列表=[地块编号_地块, 开发动态_地块])

    # 空间连接后要素 = 要素类.要素创建_通过空间连接(设施要素, 用地要素, "在连接要素内")
    # 要素类.字段计算(空间连接后要素, 设施所在地块编号_设施, f"!{基本信息.地块要素字段映射.地块编号字段名称}!")
    # 要素类.字段删除(空间连接后要素, [地块编号_地块, 开发动态_地块, "Join_Count", "TARGET_FID", "Shape_Area", "Shape_Length"])

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素路径)
    return 输出要素路径


def _和地块中配套信息进行统一(输入要素路径, 用地要素路径, 同步方式: Literal["从设施到用地", "从用地到设施"] = "从设施到用地", 输出要素路径_用地="内存临时", 输出要素路径_设施="内存临时"):
    from bxarcpy.环境包 import 输入输出类

    输出要素路径_用地 = 输出路径生成_当采用内存临时时([用地要素路径]) if 输出要素路径_用地 == "内存临时" else 输出要素路径_用地
    输出要素路径_设施 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径_设施 == "内存临时" else 输出要素路径_设施

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)
    用地要素 = 要素类.要素创建_通过复制(用地要素路径)

    配套设施规模_用地 = 基本信息.地块要素字段映射.配套设施规模字段名称
    配套设施_用地 = 基本信息.地块要素字段映射.配套设施字段名称
    配套设施代码_用地 = 基本信息.地块要素字段映射.配套设施代码字段名称

    设施名称_设施 = 基本信息.设施要素字段映射.设施名称字段名称
    设施数量_设施 = 基本信息.设施要素字段映射.设施数量字段名称
    设施规模_设施 = 基本信息.设施要素字段映射.设施规模字段名称

    用地操作字段名称列表 = [配套设施规模_用地, 配套设施_用地, 配套设施代码_用地, "_形状", "_ID"]
    设施操作字段名称列表 = [设施名称_设施, "_形状", 设施数量_设施, 设施规模_设施, "_ID"]
    设施操作字段名称列表_新增 = [设施名称_设施, "_形状", 设施数量_设施, 设施规模_设施]

    from bxpy.进度条包 import 进度条类

    if 同步方式 == "从设施到用地":
        with 游标类.游标创建("更新", 用地要素, 用地操作字段名称列表) as 游标_用地, 游标类.游标创建("查询", 设施要素, 设施操作字段名称列表) as 游标_设施_查询:
            for 用地x in 进度条类.进度条创建(游标类.属性获取_数据_字典形式(游标_用地, 用地操作字段名称列表), 总进度=要素类.属性获取_几何数量(用地要素), 前置信息="开始根据设施要素来更新地块的设施属性"):
                设施字符串: str = 用地x[配套设施规模_用地]
                用地设施列表 = _设施字符串转列表(设施字符串)

                新的用地设施列表 = []
                for 设施x in 游标类.属性获取_数据_字典形式(游标_设施_查询, 设施操作字段名称列表):
                    from bxarcpy.几何包 import 几何类

                    if 设施x[设施规模_设施] not in ["", None]:
                        当前设施 = {"设施名称": 设施x[设施名称_设施], "设施数量": int(设施x[设施数量_设施]), "设施规模": 设施x[设施规模_设施]}
                    else:
                        当前设施 = {"设施名称": 设施x[设施名称_设施], "设施数量": int(设施x[设施数量_设施])}

                    if 几何类.关系_包含(用地x["_形状"], 设施x["_形状"]):
                        if 当前设施["设施名称"] not in [x["设施名称"] for x in 新的用地设施列表]:
                            if "设施规模" in 当前设施:
                                新的数据 = {
                                    "设施名称": 当前设施["设施名称"],
                                    "设施数量": 当前设施["设施数量"],
                                    "设施规模": [当前设施["设施规模"]],
                                }
                            else:
                                新的数据 = {
                                    "设施名称": 当前设施["设施名称"],
                                    "设施数量": 当前设施["设施数量"],
                                }
                            新的用地设施列表.append(新的数据)
                        else:
                            新的用地设施列表中既有的数据 = [x for x in 新的用地设施列表 if x["设施名称"] == 当前设施["设施名称"]][0]
                            新的用地设施列表中既有的数据的索引 = 新的用地设施列表.index(新的用地设施列表中既有的数据)
                            if "设施规模" in 新的用地设施列表中既有的数据 and "设施规模" in 当前设施:
                                新的数据 = {
                                    "设施名称": 新的用地设施列表中既有的数据["设施名称"],
                                    "设施数量": 新的用地设施列表中既有的数据["设施数量"] + 当前设施["设施数量"],
                                    "设施规模": 新的用地设施列表中既有的数据["设施规模"].append(当前设施["设施规模"]),
                                }
                            elif "设施规模" not in 新的用地设施列表中既有的数据 and "设施规模" not in 当前设施:
                                新的数据 = {
                                    "设施名称": 新的用地设施列表中既有的数据["设施名称"],
                                    "设施数量": 新的用地设施列表中既有的数据["设施数量"] + 当前设施["设施数量"],
                                }
                            else:
                                raise ValueError(f"地块{用地x['_ID']}的{当前设施['设施名称']}，部分有规模，部分没有，需统一")
                            新的用地设施列表[新的用地设施列表中既有的数据的索引] = 新的数据

                from bxpy.基本对象包 import 表类, 字典类

                用地设施列表 = 表类.排序(lambda x: x["设施名称"], 用地设施列表)
                新的用地设施列表 = 表类.排序(lambda x: x["设施名称"], 新的用地设施列表)
                if 用地设施列表 != 新的用地设施列表:
                    from bxarcpy.环境包 import 输入输出类

                    输入输出类.输出消息(f"ID{用地x['_ID']}的地块的设施由{用地设施列表}更新为{新的用地设施列表}")
                    新的设施规模字符串 = _设施列表转字符串(新的用地设施列表)
                    新的设施字符串 = "/".join([x["设施名称"] for x in 新的用地设施列表])
                    新的设施代码字符串 = "/".join(_根据设施名称列表获取设施代码列表([x["设施名称"] for x in 新的用地设施列表]))

                    用地x[配套设施规模_用地] = 新的设施规模字符串
                    用地x[配套设施_用地] = 新的设施字符串
                    用地x[配套设施代码_用地] = 新的设施代码字符串

                    游标类.行更新_字典形式(游标_用地, 用地x)
                游标类.重置(游标_设施_查询)
    elif 同步方式 == "从用地到设施":
        with 游标类.游标创建("查询", 用地要素, 用地操作字段名称列表) as 游标_用地:
            for 用地x in 进度条类.进度条创建(游标类.属性获取_数据_字典形式(游标_用地, 用地操作字段名称列表), 总进度=要素类.属性获取_几何数量(用地要素), 前置信息="开始根据地块的设施属性来更新设施要素"):
                设施字符串: str = 用地x[基本信息.地块要素字段映射.配套设施规模字段名称]
                用地设施列表 = _设施字符串转列表(设施字符串)
                with 游标类.游标创建("更新", 设施要素, 设施操作字段名称列表) as 游标_设施_查询:
                    for 设施x in 游标类.属性获取_数据_字典形式(游标_设施_查询, 设施操作字段名称列表):
                        from bxarcpy.几何包 import 几何类

                        if 设施x[基本信息.设施要素字段映射.设施规模字段名称] not in ["", None]:
                            当前设施 = {"设施名称": 设施x[基本信息.设施要素字段映射.设施名称字段名称], "设施数量": int(设施x[基本信息.设施要素字段映射.设施数量字段名称]), "设施规模": 设施x[基本信息.设施要素字段映射.设施规模字段名称]}
                        else:
                            当前设施 = {"设施名称": 设施x[基本信息.设施要素字段映射.设施名称字段名称], "设施数量": int(设施x[基本信息.设施要素字段映射.设施数量字段名称])}

                        if 几何类.关系_包含(用地x["_形状"], 设施x["_形状"]):
                            if 当前设施["设施名称"] not in [x["设施名称"] for x in 用地设施列表]:
                                from bxarcpy.环境包 import 输入输出类

                                输入输出类.输出消息(f"设施ID{设施x['_ID']}的{当前设施['设施名称']}，未出现在地块{用地x['_ID']}的设施列表中，已删除")
                                游标类.行删除(游标_设施_查询)
                            else:
                                用地设施列表中既有的数据 = [x for x in 用地设施列表 if x["设施名称"] == 当前设施["设施名称"]][0]
                                用地设施列表中既有的数据的索引 = 用地设施列表.index(用地设施列表中既有的数据)
                                if "设施规模" in 用地设施列表中既有的数据 and "设施规模" in 当前设施:
                                    if 当前设施["设施规模"] in 用地设施列表中既有的数据["设施规模"]:
                                        用地设施列表[用地设施列表中既有的数据的索引]["设施数量"] -= 1
                                        用地设施列表[用地设施列表中既有的数据的索引]["设施规模"].remove(当前设施["设施规模"])
                                        if 用地设施列表[用地设施列表中既有的数据的索引]["设施数量"] <= 0:
                                            用地设施列表.pop(用地设施列表中既有的数据的索引)
                                    else:
                                        from bxarcpy.环境包 import 输入输出类

                                        输入输出类.输出消息(f"设施ID{设施x['_ID']}的{当前设施['设施名称']}与地块{用地x['_ID']}的设施列表中的规模不匹配，已删除")
                                        游标类.行删除(游标_设施_查询)
                                elif "设施规模" not in 用地设施列表中既有的数据 and "设施规模" not in 当前设施:
                                    用地设施列表[用地设施列表中既有的数据的索引]["设施数量"] -= 1
                                    if 用地设施列表[用地设施列表中既有的数据的索引]["设施数量"] <= 0:
                                        用地设施列表.pop(用地设施列表中既有的数据的索引)
                                else:
                                    raise ValueError(f"地块{用地x['_ID']}的{当前设施['设施名称']}，部分有规模，部分没有，需统一")
                if len(用地设施列表) > 0:
                    from bxarcpy.几何包 import 几何类, 点类

                    with 游标类.游标创建("插入", 设施要素, 设施操作字段名称列表_新增) as 游标_设施_插入:
                        内点 = 几何类.属性获取_内点(用地x["_形状"])
                        for 需要新增的设施x in 用地设施列表:
                            for _ in range(需要新增的设施x["设施数量"]):
                                新设施 = {}
                                新设施["设施名称"] = 需要新增的设施x["设施名称"]
                                新设施["设施数量"] = "1"
                                if "设施规模" in 需要新增的设施x:
                                    新设施["设施规模"] = 需要新增的设施x["设施规模"][0]
                                    需要新增的设施x["设施规模"] = 需要新增的设施x["设施规模"][1:]
                                新设施["_形状"] = 点类.点创建(点类.属性获取_x坐标(内点), 点类.属性获取_y坐标(内点))
                                游标类.行插入_字典形式(游标_设施_插入, 新设施, 设施操作字段名称列表_新增)
                                from bxarcpy.环境包 import 输入输出类

                                输入输出类.输出消息(f"地块{用地x['_ID']}新增设施{新设施}")

    输出要素路径_用地 = 要素类.要素创建_通过复制并重命名重名要素(用地要素, 输出要素路径_用地)
    输出要素路径_设施 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素路径_设施)
    return 输出要素路径_用地, 输出要素路径_设施


def _计算类别代码等属性(输入要素路径, 输出要素路径="内存临时"):
    输出要素路径 = 输出路径生成_当采用内存临时时([输入要素路径]) if 输出要素路径 == "内存临时" else 输出要素路径

    设施要素 = 要素类.要素创建_通过复制(输入要素路径)

    from bxpy.基本对象包 import 字典类
    from bxpy.路径包 import 路径类
    from bxpy.进度条包 import 进度条类
    from bxgis.配置 import 基本信息

    excel路径 = 路径类.连接(基本信息.计算机信息.bxgis根目录, "配置", "配套_指标测算表_杭州新.xlsx")
    实体类型 = 基本信息.设施要素字段映射.实体类型字段名称
    设施名称 = 基本信息.设施要素字段映射.设施名称字段名称
    类别代码 = 基本信息.设施要素字段映射.类别代码字段名称
    设施级别 = 基本信息.设施要素字段映射.设施级别字段名称
    设施代码 = 基本信息.设施要素字段映射.设施代码字段名称
    设施类型 = 基本信息.设施要素字段映射.设施类型字段名称
    控制方式 = 基本信息.设施要素字段映射.控制方式字段名称
    设置形式 = 基本信息.设施要素字段映射.设置形式字段名称
    设置形式指定 = 基本信息.设施要素字段映射.设置形式指定字段名称
    位置精确度 = 基本信息.设施要素字段映射.位置精确度字段名称
    位置精确度指定 = 基本信息.设施要素字段映射.位置精确度指定字段名称
    设施坐标 = 基本信息.设施要素字段映射.设施坐标字段名称
    设施图标坐标 = 基本信息.设施要素字段映射.设施图标坐标字段名称
    设施坐标锁定 = 基本信息.设施要素字段映射.设施坐标锁定字段名称
    句柄 = 基本信息.设施要素字段映射.句柄字段名称
    实体GUID = 基本信息.设施要素字段映射.实体GUID字段名称
    实体ID = 基本信息.设施要素字段映射.实体ID字段名称

    类别代码映射表 = 字典类.转换_从excel(excel路径, "Sheet2", 要读取的列=["设施名称", "类型代码", "级别", "设施代码", "设施类型", "控制方式", "设置形式", "位置精确度"], 指定数据类型={"设施名称": str, "类别代码": str, "级别": str, "设施代码": str, "设施类型": str, "控制方式": str, "设置形式": str, "位置精确度": str})

    要素类.字段添加(设施要素, 实体类型, 删除既有字段=False)
    要素类.字段添加(设施要素, 类别代码, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施级别, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施代码, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施类型, 删除既有字段=False)
    要素类.字段添加(设施要素, 控制方式, 删除既有字段=False)
    要素类.字段添加(设施要素, 设置形式, 删除既有字段=False)
    要素类.字段添加(设施要素, 设置形式指定, 删除既有字段=False)
    要素类.字段添加(设施要素, 位置精确度, 删除既有字段=False)
    要素类.字段添加(设施要素, 位置精确度指定, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施坐标, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施图标坐标, 删除既有字段=False)
    要素类.字段添加(设施要素, 设施坐标锁定, 删除既有字段=False)
    要素类.字段添加(设施要素, 句柄, 删除既有字段=False)
    要素类.字段添加(设施要素, 实体GUID, 删除既有字段=False)
    要素类.字段添加(设施要素, 实体ID, 删除既有字段=False)

    未找到类别代码的设施名称集 = set()
    from bxpy.基本对象包 import 字类
    from bxarcpy.几何包 import 点类, 几何类

    需操作的字段名称列表 = [设施名称, 类别代码, 设施级别, 设施代码, 设施类型, 控制方式, 设置形式, 设置形式指定, 位置精确度, 位置精确度指定, 实体类型, 设施坐标, 设施图标坐标, 设施坐标锁定, "_坐标", 句柄, 实体GUID, 实体ID]
    with 游标类.游标创建("更新", 设施要素, 需操作的字段名称列表) as 游标:
        for 游标x in 进度条类.进度条创建(游标类.属性获取_数据_字典形式(游标, 需操作的字段名称列表), 总进度=要素类.属性获取_几何数量(设施要素), 前置信息="开始计算类别代码等属性"):
            类别代码映射 = [映射 for 映射 in 类别代码映射表 if 游标x[设施名称] == 映射["设施名称"]]
            if len(类别代码映射) == 0:
                未找到类别代码的设施名称集.add(游标x[设施名称])
            else:
                游标x[类别代码] = 字类.格式_补位(类别代码映射[0]["类型代码"], 4)
                游标x[设施级别] = 类别代码映射[0]["级别"]
                游标x[设施代码] = 类别代码映射[0]["设施代码"]
                游标x[设施类型] = 类别代码映射[0]["设施类型"]
                游标x[控制方式] = 类别代码映射[0]["控制方式"]
                游标x[设置形式] = 游标x[设置形式指定] if 游标x[设置形式指定] not in ["", None] else 类别代码映射[0]["设置形式"]
                游标x[位置精确度] = 游标x[位置精确度指定] if 游标x[位置精确度指定] not in ["", None] else 类别代码映射[0]["位置精确度"]

            游标x[实体类型] = "公共配套设施"

            if 游标x[设施坐标锁定] in ["", None]:
                游标x[设施坐标锁定] = "false"
            x坐标 = 字类.转换_到字(游标x["_坐标"][0], 2)
            y坐标 = 字类.转换_到字(游标x["_坐标"][1], 2)
            游标x[设施图标坐标] = f"({x坐标} {y坐标} 0.00)"
            if 游标x[设施坐标锁定] == "false":
                游标x[设施坐标] = f"({x坐标} {y坐标} 0.00)"
            if 游标x[句柄] in ["", None] or 游标x[实体GUID] in ["", None] or 游标x[实体ID] in ["", None]:
                随机句柄 = 字类.字符串生成_短GUID(7)
                随机GUID = 字类.字符串生成_GUID()
                游标x[句柄] = 随机句柄
                游标x[实体GUID] = 随机GUID + "-" + 随机句柄
                游标x[实体ID] = "000000" + "-" + 随机句柄
            游标类.行更新_字典形式(游标, 游标x)
    if len(list(未找到类别代码的设施名称集)) > 0:
        raise Exception(f"以下设施名称未找到类别代码：{list(未找到类别代码的设施名称集)}")

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(设施要素, 输出要素路径)
    return 输出要素路径


def _设施字符串转列表(设施字符串):
    try:
        if 设施字符串 in ["", None]:
            return []
        设施列表temp = 设施字符串.split("/")
        用地设施列表 = []
        for x in 设施列表temp:
            单个设施列表 = x.split("-")
            设施名称 = 单个设施列表[0]
            设施数量 = int(单个设施列表[1])
            if len(单个设施列表) == 3:  # 存在规模
                设施规模 = 单个设施列表[2].split(",")
                用地设施列表.append({"设施名称": 设施名称, "设施数量": 设施数量, "设施规模": 设施规模})
            else:
                用地设施列表.append({"设施名称": 设施名称, "设施数量": 设施数量})
        return 用地设施列表
    except Exception as e:
        print(f"设施字符串：{设施字符串}")
        raise Exception(f"设施字符串转列表失败，原因为：{e}")


def _设施列表转字符串(设施列表):
    新的用地设施字符串 = ""
    for x in 设施列表:
        新的用地设施字符串 += f"{x['设施名称']}-{x['设施数量']}"
        if "设施规模" in x:
            新的用地设施字符串 += f"-{','.join(x['设施规模'])}"
        新的用地设施字符串 += "/"
    新的用地设施字符串 = 新的用地设施字符串[0:-1] if 新的用地设施字符串[-1] == "/" else 新的用地设施字符串
    return 新的用地设施字符串


def _根据设施名称列表获取设施代码列表(设施名称列表):
    from bxpy.基本对象包 import 字典类
    from bxpy.路径包 import 路径类
    from bxgis.配置 import 基本信息

    excel路径 = 路径类.连接(基本信息.计算机信息.bxgis根目录, "配置", "配套_指标测算表_杭州新.xlsx")
    设施名称 = 基本信息.设施要素字段映射.设施名称字段名称
    设施代码 = 基本信息.设施要素字段映射.设施代码字段名称

    类别代码映射表 = 字典类.转换_从excel(excel路径, "Sheet2", 要读取的列=["设施名称", "设施代码"], 指定数据类型={"设施名称": str, "设施代码": str})

    未找到类别代码的设施名称集 = set()
    ret = []
    for 设施名称x in 设施名称列表:
        类别代码映射 = [映射 for 映射 in 类别代码映射表 if 设施名称x == 映射["设施名称"]]
        if len(类别代码映射) == 0:
            未找到类别代码的设施名称集.add(设施名称x)
        else:
            ret.append(类别代码映射[0]["设施代码"])

    if len(list(未找到类别代码的设施名称集)) > 0:
        raise Exception(f"以下设施名称未找到设施代码：{list(未找到类别代码的设施名称集)}")

    return ret


if __name__ == "__main__":
    # 工作空间 = r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb"
    # 日志类.开启()
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        设施更新(
            输入要素路径="SS_配套设施",
            用地规划要素路径="DIST_用地规划图",
            与用地规划要素中配套设施如何统一="从设施到用地",
            规划范围线要素名称="JX_规划范围线",
            工业片区要素名称="JX_工业片区范围线",
            街区要素名称="JX_街区范围线",
            街坊要素名称="JX_街坊范围线",
            分村要素名称=None,
            城镇集建区要素名称="KZX_城镇集建区",
            城镇弹性区要素名称="KZX_城镇弹性区",
            输出要素路径_用地="DIST_用地规划图3",
            输出要素路径_设施="SS_配套设施3",
        )
