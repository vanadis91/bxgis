# -*- coding: utf-8 -*-

from bxarcpy.要素包 import 要素类, 字段类
from bxarcpy.游标包 import 游标类
from bxpy.日志包 import 日志类
from bxpy.基本对象包 import 整类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息
import bxarcpy.工具包 as 工具包


def 层次分析法计算规划站点(
    行政界线要素路径="DIST_用地规划图",
    不纳入规划的乡镇列表=["安阳乡", "宋村乡", "富文乡", "屏门乡", "左口乡", "浪川乡", "王阜乡", "瑶山乡", "界首乡", "里商乡", "金峰乡", "鸠坑乡", "上官乡", "新桐乡", "春建乡", "渔山乡", "湖源乡", "环山乡", "钦堂乡", "合村乡", "新合乡", "莪山畲族乡", "钟山乡", "钱塘区围垦区"],
    现状站点数量字段名称="复核站点数",
    规划站点数量字段名称="规划站点数",
    规划站点数量理论字段名称="规划站点数_理论",
    规划站点分配权重字段名称="规划站点分配权重",
    站点总数=2520.0,
    每个街道最小站点数=0,
    指定部分街道的站点数量值={"街道名称": 0},
    输出要素名称="内存临时",
):
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_规划站点" + "_" + 工具包.生成短GUID()
    行政界线要素路径 = 要素类.要素创建_通过复制(行政界线要素路径)

    要素类.字段添加(行政界线要素路径, 规划站点数量字段名称, 字段类型="长整型")
    要素类.字段添加(行政界线要素路径, 规划站点数量理论字段名称, 字段类型="长整型")
    要素类.字段添加(行政界线要素路径, 规划站点分配权重字段名称, 字段类型="双精度")

    去掉乡之前的行政界线要素路径 = 行政界线要素路径
    筛选SQL = ""
    for x in 不纳入规划的乡镇列表:
        筛选SQL += f"街道名称 NOT LIKE '{x}' AND "
    筛选SQL = 筛选SQL[:-4]
    行政界线要素路径 = 要素类.要素创建_通过筛选(行政界线要素路径, 筛选SQL)

    # 权重计算
    操作字段 = ["街道名称", "常住人口", "建成区面积", "区生产总值", "区县名称", 现状站点数量字段名称, 规划站点数量字段名称, 规划站点数量理论字段名称, 规划站点分配权重字段名称]
    with 游标类.游标创建("更新", 行政界线要素路径, 操作字段) as 游标:
        总常住人口 = 0.0
        总建成区面积 = 0.0
        总生产总值 = 0.0
        总生产总值temp = {}
        人口密度列表 = []
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
            总常住人口 += x["常住人口"]
            总建成区面积 += x["建成区面积"]
            总生产总值temp[x["区县名称"]] = x["区生产总值"]
            人口密度 = (总常住人口 / 10000) / (总建成区面积 / 1000000)
            人口密度列表.append(人口密度)
        游标类.重置(游标)
        日志类.输出调试(f"总生产总值字典：{总生产总值temp}")
        日志类.输出调试(f"总总常住人口：{总常住人口}")
        日志类.输出调试(f"总总建成区面积：{总建成区面积}")

        for k, v in 总生产总值temp.items():
            总生产总值 += v
        总人口密度 = sum(人口密度列表)
        权重值列表_未归一 = []
        for i, x in enumerate(游标类.属性获取_数据_字典形式(游标, 操作字段)):
            权重值_未归一 = x["常住人口"] / 总常住人口 * 0.4 + x["建成区面积"] / 总建成区面积 * 0.3 + 人口密度列表[i] / 总人口密度 * 0.2 + x["区生产总值"] / 总生产总值 * 0.1
            权重值列表_未归一.append(权重值_未归一)
        游标类.重置(游标)

        权重值列表_归一 = [x / sum(权重值列表_未归一) for x in 权重值列表_未归一]
        规划站点数量列表_理论 = [站点总数 * x for x in 权重值列表_归一]
        规划站点分配权重 = [x * 100 for x in 权重值列表_归一]

        维持现状站点数量列表 = []
        新增站点比例列表 = []
        现状站点数量列表 = []
        街道名称 = []
        for i, x in enumerate(游标类.属性获取_数据_字典形式(游标, 操作字段)):
            if 日志类.属性获取_当前函数内日志开启状态():
                if x["街道名称"] == "望江街道":
                    日志类.输出调试并暂停(f"{x['街道名称']}的现状站点数量是：{x[现状站点数量字段名称]}")
                    日志类.输出调试并暂停(f"{x['街道名称']}的理论规划站点数量是：{规划站点数量列表_理论[i]}")
            现状站点数量和至少站点数量的大值 = max(x[现状站点数量字段名称], 每个街道最小站点数)
            if 现状站点数量和至少站点数量的大值 >= 规划站点数量列表_理论[i]:
                维持现状站点数量列表.append(现状站点数量和至少站点数量的大值)
                新增站点比例列表.append(0.0)
                现状站点数量列表.append(x[现状站点数量字段名称])
                街道名称.append(x["街道名称"])
            else:
                维持现状站点数量列表.append(现状站点数量和至少站点数量的大值)
                新增站点比例列表.append(规划站点数量列表_理论[i] - 现状站点数量和至少站点数量的大值)
                现状站点数量列表.append(x[现状站点数量字段名称])
                街道名称.append(x["街道名称"])
        游标类.重置(游标)
        权重值列表_再次归一 = [x / sum(新增站点比例列表) for x in 新增站点比例列表]
        新增部分的站点数量 = 站点总数 - sum(维持现状站点数量列表)
        if 新增部分的站点数量 < 0:
            # 维持现状站点数量列表 = 现状站点数量列表
            新增部分的站点数量 = 0
            日志类.输出信息("现状站点已超规划目标")
        规划站点数量列表_实际_需新增街道_浮点 = [新增部分的站点数量 * x + y for x, y in zip(权重值列表_再次归一, 维持现状站点数量列表)]
        规划站点数量列表_实际_需新增街道_整数 = [round(x) for x in 规划站点数量列表_实际_需新增街道_浮点]

        次数 = 0 if 新增部分的站点数量 > 0 else 1000
        日志类.输出调试(f"新增部分的站点数量：{新增部分的站点数量}")
        日志类.输出调试并暂停(f"迭代前的站点总数：{sum(规划站点数量列表_实际_需新增街道_整数)}")
        差值 = (站点总数 - sum(规划站点数量列表_实际_需新增街道_整数)) / len(权重值列表_再次归一) / 1000
        差值符号 = "正" if 差值 >= 0 else "负"
        while sum(规划站点数量列表_实际_需新增街道_整数) != 站点总数 and 次数 < 1000:
            次数 += 1
            日志类.输出调试(f"平均差值，第{次数}次：{差值}")
            if 差值 >= 0 and 差值符号 == "正" or 差值 < 0 and 差值符号 == "负":
                差值 = 差值 * 1.1
            else:
                差值 = -差值 / 10

            规划站点数量列表_实际_需新增街道_浮点temp = []
            for x, y in zip(规划站点数量列表_实际_需新增街道_浮点, 新增站点比例列表):
                if y != 0.0:
                    ret = x + 差值
                else:
                    ret = x
                规划站点数量列表_实际_需新增街道_浮点temp.append(ret)
            规划站点数量列表_实际_需新增街道_浮点 = 规划站点数量列表_实际_需新增街道_浮点temp
            规划站点数量列表_实际_需新增街道_整数 = [round(x) for x in 规划站点数量列表_实际_需新增街道_浮点]
            日志类.输出调试并暂停(f"迭代后的站点总数：浮点，{sum(规划站点数量列表_实际_需新增街道_浮点)}，整数，{sum(规划站点数量列表_实际_需新增街道_整数)}")
            if (站点总数 - sum(规划站点数量列表_实际_需新增街道_整数)) >= 0:
                差值符号 = "正"
            else:
                差值符号 = "负"

        规划站点数量列表_实际_需新增街道 = 规划站点数量列表_实际_需新增街道_整数
        站点新建差额 = [y - x for x, y in zip(现状站点数量列表, 规划站点数量列表_实际_需新增街道)]
        for name, x, 现状, 规划 in zip(街道名称, 站点新建差额, 现状站点数量列表, 规划站点数量列表_实际_需新增街道):
            if x < 0:
                raise Exception(f"{name}的规划站点数量（{规划}）小于现状站点数量（{现状}）")
        for name, x in zip(街道名称, 规划站点数量列表_实际_需新增街道):
            if x < 每个街道最小站点数:
                raise Exception(f"{name}的规划站点数量小于每个街道最小站点数")

        日志类.输出信息(f"现状和规划站点数量元祖{list(zip(街道名称, 现状站点数量列表, 规划站点数量列表_理论, 规划站点数量列表_实际_需新增街道,站点新建差额))}", 内容长度=20000)
        规划站点数量列表_实际 = 规划站点数量列表_实际_需新增街道

        for i, x in enumerate(游标类.属性获取_数据_字典形式(游标, 操作字段)):
            x[规划站点数量字段名称] = 规划站点数量列表_实际[i]
            x[规划站点数量理论字段名称] = 规划站点数量列表_理论[i]
            x[规划站点分配权重字段名称] = 规划站点分配权重[i]
            游标类.行更新_字典形式(游标, x)
    输出要素 = 要素类.要素创建_通过更新(去掉乡之前的行政界线要素路径, 行政界线要素路径)

    要素类.字段排序(输出要素, [现状站点数量字段名称, 规划站点分配权重字段名称, 规划站点数量理论字段名称, 规划站点数量字段名称])
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(输出要素, 输出要素名称)
    return 输出要素


if __name__ == "__main__":
    日志类.开启(级别列表过滤=["信息", "警告", "错误", "危险"])
    工作空间 = r"C:\Users\beixiao\Project\H杭州市户外劳动者服务站点研究\杭州市户外劳动者服务站点研究_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        JX_行政界线街道 = 层次分析法计算规划站点(
            行政界线要素路径="JX_行政界线街道",
            现状站点数量字段名称="现状站点数量",
            规划站点数量字段名称="规划站点数量",
            规划站点数量理论字段名称="规划站点数量_理论",
            规划站点分配权重字段名称="规划站点分配权重",
            站点总数=2520.0,
            每个街道最小站点数=0,
        )
        JX_行政界线街道 = 层次分析法计算规划站点(
            行政界线要素路径=JX_行政界线街道,
            现状站点数量字段名称="现状标杆性站点数量",
            规划站点数量字段名称="规划标杆性站点数量",
            规划站点数量理论字段名称="规划标杆性站点数量_理论",
            规划站点分配权重字段名称="规划标杆性站点分配权重",
            站点总数=252.0,
            每个街道最小站点数=1,
        )
        层次分析法计算规划站点(
            行政界线要素路径=JX_行政界线街道,
            现状站点数量字段名称="现状24小时站点数量",
            规划站点数量字段名称="规划24小时站点数量",
            规划站点数量理论字段名称="规划24小时站点数量_理论",
            规划站点分配权重字段名称="规划24小时站点分配权重",
            站点总数=300.0,
            输出要素名称="JX_行政界线街道",
        )
