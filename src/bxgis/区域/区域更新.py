# -*- coding: utf-8 -*-

from typing import Union, Literal
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类
from bxpy.日志包 import 日志生成器, 日志处理器
from bxpy.时间包 import 时间类
from bxarcpy.游标包 import 游标类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置.配置包 import 配置类

基本信息 = 配置类.项目信息对象获取()
from bxgis.常用 import 属性更新


@时间类.装饰器_运行时长
def 区域更新(
    区域要素路径="JX_街坊范围线",
    区域要素中编号字段名称="区域编号",
    用地要素路径="DIST_用地规划图",
    用地要素中所属区域字段名称="所属街区",
    设施要素名称="SS_配套设施",
    设施要素中所属区域字段名称="所属街区",
    有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
    是否不汇总部分设施=True,
    不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
    不汇总设施所在地块地类列表=None,
    是否计算用地和设施的所属区域=True,
    是否按区域对用地进行分割=True,
    是否统计耕地保有量=True,
    是否统计永久基本农田=True,
    永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
    是否统计生态保护红线=True,
    生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
    是否统计村庄建设边界=True,
    村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
    是否统计设施=True,
    输出要素名称="内存临时",
):
    日志生成器.临时关闭日志()
    from bxarcpy.环境包 import 输入输出类
    from bxpy.基本对象包 import 字典类, 字类, 浮类, 表类

    输出要素名称 = 工具包.临时路径生成(["区域更新"]) if 输出要素名称 == "内存临时" else 输出要素名称

    区域要素 = 要素类.要素创建_通过复制(区域要素路径)
    区域要素_修改前 = 要素类.要素创建_通过复制(区域要素路径)

    地块要素 = 要素类.要素创建_通过复制(用地要素路径)
    设施要素 = 要素类.要素创建_通过复制(设施要素名称)

    if 是否不汇总部分设施:
        from bxpy.基本对象包 import 表类

        配套设施规模字段名称 = 基本信息.地块要素字段映射.配套设施规模字段名称
        地类编号字段名称 = 基本信息.地块要素字段映射.地类编号字段名称
        with 游标类.游标创建("更新", 地块要素, [配套设施规模字段名称, 地类编号字段名称]) as 游标_地块:
            for 地块x in 游标类.属性获取_数据_字典形式(游标_地块, [配套设施规模字段名称, 地类编号字段名称]):
                if 地块x[配套设施规模字段名称] in [None, "", " "]:
                    地块设施列表: list = []
                else:
                    地块设施列表: list = 地块x[配套设施规模字段名称].split("/")

                修改后设施列表 = []
                for x in 地块设施列表:
                    是否需添加 = True
                    if 不汇总设施名称列表 and x.split("-")[0] in 不汇总设施名称列表:
                        是否需添加 = False
                    if 不汇总设施所在地块地类列表 and 是否需添加 and 表类.是否包含项(不汇总设施所在地块地类列表, 地块x[地类编号字段名称]):
                        是否需添加 = False
                    if 是否需添加:
                        修改后设施列表.append(x)
                地块x[配套设施规模字段名称] = "/".join(修改后设施列表)
                游标类.行更新_字典形式(游标_地块, 地块x)

        设施名称字段名称 = 基本信息.设施要素字段映射.设施名称字段名称
        from bxarcpy.几何包 import 几何类

        with 游标类.游标创建("更新", 设施要素, [设施名称字段名称, "_形状"]) as 游标_设施:
            for 设施x in 游标类.属性获取_数据_字典形式(游标_设施, [设施名称字段名称, "_形状"]):
                是否已删除 = False
                if 不汇总设施名称列表 and 设施x[设施名称字段名称] in 不汇总设施名称列表:
                    游标类.行删除(游标_设施)
                    是否已删除 = True
                if 不汇总设施所在地块地类列表 and not 是否已删除:
                    with 游标类.游标创建("查询", 地块要素, ["_形状", 地类编号字段名称]) as 游标_地块:
                        for 地块x in 游标类.属性获取_数据_字典形式(游标_地块, ["_形状", 地类编号字段名称]):
                            if 几何类.关系_包含(地块x["_形状"], 设施x["_形状"]):
                                if 表类.是否包含项(不汇总设施所在地块地类列表, 地块x[地类编号字段名称]):
                                    游标类.行删除(游标_设施)
                                    是否已删除 = True
                                break
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(地块要素, "AA_去掉设施后的地块要素")
            要素类.要素创建_通过复制并重命名重名要素(设施要素, "AA_去掉设施后的设施要素")
            input("按任意键继续……")
        输入输出类.输出消息(f"完成了不汇总设施的清理")
    if 是否按区域对用地进行分割:
        地块要素 = 属性更新.常用_属性更新(地块要素, 区域要素, [[用地要素中所属区域字段名称, 区域要素中编号字段名称]], "分割输入要素")
        输入输出类.输出消息(f"完成了地块的分割")
    if 是否计算用地和设施的所属区域 and not 是否按区域对用地进行分割:
        地块要素 = 属性更新.常用_属性更新(地块要素, 区域要素, [[用地要素中所属区域字段名称, 区域要素中编号字段名称]], "内点在区域要素内")
        设施要素 = 属性更新.常用_属性更新(设施要素, 区域要素, [[设施要素中所属区域字段名称, 区域要素中编号字段名称]], 计算方式="内点在区域要素内")
        输入输出类.输出消息(f"完成了地块和设施所属区域的计算")

    统计数据 = {}
    需操作的字段名称列表 = ["地类编号", 用地要素中所属区域字段名称, "居住人数", "户籍人数", "_面积", "绿地面积指定", "地块建筑面积", "住宅建筑面积", "公服建筑面积", "商服建筑面积", "工业建筑面积", "用地构成"]
    for x in 游标类.项迭代器获取(地块要素, 需操作的字段名称列表):
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总居住人数"], 0)
        统计数据[x[用地要素中所属区域字段名称]]["总居住人数"] += 浮类.转换_到浮(x["居住人数"])
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总城镇居住人数"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总村庄居住人数"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总村庄户籍人数"], 0)

        if x["用地构成"] in ["城镇建设用地"]:
            统计数据[x[用地要素中所属区域字段名称]]["总城镇居住人数"] += 浮类.转换_到浮(x["居住人数"])
        elif x["用地构成"] in ["村庄建设用地"]:
            统计数据[x[用地要素中所属区域字段名称]]["总村庄居住人数"] += 浮类.转换_到浮(x["居住人数"])
        统计数据[x[用地要素中所属区域字段名称]]["总村庄户籍人数"] += 浮类.转换_到浮(x["户籍人数"])

        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总填色面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总建设用地"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总非建设用地"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总城乡建设用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总村庄建设用地面积"], 0)

        统计数据[x[用地要素中所属区域字段名称]]["总填色面积"] += 浮类.转换_到浮(x["_面积"])
        if x["用地构成"] in ["城镇建设用地", "村庄建设用地", "其他建设用地", "区域基础设施用地"]:
            统计数据[x[用地要素中所属区域字段名称]]["总建设用地"] += 浮类.转换_到浮(x["_面积"])
        if x["用地构成"] in ["林草地", "农业设施建设用地", "农园地", "其他土地", "水域"]:
            统计数据[x[用地要素中所属区域字段名称]]["总非建设用地"] += 浮类.转换_到浮(x["_面积"])
        if x["用地构成"] in ["城镇建设用地", "村庄建设用地"]:
            统计数据[x[用地要素中所属区域字段名称]]["总城乡建设用地面积"] += 浮类.转换_到浮(x["_面积"])
        if x["用地构成"] in ["村庄建设用地"]:
            统计数据[x[用地要素中所属区域字段名称]]["总村庄建设用地面积"] += 浮类.转换_到浮(x["_面积"])

        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总工业用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总绿地用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总公园绿地用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总公园绿地用地面积_扣除配套"], 0)

        if 字类.匹配正则(x["地类编号"], "^10(?!02).*"):
            统计数据[x[用地要素中所属区域字段名称]]["总工业用地面积"] += 浮类.转换_到浮(x["_面积"])
        elif 字类.匹配正则(x["地类编号"], "^(1401|1402|1403).*"):
            统计数据[x[用地要素中所属区域字段名称]]["总绿地用地面积"] += 浮类.转换_到浮(x["_面积"])
        if 字类.匹配正则(x["地类编号"], ".*(1401).*"):
            统计数据[x[用地要素中所属区域字段名称]]["总公园绿地用地面积"] += 浮类.转换_到浮(x["_面积"])
            统计数据[x[用地要素中所属区域字段名称]]["总公园绿地用地面积_扣除配套"] += 浮类.转换_到浮(x["绿地面积指定"])

        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总耕地用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总林地用地面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总河流水面用地面积"], 0)

        if 字类.匹配正则(x["地类编号"], "^01.*"):
            统计数据[x[用地要素中所属区域字段名称]]["总耕地用地面积"] += 浮类.转换_到浮(x["_面积"])
        elif 字类.匹配正则(x["地类编号"], "^03.*"):
            统计数据[x[用地要素中所属区域字段名称]]["总林地用地面积"] += 浮类.转换_到浮(x["_面积"])
        elif 字类.匹配正则(x["地类编号"], "^1701.*"):
            统计数据[x[用地要素中所属区域字段名称]]["总河流水面用地面积"] += 浮类.转换_到浮(x["_面积"])

        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总建筑面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总住宅建筑面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总公服建筑面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总商服建筑面积"], 0)
        字典类.默认值设置(统计数据, [x[用地要素中所属区域字段名称], "总工业建筑面积"], 0)

        统计数据[x[用地要素中所属区域字段名称]]["总建筑面积"] += 浮类.转换_到浮(x["地块建筑面积"])
        统计数据[x[用地要素中所属区域字段名称]]["总住宅建筑面积"] += 浮类.转换_到浮(x["住宅建筑面积"])
        统计数据[x[用地要素中所属区域字段名称]]["总公服建筑面积"] += 浮类.转换_到浮(x["公服建筑面积"])
        统计数据[x[用地要素中所属区域字段名称]]["总商服建筑面积"] += 浮类.转换_到浮(x["商服建筑面积"])
        统计数据[x[用地要素中所属区域字段名称]]["总工业建筑面积"] += 浮类.转换_到浮(x["工业建筑面积"])

    输入输出类.输出消息(f"完成了地块数据的汇总")

    # 耕地保有量统计
    if 是否统计耕地保有量:
        from bxpy.基本对象包 import 字类, 字典类, 浮类

        耕地要素 = 要素类.要素创建_通过筛选(地块要素, f"{基本信息.地块要素字段映射.地类编号字段名称} LIKE '01%'")
        区域要素拷贝 = 要素类.要素创建_通过复制(区域要素)
        区域和耕地相交后 = 要素类.要素创建_通过相交([区域要素拷贝, 耕地要素])
        区域和耕地相交后 = 计算净耕地面积(区域和耕地相交后, "净耕地面积", 有扣除地类系数的要素名称)
        for x in 游标类.项迭代器获取(区域和耕地相交后, [区域要素中编号字段名称, "净耕地面积"]):
            字典类.默认值设置(统计数据, [x[区域要素中编号字段名称], "总耕地保有量"], 0)
            统计数据[x[区域要素中编号字段名称]]["总耕地保有量"] += 浮类.转换_到浮(x["净耕地面积"])
        输入输出类.输出消息(f"完成了耕地保有量统计")

    # 永久基本农田统计
    if 是否统计永久基本农田:
        from bxpy.基本对象包 import 字类, 字典类, 浮类

        永久基本农田要素 = 要素类.要素创建_通过复制(永久基本农田要素名称)
        区域要素拷贝 = 要素类.要素创建_通过复制(区域要素)
        # 永久基本农田要素 = 要素类.要素创建_通过几何修复(永久基本农田要素, 是否打印被删除的要素=True)
        # 区域要素拷贝 = 要素类.要素创建_通过几何修复(区域要素拷贝, 是否打印被删除的要素=True)
        区域和永久基本农田相交后 = 要素类.要素创建_通过相交([区域要素拷贝, 永久基本农田要素])
        # 区域和永久基本农田相交后 = 要素类.要素创建_通过联合并赋值字段(区域和永久基本农田相交后, 区域要素拷贝)
        区域和永久基本农田相交后 = 计算净耕地面积(区域和永久基本农田相交后, "净基本农田面积", 有扣除地类系数的要素名称)
        for x in 游标类.项迭代器获取(区域和永久基本农田相交后, [区域要素中编号字段名称, "净基本农田面积"]):
            字典类.默认值设置(统计数据, [x[区域要素中编号字段名称], "总永久基本农田用地面积"], 0)
            统计数据[x[区域要素中编号字段名称]]["总永久基本农田用地面积"] += 浮类.转换_到浮(x["净基本农田面积"])
        输入输出类.输出消息(f"完成了永久基本农田统计")

    if 是否统计生态保护红线:
        from bxpy.基本对象包 import 字类, 字典类, 浮类

        生态保护红线要素 = 要素类.要素创建_通过复制(生态保护红线要素名称)
        区域要素拷贝 = 要素类.要素创建_通过复制(区域要素)
        区域和生态保护红线相交后 = 要素类.要素创建_通过相交([区域要素拷贝, 生态保护红线要素])
        for x in 游标类.项迭代器获取(区域和生态保护红线相交后, [区域要素中编号字段名称, "_面积"]):
            字典类.默认值设置(统计数据, [x[区域要素中编号字段名称], "总生态保护红线用地面积"], 0)
            统计数据[x[区域要素中编号字段名称]]["总生态保护红线用地面积"] += 浮类.转换_到浮(x["_面积"])
        输入输出类.输出消息(f"完成了生态保护红线统计")

    # 村庄建设边界统计
    if 是否统计村庄建设边界:
        from bxpy.基本对象包 import 字类, 字典类, 浮类

        村庄建设边界要素 = 要素类.要素创建_通过复制(村庄建设边界要素名称)
        区域要素拷贝 = 要素类.要素创建_通过复制(区域要素)
        区域和村庄建设边界相交后 = 要素类.要素创建_通过相交([区域要素拷贝, 村庄建设边界要素])
        if 日志生成器.属性获取_当前函数内日志开启状态():
            要素类.要素创建_通过复制并重命名重名要素(区域和村庄建设边界相交后, "AA_区域和村庄相交后")
        for x in 游标类.项迭代器获取(区域和村庄建设边界相交后, [区域要素中编号字段名称, "_面积"]):
            字典类.默认值设置(统计数据, [x[区域要素中编号字段名称], "总村庄建设边界用地面积"], 0)
            日志生成器.输出调试(f"_面积{x['_面积']}")
            统计数据[x[区域要素中编号字段名称]]["总村庄建设边界用地面积"] += 浮类.转换_到浮(x["_面积"])
            日志生成器.输出调试(f"{统计数据[x[区域要素中编号字段名称]]['总村庄建设边界用地面积']}")
        输入输出类.输出消息(f"完成了村庄建设边界统计")

    # 计算设施相关的内容
    if 是否统计设施:
        from bxpy.基本对象包 import 浮类, 字典类

        for x in 游标类.项迭代器获取(设施要素, ["设施类型", "设施名称", "设施数量", "设施规模", 设施要素中所属区域字段名称]):
            if x[设施要素中所属区域字段名称] not in ["", None]:
                字典类.默认值设置(统计数据, [x[设施要素中所属区域字段名称]], {})
                if x["设施类型"] in ["教育", "商服", "社会福利", "社区治理", "生态环境", "体育", "文化", "医疗"]:
                    设施大类名称 = "配套设施汇总"
                elif x["设施类型"] in ["市政交通"]:
                    设施大类名称 = "交通设施汇总"
                elif x["设施类型"] in ["市政防灾", "市政公用", "市政环卫", "市政人防", "市政消防"]:
                    设施大类名称 = "市政设施汇总"
                else:
                    设施大类名称 = "其他设施汇总"

                字典类.默认值设置(统计数据, [x[设施要素中所属区域字段名称], 设施大类名称], {})
                if x["设施名称"] not in 统计数据[x[设施要素中所属区域字段名称]][设施大类名称]:
                    统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]] = [浮类.转换_到浮(x["设施数量"]), x["设施规模"]]
                else:
                    统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]][0] += 浮类.转换_到浮(x["设施数量"])
                    if x["设施规模"] not in ["", " ", None] and 统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]][1] not in ["", " ", None]:
                        统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]][1] += "、" + x["设施规模"]
                    elif x["设施规模"] not in ["", " ", None] and 统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]][1] in ["", " ", None]:
                        统计数据[x[设施要素中所属区域字段名称]][设施大类名称][x["设施名称"]][1] += x["设施规模"]
        输入输出类.输出消息(f"完成了设施相关内容的汇总")

    # 开始正式赋值区域要素
    要素类.字段添加(区域要素, "区域名称", 删除既有字段=False)
    要素类.字段添加(区域要素, "区域主导属性", 删除既有字段=False)

    要素类.字段添加(区域要素, "配套设施汇总弹性", 删除既有字段=False)
    要素类.字段添加(区域要素, "交通设施汇总弹性", 删除既有字段=False)
    要素类.字段添加(区域要素, "市政设施汇总弹性", 删除既有字段=False)
    要素类.字段添加(区域要素, "其他设施汇总弹性", 删除既有字段=False)

    要素类.字段添加(区域要素, "总居住人数")
    要素类.字段添加(区域要素, "总城镇居住人数")
    要素类.字段添加(区域要素, "总村庄居住人数")
    要素类.字段添加(区域要素, "总村庄户籍人数")

    要素类.字段添加(区域要素, "总填色面积")
    要素类.字段添加(区域要素, "总建设用地")
    要素类.字段添加(区域要素, "总城乡建设用地面积")
    要素类.字段添加(区域要素, "总村庄建设用地面积")

    要素类.字段添加(区域要素, "总工业用地面积")
    要素类.字段添加(区域要素, "总绿地用地面积")
    要素类.字段添加(区域要素, "总公园绿地用地面积")
    要素类.字段添加(区域要素, "总公园绿地用地面积_扣除配套")

    要素类.字段添加(区域要素, "总非建设用地")
    要素类.字段添加(区域要素, "总耕地用地面积")
    要素类.字段添加(区域要素, "总林地用地面积")
    要素类.字段添加(区域要素, "总河流水面用地面积")

    要素类.字段添加(区域要素, "总建筑面积")
    要素类.字段添加(区域要素, "总住宅建筑面积")
    要素类.字段添加(区域要素, "总公服建筑面积")
    要素类.字段添加(区域要素, "总商服建筑面积")
    要素类.字段添加(区域要素, "总工业建筑面积")

    要素类.字段添加(区域要素, "总耕地保有量")

    要素类.字段添加(区域要素, "总永久基本农田用地面积")
    要素类.字段添加(区域要素, "总生态保护红线用地面积")
    要素类.字段添加(区域要素, "总村庄建设边界用地面积")

    要素类.字段添加(区域要素, "允许提高幅度")
    要素类.字段添加(区域要素, "备注")

    if 是否统计设施:
        要素类.字段添加(区域要素, "配套设施汇总", 字段长度=65535)
    else:
        要素类.字段添加(区域要素, "配套设施汇总", 字段长度=65535, 删除既有字段=False)
    要素类.字段添加(区域要素, "配套设施汇总1", 字段长度=255)
    要素类.字段添加(区域要素, "配套设施汇总2", 字段长度=255)
    要素类.字段添加(区域要素, "配套设施汇总3", 字段长度=255)

    if 是否统计设施:
        要素类.字段添加(区域要素, "交通设施汇总", 字段长度=65535)
    else:
        要素类.字段添加(区域要素, "交通设施汇总", 字段长度=65535, 删除既有字段=False)
    要素类.字段添加(区域要素, "交通设施汇总1", 字段长度=255)
    要素类.字段添加(区域要素, "交通设施汇总2", 字段长度=255)
    要素类.字段添加(区域要素, "交通设施汇总3", 字段长度=255)

    if 是否统计设施:
        要素类.字段添加(区域要素, "市政设施汇总", 字段长度=65535)
    else:
        要素类.字段添加(区域要素, "市政设施汇总", 字段长度=65535, 删除既有字段=False)
    要素类.字段添加(区域要素, "市政设施汇总1", 字段长度=255)
    要素类.字段添加(区域要素, "市政设施汇总2", 字段长度=255)
    要素类.字段添加(区域要素, "市政设施汇总3", 字段长度=255)

    if 是否统计设施:
        要素类.字段添加(区域要素, "其他设施汇总", 字段长度=65535)
    else:
        要素类.字段添加(区域要素, "其他设施汇总", 字段长度=65535, 删除既有字段=False)
    要素类.字段添加(区域要素, "其他设施汇总1", 字段长度=255)
    要素类.字段添加(区域要素, "其他设施汇总2", 字段长度=255)
    要素类.字段添加(区域要素, "其他设施汇总3", 字段长度=255)

    需操作的字段名称列表 = [区域要素中编号字段名称, "总居住人数", "总城镇居住人数", "总村庄居住人数", "总村庄户籍人数", "总填色面积", "总建设用地", "总城乡建设用地面积", "总村庄建设用地面积", "总工业用地面积", "总绿地用地面积", "总公园绿地用地面积", "总公园绿地用地面积_扣除配套", "总非建设用地", "总耕地用地面积", "总林地用地面积", "总河流水面用地面积", "总建筑面积", "总住宅建筑面积", "总公服建筑面积", "总商服建筑面积", "总工业建筑面积", "总耕地保有量", "总永久基本农田用地面积", "总生态保护红线用地面积", "总村庄建设边界用地面积", "允许提高幅度", "备注", "配套设施汇总", "配套设施汇总1", "配套设施汇总2", "配套设施汇总3", "配套设施汇总弹性", "交通设施汇总", "交通设施汇总1", "交通设施汇总2", "交通设施汇总3", "交通设施汇总弹性", "市政设施汇总", "市政设施汇总1", "市政设施汇总2", "市政设施汇总3", "市政设施汇总弹性", "其他设施汇总", "其他设施汇总1", "其他设施汇总2", "其他设施汇总3", "其他设施汇总弹性"]

    with 游标类.游标创建("更新", 区域要素, 需操作的字段名称列表) as 游标_设施:
        from bxpy.基本对象包 import 字类

        for x in 游标类.属性获取_数据_字典形式(游标_设施, 需操作的字段名称列表):
            if x[区域要素中编号字段名称] in 统计数据:
                日志生成器.输出调试(f"当前汇总的区域数据是：{统计数据[x[区域要素中编号字段名称]]}")
                x["总居住人数"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总居住人数"])
                x["总城镇居住人数"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总城镇居住人数"])
                x["总村庄居住人数"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总村庄居住人数"])
                x["总村庄户籍人数"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总村庄户籍人数"])

                x["总填色面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总填色面积"])
                x["总建设用地"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总建设用地"])
                x["总城乡建设用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总城乡建设用地面积"])
                x["总村庄建设用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总村庄建设用地面积"])

                x["总工业用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总工业用地面积"])
                x["总绿地用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总绿地用地面积"])
                x["总公园绿地用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总公园绿地用地面积"])
                x["总公园绿地用地面积_扣除配套"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总公园绿地用地面积_扣除配套"])

                x["总非建设用地"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总非建设用地"])
                x["总耕地用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总耕地用地面积"])
                x["总林地用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总林地用地面积"])
                x["总河流水面用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总河流水面用地面积"])

                x["总建筑面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总建筑面积"])
                x["总住宅建筑面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总住宅建筑面积"])
                x["总公服建筑面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总公服建筑面积"])
                x["总商服建筑面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总商服建筑面积"])
                x["总工业建筑面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]]["总工业建筑面积"])

                x["总耕地保有量"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]].setdefault("总耕地保有量", 0))

                x["总永久基本农田用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]].setdefault("总永久基本农田用地面积", 0))
                x["总生态保护红线用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]].setdefault("总生态保护红线用地面积", 0))
                x["总村庄建设边界用地面积"] = 字类.转换_到字(统计数据[x[区域要素中编号字段名称]].setdefault("总村庄建设边界用地面积", 0))
                x["允许提高幅度"] = 字类.转换_到字(5)
                if 是否统计设施:
                    for 设施大类名称 in ["配套设施汇总", "交通设施汇总", "市政设施汇总", "其他设施汇总"]:
                        设施汇总字符串 = ""
                        if 设施大类名称 in 统计数据[x[区域要素中编号字段名称]]:
                            设施汇总字符串 = "刚性管控：配置"
                            for k, v in 统计数据[x[区域要素中编号字段名称]][设施大类名称].items():
                                if v[1] in ["", " ", None]:
                                    设施汇总字符串 += k + str(int(v[0])) + "处；"
                                elif int(v[0]) == len(v[1].split("、")) == 1:
                                    设施汇总字符串 += k + str(int(v[0])) + "处，规模为" + v[1].split("、")[0] + "；"
                                elif int(v[0]) == len(v[1].split("、")) and len(set(v[1].split("、"))) == 1:
                                    设施汇总字符串 += k + str(int(v[0])) + "处，规模均为" + v[1].split("、")[0] + "；"
                                else:
                                    规模列表 = v[1].split("、")
                                    设施规模类型列表 = list(set(规模列表))
                                    规模类型和数量字典 = {}
                                    for 规模类型x in 设施规模类型列表:
                                        类型数量 = len([x for x in 规模列表 if x == 规模类型x])
                                        规模类型和数量字典[规模类型x] = 类型数量
                                    设施汇总字符串 += k + str(int(v[0])) + "处，其中"
                                    for k1, v1 in 规模类型和数量字典.items():
                                        设施汇总字符串 += k1 + str(v1) + "处，"
                                    if int(v[0]) - len(规模列表) > 0:
                                        设施汇总字符串 += "未指定规模" + str(int(v[0]) - len(规模列表)) + "处，"
                            设施汇总字符串 = 设施汇总字符串[0:-1]
                        if x[设施大类名称 + "弹性"] not in ["", " ", None]:
                            if 设施汇总字符串 not in ["", " ", None]:
                                设施汇总字符串 += "；弹性引导："
                            else:
                                设施汇总字符串 += "弹性引导："
                            设施汇总字符串 += x[设施大类名称 + "弹性"]

                        x[设施大类名称] = 设施汇总字符串

                        if len(设施汇总字符串) > 765:
                            x[设施大类名称 + "1"] = 设施汇总字符串[0:255]
                            x[设施大类名称 + "2"] = 设施汇总字符串[255:510]
                            x[设施大类名称 + "3"] = 设施汇总字符串[510:765]
                            from bxarcpy.环境包 import 输入输出类

                            输入输出类.输出消息(f"{x[区域要素中编号字段名称]} 区域中 {设施大类名称} 字符串长度过长")
                        elif len(设施汇总字符串) > 510:
                            x[设施大类名称 + "1"] = 设施汇总字符串[0:255]
                            x[设施大类名称 + "2"] = 设施汇总字符串[255:510]
                            x[设施大类名称 + "3"] = 设施汇总字符串[510:]
                        elif len(设施汇总字符串) > 255:
                            x[设施大类名称 + "1"] = 设施汇总字符串[0:255]
                            x[设施大类名称 + "2"] = 设施汇总字符串[255:]
                        else:
                            x[设施大类名称 + "1"] = 设施汇总字符串
            游标类.行更新_字典形式(游标_设施, x)

    from bxpy.路径包 import 路径类

    信息文件路径 = 路径类.连接(基本信息.项目信息.项目目录, ".bxroot", "项目信息.json")
    # 信息文件路径 = r"C:\Users\common\Project\D德清洛舍杨树湾单元控规\03过程文件\24.11.27报批稿\D德清洛舍杨树湾单元控规_信息.json"
    if not 路径类.是否存在(信息文件路径):
        路径类.新增文件(信息文件路径)
    信息json = 字典类.转换_从文件(信息文件路径)
    信息json = {} if 信息json is None else 信息json
    信息json.setdefault("技术指标", {})
    信息json["技术指标"].setdefault("区域统计数据", {})
    for k, v in 统计数据.items():
        信息json["技术指标"]["区域统计数据"][k] = v
    字典类.转换_到文件(信息json, 信息文件路径)

    from bxgis.属性.属性对比 import 属性对比

    字段名称列表 = 要素类.字段名称列表获取(区域要素, 含系统字段=False)
    字段名称列表 = [[x, x] for x in 字段名称列表]
    属性对比(区域要素_修改前, 区域要素, [基本信息.区域要素字段映射.区域编号字段名称, 基本信息.区域要素字段映射.区域编号字段名称], 对比字段名称列表=字段名称列表)

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(区域要素, 输出要素名称)
    return 输出要素


def 计算净耕地面积(基本农田要素路径, 净耕地面积字段名称="净耕地面积", 有扣除地类系数的要素路径=基本信息.项目信息.CZ_三调_扣除地类系数, 输出要素路径="内存临时"):
    日志生成器.临时关闭日志()
    输出要素路径 = 工具包.输出路径生成_当采用内存临时时(["计算净耕地面积"]) if 输出要素路径 == "内存临时" else 输出要素路径

    基本农田要素 = 要素类.要素创建_通过复制(基本农田要素路径)

    要素类.字段删除(基本农田要素, ["扣除地类系数", 净耕地面积字段名称])

    有扣除地类系数的要素 = 要素类.要素创建_通过复制(有扣除地类系数的要素路径)
    有扣除地类系数的要素 = 要素类.要素创建_通过多部件至单部件(有扣除地类系数的要素)

    if "扣除地类系数" not in 要素类.字段名称列表获取(有扣除地类系数的要素):
        raise Exception(f"{有扣除地类系数的要素}中未包括【扣除地类系数】字段，建议通过【用地/基期/字段处理并生成分项】来创建带有该字段的要素。")

    带有扣除系数的基本农田要素 = 要素类.要素创建_通过裁剪(有扣除地类系数的要素, 基本农田要素)
    带有扣除系数的基本农田要素 = 要素类.要素创建_通过多部件至单部件(带有扣除系数的基本农田要素)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(带有扣除系数的基本农田要素, "AA_带有扣除系数的耕地要素")
        日志生成器.输出并暂停("带有扣除系数的耕地要素，按任意键继续……")

    合并扣除系数后基本农田要素 = 要素类.要素创建_通过联合并赋值字段(基本农田要素, 带有扣除系数的基本农田要素, [["扣除地类系数", "扣除地类系数"]], 要素被分割时提示信息中包括的字段=["_ID"], 是否多部件转单部件=False)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(合并扣除系数后基本农田要素, "AA_合并扣除系数后的要素")
        日志生成器.输出并暂停("合并扣除系数后，按任意键继续……")
    # 要素类.字段删除(合并扣除系数后要素, ["Shape_Length_1", "Shape_Area_1"])
    要素类.字段添加(合并扣除系数后基本农田要素, 字段名称=净耕地面积字段名称, 字段类型="双精度", 字段长度=10)

    from bxpy.基本对象包 import 字类

    操作字段列表 = ["扣除地类系数", "SHAPE@AREA", 净耕地面积字段名称]
    with 游标类.游标创建("更新", 合并扣除系数后基本农田要素, 操作字段列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段列表):
            if x["扣除地类系数"] in ["", None, " "]:
                x["扣除地类系数"] = 0.0
            基本农田量 = (1.0 - float(x["扣除地类系数"])) * x["SHAPE@AREA"]
            x[净耕地面积字段名称] = 基本农田量
            游标类.行更新_字典形式(游标, x)
    if 日志生成器.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(合并扣除系数后基本农田要素, "AA_合并扣除系数后耕地要素")
        日志生成器.输出并暂停("合并扣除系数后耕地要素，按任意键继续……")

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(合并扣除系数后基本农田要素, 输出要素路径)
    return 输出要素路径


if __name__ == "__main__":
    日志处理器.输出器_文件对象_路径 = r"C:\Users\beixiao\Desktop\debug_区域更新.txt"
    日志生成器.开启()
    # 工作空间 = r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb"
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    # 工作空间 = r"C:\Users\common\Project\D德清洛舍杨树湾单元控规\03过程文件\24.11.27报批稿\D德清洛舍杨树湾单元控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        # 单元
        # 区域更新(
        #     区域要素路径=基本信息.项目信息.JX_规划范围线要素名称,
        #     区域要素中编号字段名称=基本信息.区域要素字段映射.区域编号字段名称,
        #     用地要素路径=基本信息.项目信息.YD_用地_规划要素名称,
        #     用地要素中所属区域字段名称=基本信息.地块要素字段映射.所属单元字段名称,
        #     设施要素名称=基本信息.项目信息.SS_配套设施_规划要素名称,
        #     设施要素中所属区域字段名称=基本信息.设施要素字段映射.所属单元字段名称,
        #     有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
        #     是否不汇总部分设施=True,
        #     不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
        #     是否计算用地和设施的所属区域=True,
        #     是否按区域对用地进行分割=False,
        #     是否统计耕地保有量=False,
        #     是否统计永久基本农田=False,
        #     永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
        #     是否统计生态保护红线=False,
        #     生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
        #     是否统计村庄建设边界=False,
        #     村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
        #     是否统计设施=False,
        #     输出要素名称=基本信息.项目信息.JX_规划范围线要素名称 + "1",
        # )

        # # 工业片区
        # 区域更新(
        #     区域要素路径=基本信息.项目信息.JX_工业片区范围线要素名称,
        #     区域要素中编号字段名称=基本信息.区域要素字段映射.区域编号字段名称,
        #     用地要素路径=基本信息.项目信息.YD_用地_规划要素名称,
        #     用地要素中所属区域字段名称=基本信息.地块要素字段映射.所属工业片区字段名称,
        #     设施要素名称=基本信息.项目信息.SS_配套设施_规划要素名称,
        #     设施要素中所属区域字段名称=基本信息.设施要素字段映射.所属工业片区字段名称,
        #     有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
        #     是否不汇总部分设施=True,
        #     不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
        #     不汇总设施所在地块地类列表=["$正则:^(?!10|11).*"],
        #     是否计算用地和设施的所属区域=True,
        #     是否按区域对用地进行分割=True,
        #     是否统计耕地保有量=True,
        #     是否统计永久基本农田=True,
        #     永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
        #     是否统计生态保护红线=False,
        #     生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
        #     是否统计村庄建设边界=True,
        #     村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
        #     是否统计设施=True,
        #     输出要素名称=基本信息.项目信息.JX_工业片区范围线要素名称 + "1",
        # )

        # # 街区
        区域更新(
            区域要素路径=基本信息.项目信息.JX_街区范围线要素名称,
            区域要素中编号字段名称=基本信息.区域要素字段映射.区域编号字段名称,
            用地要素路径=基本信息.项目信息.YD_用地_规划要素名称,
            用地要素中所属区域字段名称=基本信息.地块要素字段映射.所属街区字段名称,
            设施要素名称=基本信息.项目信息.SS_配套设施_规划要素名称,
            设施要素中所属区域字段名称=基本信息.设施要素字段映射.所属街区字段名称,
            有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
            是否不汇总部分设施=True,
            不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
            是否计算用地和设施的所属区域=True,
            是否按区域对用地进行分割=False,
            是否统计耕地保有量=True,
            是否统计永久基本农田=True,
            永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
            是否统计生态保护红线=False,
            生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
            是否统计村庄建设边界=True,
            村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
            是否统计设施=True,
            输出要素名称=基本信息.项目信息.JX_街区范围线要素名称 + "1",
        )

        # 街坊
        区域更新(
            区域要素路径=基本信息.项目信息.JX_街坊范围线要素名称,
            区域要素中编号字段名称=基本信息.区域要素字段映射.区域编号字段名称,
            用地要素路径=基本信息.项目信息.YD_用地_规划要素名称,
            用地要素中所属区域字段名称=基本信息.地块要素字段映射.所属街坊字段名称,
            设施要素名称=基本信息.项目信息.SS_配套设施_规划要素名称,
            设施要素中所属区域字段名称=基本信息.设施要素字段映射.所属街坊字段名称,
            有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
            是否不汇总部分设施=True,
            不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
            是否计算用地和设施的所属区域=True,
            是否按区域对用地进行分割=False,
            是否统计耕地保有量=True,
            是否统计永久基本农田=True,
            永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
            是否统计生态保护红线=False,
            生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
            是否统计村庄建设边界=True,
            村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
            是否统计设施=True,
            输出要素名称=基本信息.项目信息.JX_街坊范围线要素名称 + "1",
        )

        # 分村
        # 区域更新(
        #     区域要素路径=基本信息.项目信息.JX_分村范围线要素名称,
        #     区域要素中编号字段名称=基本信息.区域要素字段映射.区域编号字段名称,
        #     用地要素路径=基本信息.项目信息.YD_用地_规划要素名称,
        #     用地要素中所属区域字段名称=基本信息.地块要素字段映射.所属分村字段名称,
        #     设施要素名称=基本信息.项目信息.SS_配套设施_规划要素名称,
        #     设施要素中所属区域字段名称=基本信息.设施要素字段映射.所属分村字段名称,
        #     有扣除地类系数的要素名称="CZ_三调筛选_扣除地类系数",
        #     是否不汇总部分设施=True,
        #     不汇总设施名称列表=基本信息.项目信息.不入库设施名称列表,
        #     是否计算用地和设施的所属区域=True,
        #     是否按区域对用地进行分割=False,
        #     是否统计耕地保有量=True,
        #     是否统计永久基本农田=True,
        #     永久基本农田要素名称=基本信息.项目信息.KZX_永久基本农田要素名称,
        #     是否统计生态保护红线=False,
        #     生态保护红线要素名称=基本信息.项目信息.KZX_生态保护红线要素名称,
        #     是否统计村庄建设边界=True,
        #     村庄建设边界要素名称=基本信息.项目信息.KZX_村庄建设边界要素名称,
        #     是否统计设施=False,
        #     输出要素名称=基本信息.项目信息.JX_分村范围线要素名称 + "1",
        # )
