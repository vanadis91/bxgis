# -*- coding: utf-8 -*-

import bxarcpy
from typing import Literal
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.数据库包 import 数据库类
from bxarcpy.要素数据集包 import 要素数据集类
from bxarcpy.环境包 import 环境管理器类, 输入输出类
from bxgis.配置 import 基本信息


def 入库_工业片区(工业片区要素名称="JX_工业片区范围线", 单元名称="临江单元", 输出要素名称="XG_GYPQ"):
    区域编号字段名称 = 基本信息.区域要素字段映射.区域编号字段名称
    区域名称字段名称 = 基本信息.区域要素字段映射.区域名称字段名称
    总工业用地面积字段名称 = 基本信息.区域要素字段映射.总工业用地面积字段名称
    总工业建筑面积字段名称 = 基本信息.区域要素字段映射.总工业建筑面积字段名称
    区域主导属性字段名称 = 基本信息.区域要素字段映射.区域主导属性字段名称
    配套设施汇总字段名称 = 基本信息.区域要素字段映射.配套设施汇总字段名称
    交通设施汇总字段名称 = 基本信息.区域要素字段映射.交通设施汇总字段名称
    市政设施汇总字段名称 = 基本信息.区域要素字段映射.市政设施汇总字段名称
    备注字段名称 = 基本信息.区域要素字段映射.备注字段名称

    工业片区要素 = 要素类.要素创建_通过复制(工业片区要素名称)

    要素类.字段添加(工业片区要素, "DYMC", "字符串", 50, "规划编制单元名称")
    要素类.字段计算(工业片区要素, "DYMC", f"'{单元名称}'")
    要素类.字段添加(工业片区要素, "PQBM", "字符串", 20, "工业片区编码")
    要素类.字段计算(工业片区要素, "PQBM", f"!{区域编号字段名称}!")
    要素类.字段添加(工业片区要素, "PQMC", "字符串", 50, "工业片区名称")
    要素类.字段计算(工业片区要素, "PQMC", f"!{区域名称字段名称}!")
    要素类.字段添加(工业片区要素, "PQMJ", "双精度", 50, "片区面积")
    要素类.字段计算(工业片区要素, "PQMJ", "round(!Shape_Area!/10000, 4)")
    要素类.字段添加(工业片区要素, "YDZL", "双精度", 50, "工业用地总量")
    要素类.字段计算(工业片区要素, "YDZL", f"round(float(!{总工业用地面积字段名称}!)/10000, 4)")
    要素类.字段添加(工业片区要素, "JZZL", "双精度", 50, "工业建筑总量")
    要素类.字段计算(工业片区要素, "JZZL", f"round(float(!{总工业建筑面积字段名称}!)/10000, 4)")
    要素类.字段添加(工业片区要素, "ZDGN", "字符串", 255, "产业主导功能")
    要素类.字段计算(工业片区要素, "ZDGN", f"!{区域主导属性字段名称}!")

    要素类.字段添加(工业片区要素, "PTSS", "字符串", 255, "配套设施")
    要素类.字段计算(工业片区要素, "PTSS", f"!{配套设施汇总字段名称+'1'}!")

    要素类.字段添加(工业片区要素, "PTSS2", "字符串", 255, "配套设施2")
    要素类.字段计算(工业片区要素, "PTSS2", f"!{配套设施汇总字段名称+'2'}!")

    要素类.字段添加(工业片区要素, "PTSS3", "字符串", 255, "配套设施3")
    要素类.字段计算(工业片区要素, "PTSS3", f"!{配套设施汇总字段名称+'3'}!")

    要素类.字段添加(工业片区要素, "JTSS", "字符串", 255, "道路与交通设施")
    要素类.字段计算(工业片区要素, "JTSS", f"!{交通设施汇总字段名称+'1'}!")

    要素类.字段添加(工业片区要素, "JTSS2", "字符串", 255, "道路与交通设施2")
    要素类.字段计算(工业片区要素, "JTSS2", f"!{交通设施汇总字段名称+'2'}!")
    要素类.字段添加(工业片区要素, "JTSS3", "字符串", 255, "道路与交通设施3")
    要素类.字段计算(工业片区要素, "JTSS3", f"!{交通设施汇总字段名称+'3'}!")
    要素类.字段添加(工业片区要素, "SZSS", "字符串", 255, "市政设施")
    要素类.字段计算(工业片区要素, "SZSS", f"!{市政设施汇总字段名称+'1'}!")
    要素类.字段添加(工业片区要素, "SZSS2", "字符串", 255, "市政设施2")
    要素类.字段计算(工业片区要素, "SZSS2", f"!{市政设施汇总字段名称+'2'}!")
    要素类.字段添加(工业片区要素, "SZSS3", "字符串", 255, "市政设施3")
    要素类.字段计算(工业片区要素, "SZSS3", f"!{市政设施汇总字段名称+'3'}!")

    要素类.字段添加(工业片区要素, "BZ", "字符串", 255, "备注")
    要素类.字段计算(工业片区要素, "BZ", f"!{备注字段名称}!")

    要素类.字段删除(工业片区要素, 保留字段名称列表=["DYMC", "PQBM", "PQMC", "PQMJ", "YDZL", "JZZL", "ZDGN", "PTSS", "PTSS2", "PTSS3", "JTSS", "JTSS2", "JTSS3", "SZSS", "SZSS2", "SZSS3", "BZ"])

    from bxarcpy.游标包 import 游标类

    删除字段名称列表 = ["PTSS2", "PTSS3", "JTSS2", "JTSS3", "SZSS2", "SZSS3"]

    操作字段 = ["PTSS2", "PTSS3", "JTSS2", "JTSS3", "SZSS2", "SZSS3"]
    with 游标类.游标创建("查询", 工业片区要素, 操作字段) as 游标:
        for 数据字典x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
            if 数据字典x["PTSS2"] not in ["", None] and "PTSS2" in 删除字段名称列表:
                删除字段名称列表.remove("PTSS2")
            if 数据字典x["PTSS3"] not in ["", None] and "PTSS3" in 删除字段名称列表:
                删除字段名称列表.remove("PTSS3")
            if 数据字典x["JTSS2"] not in ["", None] and "JTSS2" in 删除字段名称列表:
                删除字段名称列表.remove("JTSS2")
            if 数据字典x["JTSS3"] not in ["", None] and "JTSS3" in 删除字段名称列表:
                删除字段名称列表.remove("JTSS3")
            if 数据字典x["SZSS2"] not in ["", None] and "SZSS2" in 删除字段名称列表:
                删除字段名称列表.remove("SZSS2")
            if 数据字典x["SZSS3"] not in ["", None] and "SZSS3" in 删除字段名称列表:
                删除字段名称列表.remove("SZSS3")
    要素类.字段删除(工业片区要素, 删除字段名称列表)

    数据库 = 基本信息.项目信息.工作空间
    if "XG" not in 数据库类.属性获取_要素数据集名称列表(数据库):
        要素数据集 = 要素数据集类.要素数据集创建("XG")
    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(工业片区要素, "XG" + "/" + 输出要素名称)
    return 输出要素


if __name__ == "__main__":
    工作空间 = r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb"
    # 工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    with 环境管理器类.环境管理器类创建(工作空间):
        入库_工业片区(工业片区要素名称="JX_工业片区范围线", 单元名称=基本信息.项目信息.单元名称)
