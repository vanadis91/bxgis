# -*- coding: utf-8 -*-

# import arcpy
# from sys import argv
# import bxarcpy
from bxpy.日志包 import 日志类
import bxarcpy.工具包 as 工具包
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.几何包 import 几何类
from bxarcpy.环境包 import 环境管理器类


def 道路边线生成(
    道路中线要素路径="DL_道路中线",
    用地要素名称="DIST_用地规划图",
    规划范围线要素名称="JX_规划范围线",
    输出要素路径="内存临时",
):
    if 输出要素路径 == "内存临时":
        输出要素路径 = "in_memory\\AA_道路边线" + "_" + 工具包.生成短GUID()
    道路中线要素路径_复制后 = 要素类.要素创建_通过复制(道路中线要素路径)
    要素类.字段添加(道路中线要素路径_复制后, "道路半宽", "单精度")
    要素类.字段计算(道路中线要素路径_复制后, "道路半宽", "float(!道路宽度!)*0.7")
    # 道路中线要素.要素创建_通过复制并重命名重名要素(道路中线要素名称)
    道路中线缓冲要素 = 要素类.要素创建_通过缓冲(道路中线要素路径_复制后, "道路半宽", 融合类型="融合按字段", 融合字段名称列表=["道路等级", "道路名称"], 末端类型="方形")
    要素类.字段删除(道路中线要素路径_复制后, ["道路半宽"])
    要素类.字段删除(道路中线缓冲要素, ["道路半宽"])
    要素类.字段添加(道路中线缓冲要素, "道路等级映射", "双精度")
    操作字段名称列表 = ["_ID", "_形状", "道路等级", "道路名称", "道路等级映射"]
    with 游标类.游标创建("更新", 道路中线缓冲要素, 操作字段名称列表) as 游标:
        for x in 游标类.属性获取_数据_字典形式(游标, 操作字段名称列表):
            if x["道路等级"] == "城市次干路":
                x["道路等级映射"] = 3.0
            elif x["道路等级"] == "城市快速路":
                x["道路等级映射"] = 1.0
            elif x["道路等级"] == "城市支路":
                x["道路等级映射"] = 4.0
            elif x["道路等级"] in ["普通城市主干路", "城市主干路"]:
                x["道路等级映射"] = 2.5
            elif x["道路等级"] == "一级城市主干路":
                x["道路等级映射"] = 2.0
            elif x["道路等级"] == "高速公路":
                x["道路等级映射"] = 0.5
            else:
                # bxarcpy.环境.输出消息(f'{x["道路名称"]}的等级为{x["道路等级"]}，该等级没有对应的映射数字')
                raise Exception(f'{x["道路名称"]}的等级为{x["道路等级"]}，该等级没有对应的映射数字')

    道路中线缓冲要素 = 要素类.要素创建_通过排序(道路中线缓冲要素, [["道路等级映射", "倒序"]])
    要素类.字段删除(道路中线缓冲要素, ["道路等级映射"])
    操作字段名称列表 = ["_ID", "_形状", "道路等级", "道路名称"]
    with 游标类.游标创建("更新", 道路中线缓冲要素, 操作字段名称列表) as 游标1:
        with 游标类.游标创建("查询", 道路中线缓冲要素, 操作字段名称列表) as 游标2:
            # 游标1运行次数 = 0
            for x in 游标类.属性获取_数据_字典形式(游标1, 操作字段名称列表):
                # 游标1运行次数 += 1
                # 游标2运行次数 = 0
                # if x["道路等级"] == "高速公路":
                #     游标1.行删除()
                #     break
                for y in 游标类.属性获取_数据_字典形式(游标2, 操作字段名称列表):
                    # 游标2运行次数 += 1
                    # print(f"游标1次数{游标1运行次数}，游标2次数{游标2运行次数}")
                    # print(f"x：{x}")
                    # print(f"y：{y}")
                    if x["_ID"] != y["_ID"] and 几何类.集合_交集(x["_形状"], y["_形状"]):
                        # print(f'ID{x["OID@"]}和ID{y["OID@"]}有交集')
                        x["_形状"] = 几何类.集合_差集(x["_形状"], y["_形状"])
                        游标类.行更新_字典形式(游标1, x)
                游标类.重置(游标2)
    # with bxarcpy.游标类.游标创建_通过名称("查询", 道路中线缓冲要素.名称, 需操作的字段名称列表1) as 游标1:
    #     for x in 游标1:
    #     with bxarcpy.游标类.游标创建_通过名称("插入", 道路边线要素.名称, 需操作的字段名称列表2) as 游标2:
    #         for y in 游标2:

    # 道路边线要素.要素创建_通过复制并重命名重名要素(输出要素名称)
    地块要素_复制后 = 要素类.要素创建_通过复制(用地要素名称)

    道路边线要素 = 要素类.要素创建_通过筛选(地块要素_复制后, "地类编号 LIKE '1207%' AND 地类编号 NOT LIKE '%v'")
    道路边线要素 = 要素类.要素创建_通过融合(道路边线要素, ["地类编号"])
    道路边线要素 = 要素类.要素创建_通过几何修复(道路边线要素)
    道路边线要素 = 要素类.要素创建_通过转线(道路边线要素)
    if 日志类.属性获取_当前函数内日志开启状态():
        要素类.要素创建_通过复制并重命名重名要素(道路边线要素, "AA_生成了道路边线")
        日志类.输出调试并暂停(f"生成了道路边线")
    # 道路边线要素.要素创建_通过复制并重命名重名要素("AA_A道路边线没分割前")
    带有属性的道路边线要素 = 要素类.要素创建_通过相交_原始([道路边线要素, 道路中线缓冲要素])
    带有属性的道路边线要素 = 要素类.要素创建_通过多部件至单部件(带有属性的道路边线要素)
    带有属性的道路边线要素 = 要素类.要素创建_通过几何修复(带有属性的道路边线要素)
    # 带有属性的道路边线要素.要素创建_通过复制并重命名重名要素("AA_A带有属性的那些")
    还没有属性的道路边线要素 = 要素类.要素创建_通过擦除_原始(道路边线要素, 道路中线缓冲要素)
    还没有属性的道路边线要素 = 要素类.要素创建_通过多部件至单部件(还没有属性的道路边线要素)
    还没有属性的道路边线要素 = 要素类.要素创建_通过几何修复(还没有属性的道路边线要素)
    要素类.字段添加(还没有属性的道路边线要素, "道路等级")
    要素类.字段添加(还没有属性的道路边线要素, "道路名称")
    # 还没有属性的道路边线要素.要素创建_通过复制并重命名重名要素("AA_A没有属性的那些")
    操作字段名称列表 = ["_形状", "道路等级", "道路名称"]
    with 游标类.游标创建("更新", 还没有属性的道路边线要素, 操作字段名称列表) as 游标1:
        with 游标类.游标创建("查询", 带有属性的道路边线要素, 操作字段名称列表) as 游标2:
            for x in 游标类.属性获取_数据_字典形式(游标1, 操作字段名称列表):
                for y in 游标类.属性获取_数据_字典形式(游标2, 操作字段名称列表):
                    if 几何类.集合_交集(x["_形状"], y["_形状"], 类型="点"):
                        x["道路等级"] = y["道路等级"]
                        x["道路名称"] = y["道路名称"]
                        游标类.行更新_字典形式(游标1, x)
                游标类.重置(游标2)

    合并后要素 = 要素类.要素创建_通过合并([带有属性的道路边线要素, 还没有属性的道路边线要素])

    范围要素 = 规划范围线要素名称

    范围转线后要素 = 要素类.要素创建_通过转线(范围要素)
    合并后要素 = 要素类.要素创建_通过擦除_原始(合并后要素, 范围转线后要素)

    合并后要素 = 要素类.要素创建_通过融合(合并后要素, ["道路名称", "道路等级"])
    要素类.字段删除(合并后要素, 保留字段名称列表=["道路名称", "道路等级"])
    # 修正道路边线

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(合并后要素, 输出要素路径)
    return 输出要素


if __name__ == "__main__":
    日志类.开启()
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    # 道路中线要素名称 = bxarcpy.环境.输入参数获取_以字符串形式(0, "DL_道路中线", True)
    with 环境管理器类.环境管理器类创建(工作空间):
        道路边线生成("DL_道路中线", "DIST_用地规划图", "JX_规划范围线", "DL_道路边线")
