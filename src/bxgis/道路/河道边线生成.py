# -*- coding: utf-8 -*-

# import arcpy
# from sys import argv
import bxarcpy.工具包 as 工具包
from bxpy.日志包 import 日志类
from bxpy.进度条包 import 进度条类
from bxarcpy.环境包 import 环境管理器类
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxarcpy.几何包 import 几何类
from typing import Union, Literal, Any


def 河道边线生成(河道中线要素名称="DL_河道中线", 用地要素名称="DIST_用地规划图", 河道用地修正要素名称: Union[str, None] = "DL_河道用地修正", 规划范围线要素名称="JX_规划范围线", 修正要素路径=None, 输出要素名称="内存临时"):
    # 日志类.临时开启日志()
    if 输出要素名称 == "内存临时":
        输出要素名称 = "in_memory\\AA_河道边线" + "_" + 工具包.生成短GUID()
    河道中线 = 要素类.要素创建_通过复制(河道中线要素名称)
    要素类.字段添加(河道中线, "河道半宽", "单精度")
    with 游标类.游标创建("更新", 河道中线, ["河道宽度", "河道半宽"]) as 游标_河道中线:
        for x in 游标类.属性获取_数据_字典形式(游标_河道中线, ["河道宽度", "河道半宽"]):
            河道宽度 = x["河道宽度"].split("-")[-1]
            x["河道半宽"] = float(河道宽度) * 0.7
            游标类.行更新_字典形式(游标_河道中线, x)

    河道中线缓冲 = 要素类.要素创建_通过缓冲(河道中线, "河道半宽", 融合类型="融合按字段", 融合字段名称列表=["河道名称"], 末端类型="方形")
    要素类.字段删除(河道中线缓冲, ["河道半宽"])

    操作字段 = ["_ID", "_形状", "河道名称"]
    with 游标类.游标创建("更新", 河道中线缓冲, 操作字段) as 游标1:
        with 游标类.游标创建("查询", 河道中线缓冲, 操作字段) as 游标2:
            for x in 游标类.属性获取_数据_字典形式(游标1, 操作字段):
                for y in 游标类.属性获取_数据_字典形式(游标2, 操作字段):
                    if x["_ID"] != y["_ID"] and 几何类.集合_交集(x["_形状"], y["_形状"]):
                        x["_形状"] = 几何类.集合_差集(x["_形状"], y["_形状"])
                        游标类.行更新_字典形式(游标1, x)
                游标类.重置(游标2)

    地块要素 = 要素类.要素创建_通过复制(用地要素名称)

    if 河道用地修正要素名称:
        河道用地 = 要素类.要素创建_通过复制(河道用地修正要素名称)
    else:
        河道用地 = 要素类.要素创建_通过筛选(地块要素, "地类编号 LIKE '1701%'")
        要素类.字段计算(河道用地, "地类编号", "'1701'")

        在河道色块外中线 = 要素类.要素创建_通过擦除_原始(河道中线, 河道用地)
        要素类.字段添加(在河道色块外中线, "河道半宽", "单精度")
        with 游标类.游标创建("更新", 在河道色块外中线, ["河道宽度", "河道半宽"]) as 游标_河道中线:
            for x in 游标类.属性获取_数据_字典形式(游标_河道中线, ["河道宽度", "河道半宽"]):
                河道宽度 = x["河道宽度"].split("-")[-1]
                x["河道半宽"] = float(河道宽度) * 0.7
                游标类.行更新_字典形式(游标_河道中线, x)
        在河道色块外中线缓冲 = 要素类.要素创建_通过缓冲(在河道色块外中线, "河道半宽", 融合类型="融合按字段", 融合字段名称列表=["河道名称"], 末端类型="圆形")
        要素类.字段添加(在河道色块外中线缓冲, "地类编号")
        要素类.字段计算(在河道色块外中线缓冲, "地类编号", "'1701bf'")
        在河道色块外中线缓冲 = 要素类.要素创建_通过裁剪(在河道色块外中线缓冲, 规划范围线要素名称)

        河道用地 = 要素类.要素创建_通过更新(在河道色块外中线缓冲, 河道用地)
        河道用地 = 要素类.要素创建_通过融合(河道用地, ["地类编号"])
        河道用地 = 要素类.要素创建_通过几何修复(河道用地)
        要素类.要素创建_通过复制并重命名重名要素(河道用地, "DL_河道用地修正")

    要素类.字段计算(河道用地, "地类编号", "'1701'")
    河道用地 = 要素类.要素创建_通过融合(河道用地, ["地类编号"])
    河道边线 = 要素类.要素创建_通过转线(河道用地)

    带有属性的河道边线要素 = 要素类.要素创建_通过相交_原始([河道边线, 河道中线缓冲])
    带有属性的河道边线要素 = 要素类.要素创建_通过多部件至单部件(带有属性的河道边线要素)
    带有属性的河道边线要素 = 要素类.要素创建_通过几何修复(带有属性的河道边线要素)

    还没有属性的河道边线要素 = 要素类.要素创建_通过擦除_原始(河道边线, 河道中线缓冲)
    还没有属性的河道边线要素 = 要素类.要素创建_通过多部件至单部件(还没有属性的河道边线要素)
    还没有属性的河道边线要素 = 要素类.要素创建_通过几何修复(还没有属性的河道边线要素)

    要素类.字段添加(还没有属性的河道边线要素, "河道名称")

    with 游标类.游标创建("更新", 还没有属性的河道边线要素, ["_形状", "河道名称"]) as 游标1:
        with 游标类.游标创建("查询", 带有属性的河道边线要素, ["_形状", "河道名称"]) as 游标2:
            for x in 游标类.属性获取_数据_字典形式(游标1, ["_形状", "河道名称"]):
                for y in 游标类.属性获取_数据_字典形式(游标2, ["_形状", "河道名称"]):
                    if 几何类.集合_交集(x["_形状"], y["_形状"], 类型="点"):
                        x["河道名称"] = y["河道名称"]
                        游标类.行更新_字典形式(游标1, x)
                游标类.重置(游标2)

    合并后要素 = 要素类.要素创建_通过合并([带有属性的河道边线要素, 还没有属性的河道边线要素])

    if 修正要素路径:
        修正要素 = 要素类.要素创建_通过复制(修正要素路径)
        合并后要素 = 要素类.要素创建_通过联合并赋值字段(合并后要素, 修正要素, [["河道名称", "河道名称"]], 是否去除输入无联合有的部分=True, 是否检查两者差异=False, 是否删除字段的既有值=False)

    范围 = 要素类.要素创建_通过复制(规划范围线要素名称)
    范围转线 = 要素类.要素创建_通过转线(范围)
    合并后要素 = 要素类.要素创建_通过擦除_原始(合并后要素, 范围转线)

    合并后要素 = 要素类.要素创建_通过融合(合并后要素, ["河道名称"])
    要素类.字段删除(合并后要素, 保留字段名称列表=["河道名称"])

    输出要素 = 要素类.要素创建_通过复制并重命名重名要素(合并后要素, 输出要素名称)
    return 输出要素


if __name__ == "__main__":
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    # 河道中线要素名称 = bxarcpy.环境.输入参数获取_以字符串形式(0, "DL_河道中线", True)
    with 环境管理器类.环境管理器类创建(工作空间):
        河道边线生成(河道中线要素名称="DL_河道中线", 用地要素名称="DIST_用地规划图", 河道用地修正要素名称="DL_河道用地修正", 规划范围线要素名称="JX_规划范围线", 修正要素路径=None, 输出要素名称="DL_河道边线")
