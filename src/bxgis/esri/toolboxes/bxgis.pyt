# -*- coding: utf-8 -*-


def 初始化_添加搜索路径():
    import os
    import sys

    该文件的目录 = os.path.dirname(__file__)
    if 该文件的目录.split("\\")[-1] == "bxgis":
        当前工作路径 = os.getcwd()
        os.chdir(该文件的目录)
        项目src目录 = os.path.abspath("..\\")
        os.chdir(当前工作路径)
        if 项目src目录 not in sys.path:
            sys.path.append(项目src目录)
    elif 该文件的目录.split("\\")[-1] == "toolboxes":
        当前工作路径 = os.getcwd()
        os.chdir(该文件的目录)
        项目src目录 = os.path.abspath("..\\..\\..\\")
        os.chdir(当前工作路径)
        if 项目src目录 not in sys.path:
            sys.path.append(项目src目录)
    else:
        raise ValueError("添加搜索路径失败。")
    from bxgis import 配置

    if 配置.计算机信息.环境 == "开发环境" and 项目src目录 + "\\bxgis\\common" not in sys.path:
        sys.path.append(项目src目录 + "\\bxgis\\common")


def 初始化_重置模块(模块=None):
    from bxgis import 配置

    if 模块 and 配置.计算机信息.环境 == "开发环境":
        import importlib

        importlib.reload(模块)


def 参数组字典生成_转换值(参数列表):
    import bxarcpy

    参数名称列表 = [bxarcpy.参数类.名称读取(x) for x in 参数列表]
    参数字典 = {k: v for k, v in zip(参数名称列表, 参数列表)}
    参数字典temp = {}

    def 根据类型取值(参数对象):
        if type(bxarcpy.参数类.值读取(参数对象)) in [int, float, str, bool]:
            ret = bxarcpy.参数类.值读取(参数对象)
        elif type(bxarcpy.参数类.值读取(参数对象)) is list:
            ret = [根据类型取值(x) for x in 参数对象]
        else:
            ret = bxarcpy.参数类.值读取_作为字符串(参数对象)
        return ret

    for k, v in 参数字典.items():
        参数字典temp[k] = 根据类型取值(v)
    return 参数字典temp


def 参数组字典生成(参数列表):
    import bxarcpy

    参数名称列表 = [bxarcpy.参数类.名称读取(x) for x in 参数列表]
    参数字典 = {k: v for k, v in zip(参数名称列表, 参数列表)}
    return 参数字典


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file) 定义了工具箱的属性"""
        self.label = "BXGIS工具箱"  # 定义标签
        self.alias = "BXGIS工具箱"  # 定义别名
        # self.category可以把工具组织成不同工具集
        # List of tool classes associated with this toolbox 定义了包含的所有工具名称列表
        self.tools = [
            ExportToCAD,
            ImportFromCAD,
            ConvertCurveToPolyline,
            LanduseUpdate,
            LanduseCheckIsFarmlandOccupied,
            LanduseOfPlannedGeneration,
            LanduseOfCurrentGeneration,
            BaseperiodLandtypeConversion,
            BaseperiodFieldsTranslateAndGenerateSubitems,
            RoadEdgeGeneration,
            RiverEdgeGeneration,
            RegionUpdate,
            ZoneuseOfPlannedGeneration,
            DbCreateControlline,
            DbCreateControllineOfVillage,
            DbCreateRegion,
            DbCreateRegionOfUnit,
            DbCreateRegionOfIndustrial,
            DbCreateLanduseOfPlanned,
            DbCreateFacilities,
            DbCreateZoneuse,
        ]


class ExportToCAD(object):
    # "导出到CAD"
    def __init__(self):
        self.label = "导出到CAD"
        self.description = ""
        self.canRunInBackground = False
        self.category = "常用"

    def getParameterInfo(self):
        初始化_添加搜索路径()
        from bxgis import 配置
        import bxarcpy

        输入要素 = bxarcpy.参数类.参数创建("输入要素", "要素类", 参数必要性="必填")._内嵌对象

        是否将要素按范围裁剪 = bxarcpy.参数类.参数创建("是否将要素按范围裁剪", "布尔值", 默认值=False)._内嵌对象

        规划范围线要素名称 = bxarcpy.参数类.参数创建("规划范围线要素名称", "要素类", 默认值=配置.项目信息.JX_规划范围线要素名称, 是否可用=False)._内嵌对象

        是否对要素进行融合 = bxarcpy.参数类.参数创建("是否对要素进行融合", "布尔值", 默认值=False)._内嵌对象

        需融合地类编号列表 = bxarcpy.参数类.参数创建("需融合地类编号列表", "字符串", 是否多个值=True, 是否可用=False, 默认值=["1207"])._内嵌对象

        是否对要素进行切分 = bxarcpy.参数类.参数创建("是否对要素进行切分", "布尔值", 默认值=False)._内嵌对象

        切分时折点数量阈值 = bxarcpy.参数类.参数创建("切分时折点数量阈值", "长整型", 是否可用=False, 默认值=15000)._内嵌对象

        切分时孔洞数量阈值 = bxarcpy.参数类.参数创建("切分时孔洞数量阈值", "长整型", 是否可用=False, 默认值=3)._内嵌对象

        切分时面积阈值 = bxarcpy.参数类.参数创建("切分时面积阈值", "双精度", 是否可用=False, 默认值=500000)._内嵌对象

        切分时地类编号限制列表 = bxarcpy.参数类.参数创建("切分时地类编号限制列表", "字符串", 是否多个值=True, 是否可用=False, 默认值=["1207"])._内嵌对象

        是否去孔 = bxarcpy.参数类.参数创建("是否去孔", "布尔值", 默认值=False)._内嵌对象

        输出CAD路径 = bxarcpy.参数类.参数创建("输出CAD路径", "CAD数据集", 参数类型="输出参数")._内嵌对象

        return [输入要素, 是否将要素按范围裁剪, 规划范围线要素名称, 是否对要素进行融合, 需融合地类编号列表, 是否对要素进行切分, 切分时折点数量阈值, 切分时孔洞数量阈值, 切分时面积阈值, 切分时地类编号限制列表, 是否去孔, 输出CAD路径]

    def updateParameters(self, 参数列表):
        初始化_添加搜索路径()
        import bxarcpy

        参数字典 = 参数组字典生成(参数列表)
        if bxarcpy.参数类.值读取(参数字典["是否将要素按范围裁剪"]):
            bxarcpy.参数类.可用性设置(参数字典["规划范围线要素名称"], True)
        else:
            bxarcpy.参数类.可用性设置(参数字典["规划范围线要素名称"], False)

        if bxarcpy.参数类.值读取(参数字典["是否对要素进行融合"]):
            bxarcpy.参数类.可用性设置(参数字典["需融合地类编号列表"], True)
        else:
            bxarcpy.参数类.可用性设置(参数字典["需融合地类编号列表"], False)

        if bxarcpy.参数类.值读取(参数字典["是否对要素进行切分"]):
            bxarcpy.参数类.可用性设置(参数字典["切分时折点数量阈值"], True)
            bxarcpy.参数类.可用性设置(参数字典["切分时孔洞数量阈值"], True)
            bxarcpy.参数类.可用性设置(参数字典["切分时面积阈值"], True)
            bxarcpy.参数类.可用性设置(参数字典["切分时地类编号限制列表"], True)
        else:
            bxarcpy.参数类.可用性设置(参数字典["切分时折点数量阈值"], False)
            bxarcpy.参数类.可用性设置(参数字典["切分时孔洞数量阈值"], False)
            bxarcpy.参数类.可用性设置(参数字典["切分时面积阈值"], False)
            bxarcpy.参数类.可用性设置(参数字典["切分时地类编号限制列表"], False)

        if str(bxarcpy.参数类.值读取(参数字典["输出CAD路径"]))[-4:] != ".dwg":
            bxarcpy.参数类.值设置(参数字典["输出CAD路径"], str(bxarcpy.参数类.值读取(参数字典["输出CAD路径"])) + ".dwg")
        return None

    def execute(self, 参数列表, 消息):
        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        # 日志.输出控制台(参数字典)
        规划范围线要素名称 = 参数字典["规划范围线要素名称"] if 参数字典["是否将要素按范围裁剪"] else None
        需融合地类编号列表 = 参数字典["需融合地类编号列表"] if 参数字典["是否对要素进行融合"] else None
        切分阈值 = {"折点数量": 参数字典["切分时折点数量阈值"], "孔洞数量": 参数字典["切分时孔洞数量阈值"], "面积": 参数字典["切分时面积阈值"], "地类编号列表": 参数字典["切分时地类编号限制列表"]} if 参数字典["是否对要素进行切分"] else None
        import bxgis

        bxgis.常用.导出到CAD.导出到CAD(
            输入要素名称=参数字典["输入要素"],
            规划范围线要素名称=规划范围线要素名称,
            需融合地类编号列表=需融合地类编号列表,
            切分阈值=切分阈值,
            是否去孔=参数字典["是否去孔"],
            输出CAD路径=参数字典["输出CAD路径"],
        )
        return None


class ImportFromCAD(object):
    # "导入从CAD"
    def __init__(self):
        self.label = "导入从CAD"
        self.description = ""
        self.canRunInBackground = False
        self.category = "常用"

    def getParameterInfo(self):
        import bxarcpy

        输入CAD数据集中的要素类 = bxarcpy.参数类.参数创建("输入CAD数据集中的要素类", "要素类", 参数必要性="必填")._内嵌对象

        是否拓扑检查 = bxarcpy.参数类.参数创建("是否拓扑检查", "布尔值", 默认值=False)._内嵌对象

        是否范围检查 = bxarcpy.参数类.参数创建("是否范围检查", "布尔值", 默认值=False)._内嵌对象

        是否转曲 = bxarcpy.参数类.参数创建("是否转曲", "布尔值", 默认值=False)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="YD_CAD色块")._内嵌对象

        return [输入CAD数据集中的要素类, 是否拓扑检查, 是否范围检查, 是否转曲, 输出要素名称]

    def execute(self, 参数列表, 消息):
        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        import importlib
        import bxgis

        importlib.reload(bxgis.常用.导入从CAD)
        bxgis.常用.导入从CAD.导入从CAD(
            输入CAD数据集中的要素类=参数字典["输入CAD数据集中的要素类"],
            是否拓扑检查=参数字典["是否拓扑检查"],
            是否范围检查=参数字典["是否范围检查"],
            是否转曲=参数字典["是否转曲"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class ConvertCurveToPolyline(object):
    # "曲转折"
    def __init__(self):
        self.label = "曲转折"
        self.description = ""
        self.canRunInBackground = False
        self.category = "常用"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称列表 = bxarcpy.参数类.参数创建("输入要素名称列表", "要素类", 参数必要性="必填", 是否多个值=True)._内嵌对象

        return [输入要素名称列表]

    def execute(self, 参数列表, 消息):
        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        import importlib
        import bxgis

        importlib.reload(bxgis.常用.曲转折)
        bxgis.常用.曲转折.曲转折(输入要素名称列表=参数字典["输入要素名称列表"])
        return None


class BaseperiodLandtypeConversion(object):
    # "初步基数转换"
    def __init__(self):
        self.label = "初步基数转换"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地\\基期"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称 = bxarcpy.参数类.参数创建("输入要素名称", "要素类", 参数必要性="必填", 默认值="CZ_三调_原始")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象
        return [输入要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.用地.基期.初步基数转换.初步基数转换(输入要素名称=参数字典["输入要素名称"], 输出要素名称=参数字典["输出要素名称"])
        return None


class BaseperiodFieldsTranslateAndGenerateSubitems(object):
    # "字段处理并生成分项"
    def __init__(self):
        self.label = "字段处理并生成分项"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地\\基期"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称 = bxarcpy.参数类.参数创建("输入要素名称", "要素类", 参数必要性="必填", 默认值="YD_三调")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象
        return [输入要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.用地.基期.字段处理并生成分项.字段处理并生成分项(输入要素名称=参数字典["输入要素名称"], 输出要素名称=参数字典["输出要素名称"])
        return None


class LanduseOfPlannedGeneration(object):
    # "用地规划图生成"
    def __init__(self):
        self.label = "用地规划图生成"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地"

    def getParameterInfo(self):
        from bxgis import 配置
        import bxarcpy

        输入要素名称列表 = bxarcpy.参数类.参数创建(名称="输入要素名称列表", 数据类型="要素类", 参数必要性="必填", 是否多个值=True)._内嵌对象

        规划范围线要素名称 = bxarcpy.参数类.参数创建(名称="规划范围线要素名称", 数据类型="要素类", 默认值=配置.项目信息.JX_规划范围线要素名称)._内嵌对象

        是否将CAD合并入GIS = bxarcpy.参数类.参数创建(名称="是否将CAD合并入GIS", 数据类型="布尔值", 默认值=False)._内嵌对象
        CAD导出色块要素名称 = bxarcpy.参数类.参数创建(名称="CAD导出色块要素名称", 数据类型="要素类", 默认值="YD_CAD色块", 是否可用=False)._内嵌对象
        CAD导出色块中空隙的地类 = bxarcpy.参数类.参数创建("CAD导出色块中空隙的地类", 数据类型="字符串", 默认值="00", 是否可用=False)._内嵌对象
        CAD导出色块中有效的地类列表 = bxarcpy.参数类.参数创建(名称="CAD导出色块中有效的地类列表", 数据类型="字符串", 默认值=["07%", "08%", "09%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "1701%", "1702%", "1703%", "23%"], 是否多个值=True, 是否可用=False)._内嵌对象
        CAD导出色块以外地类调整要素名称 = bxarcpy.参数类.参数创建(名称="CAD导出色块以外地类调整要素名称", 数据类型="要素类", 默认值="YD_CAD色块以外建设用地修改", 是否可用=False)._内嵌对象

        是否处理细小面 = bxarcpy.参数类.参数创建(名称="是否处理细小面", 数据类型="布尔值", 默认值=False)._内嵌对象
        GIS中已处理的细小面要素名称 = bxarcpy.参数类.参数创建(名称="GIS中已处理的细小面要素名称", 数据类型="要素类", 是否可用=False, 默认值="YD_已处理的细小面")._内嵌对象
        细小面面积阈值 = bxarcpy.参数类.参数创建(名称="细小面面积阈值", 数据类型="字符串", 是否可用=False, 默认值="10")._内嵌对象

        是否拓扑检查 = bxarcpy.参数类.参数创建(名称="是否拓扑检查", 数据类型="布尔值", 默认值=False)._内嵌对象
        是否范围检查 = bxarcpy.参数类.参数创建(名称="是否范围检查", 数据类型="布尔值", 默认值=False)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建(名称="输出要素名称", 数据类型="要素类", 参数类型="输出参数", 默认值="DIST_用地规划图")._内嵌对象

        return [输入要素名称列表, 规划范围线要素名称, 是否将CAD合并入GIS, CAD导出色块要素名称, CAD导出色块以外地类调整要素名称, CAD导出色块中空隙的地类, CAD导出色块中有效的地类列表, 是否处理细小面, GIS中已处理的细小面要素名称, 细小面面积阈值, 是否拓扑检查, 是否范围检查, 输出要素名称]

    def updateParameters(self, 参数列表):
        import bxarcpy

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成(参数列表)
        if bxarcpy.参数类.值读取(参数字典["是否处理细小面"]):
            bxarcpy.参数类.可用性设置(参数字典["GIS中已处理的细小面要素名称"], True)
            bxarcpy.参数类.可用性设置(参数字典["细小面面积阈值"], True)
        else:
            bxarcpy.参数类.可用性设置(参数字典["GIS中已处理的细小面要素名称"], False)
            bxarcpy.参数类.可用性设置(参数字典["细小面面积阈值"], False)
        if bxarcpy.参数类.值读取(参数字典["是否将CAD合并入GIS"]):
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块要素名称"], True)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块以外地类调整要素名称"], True)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块中空隙的地类"], True)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块中有效的地类列表"], True)
        else:
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块要素名称"], False)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块以外地类调整要素名称"], False)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块中空隙的地类"], False)
            bxarcpy.参数类.可用性设置(参数字典["CAD导出色块中有效的地类列表"], False)

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)

        bxgis.用地.用地规划图生成.用地规划图生成(
            输入要素名称列表=参数字典["输入要素名称列表"],
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            是否将CAD合并入GIS=参数字典["是否将CAD合并入GIS"],
            CAD导出色块要素名称=参数字典["CAD导出色块要素名称"],
            CAD导出色块以外地类调整要素名称=参数字典["CAD导出色块以外地类调整要素名称"],
            CAD导出色块中空隙的地类=参数字典["CAD导出色块中空隙的地类"],
            CAD导出色块中有效的地类列表=参数字典["CAD导出色块中有效的地类列表"],
            是否处理细小面=参数字典["是否处理细小面"],
            GIS中已处理的细小面要素名称=参数字典["GIS中已处理的细小面要素名称"],
            是否拓扑检查=参数字典["是否拓扑检查"],
            是否范围检查=参数字典["是否范围检查"],
            细小面面积阈值=参数字典["细小面面积阈值"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class LanduseOfCurrentGeneration(object):
    # "用地现状图生成"
    def __init__(self):
        self.label = "用地现状图生成"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地"

    def getParameterInfo(self):
        import bxarcpy
        from bxgis import 配置

        输入要素名称列表 = bxarcpy.参数类.参数创建(名称="输入要素名称列表", 数据类型="要素类", 参数必要性="必填", 是否多个值=True)._内嵌对象

        规划范围线要素名称 = bxarcpy.参数类.参数创建(名称="规划范围线要素名称", 数据类型="要素类", 默认值=配置.项目信息.JX_规划范围线要素名称)._内嵌对象

        是否拓扑检查 = bxarcpy.参数类.参数创建(名称="是否拓扑检查", 数据类型="布尔值", 默认值=False)._内嵌对象
        是否范围检查 = bxarcpy.参数类.参数创建(名称="是否范围检查", 数据类型="布尔值", 默认值=False)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建(名称="输出要素名称", 数据类型="要素类", 参数类型="输出参数", 默认值="DIST_用地规划图")._内嵌对象

        return [输入要素名称列表, 规划范围线要素名称, 是否拓扑检查, 是否范围检查, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)

        bxgis.用地.用地现状图生成.用地现状图生成(
            输入要素名称列表=参数字典["输入要素名称列表"],
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            是否拓扑检查=参数字典["是否拓扑检查"],
            是否范围检查=参数字典["是否范围检查"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class LanduseUpdate(object):
    # 用地更新
    def __init__(self):
        self.label = "用地更新"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称 = bxarcpy.参数类.参数创建("输入要素名称", "要素类", 参数必要性="必填", 默认值="DIST_用地规划图")._内嵌对象
        街坊范围线要素名称 = bxarcpy.参数类.参数创建("街坊范围线要素名称", "要素类", 默认值="JX_街坊范围线")._内嵌对象
        分村范围线要素名称 = bxarcpy.参数类.参数创建("分村范围线要素名称", "要素类", 默认值="JX_分村范围线")._内嵌对象
        城镇集建区要素名称 = bxarcpy.参数类.参数创建("城镇集建区要素名称", "要素类", 默认值="KZX_城镇集建区")._内嵌对象
        城镇弹性区要素名称 = bxarcpy.参数类.参数创建("城镇弹性区要素名称", "要素类", 默认值="KZX_城镇弹性区")._内嵌对象
        有扣除地类系数的要素名称 = bxarcpy.参数类.参数创建("有扣除地类系数的要素名称", "要素类", 默认值="CZ_三调筛选_扣除地类系数")._内嵌对象
        有坐落单位信息的要素名称 = bxarcpy.参数类.参数创建("有坐落单位信息的要素名称", "要素类", 默认值="CZ_三调筛选_坐落单位名称")._内嵌对象
        设施要素名称 = bxarcpy.参数类.参数创建("设施要素名称", "要素类", 默认值="SS_配套设施")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象

        return [输入要素名称, 街坊范围线要素名称, 分村范围线要素名称, 城镇集建区要素名称, 城镇弹性区要素名称, 有扣除地类系数的要素名称, 有坐落单位信息的要素名称, 设施要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.用地.用地更新.用地更新(
            输入要素名称=参数字典["输入要素名称"],
            街坊范围线要素名称=参数字典["街坊范围线要素名称"],
            分村范围线要素名称=参数字典["分村范围线要素名称"],
            城镇集建区要素名称=参数字典["城镇集建区要素名称"],
            城镇弹性区要素名称=参数字典["城镇弹性区要素名称"],
            有扣除地类系数的要素名称=参数字典["有扣除地类系数的要素名称"],
            有坐落单位信息的要素名称=参数字典["有坐落单位信息的要素名称"],
            设施要素名称=参数字典["设施要素名称"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class LanduseCheckIsFarmlandOccupied(object):
    # 基本农田是否被占
    def __init__(self):
        self.label = "基本农田是否被占"
        self.description = ""
        self.canRunInBackground = False
        self.category = "用地\\检查"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称 = bxarcpy.参数类.参数创建("输入要素名称", "要素类", 参数必要性="必填", 默认值="DIST_用地规划图")._内嵌对象
        基本农田要素名称 = bxarcpy.参数类.参数创建("基本农田要素名称", "要素类", 默认值="KZX_永久基本农田")._内嵌对象
        是否输出到CAD = bxarcpy.参数类.参数创建("是否输出到CAD", "布尔值", 默认值=True)._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象

        return [输入要素名称, 基本农田要素名称, 是否输出到CAD, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)

        bxgis.用地.检查.基本农田是否被占.基本农田是否被占(
            输入要素名称=参数字典["输入要素名称"],
            基本农田要素名称=参数字典["基本农田要素名称"],
            是否输出到CAD=参数字典["是否输出到CAD"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class FacilitiesUpdate(object):
    # 设施更新
    def __init__(self):
        self.label = "设施更新"
        self.description = ""
        self.canRunInBackground = False
        self.category = "设施"

    def getParameterInfo(self):
        import bxarcpy

        输入要素名称 = bxarcpy.参数类.参数创建("输入要素名称", "要素类", 参数必要性="必填", 默认值="SS_配套设施")._内嵌对象
        是否根据坐标字段移动设施坐标 = bxarcpy.参数类.参数创建("是否根据坐标字段移动设施坐标", "布尔值", 默认值=True)._内嵌对象
        规划范围线要素名称 = bxarcpy.参数类.参数创建("规划范围线要素名称", "要素类", 默认值="JX_规划范围线")._内嵌对象
        工业片区范围线要素名称 = bxarcpy.参数类.参数创建("工业片区范围线要素名称", "要素类", 默认值="JX_工业片区范围线")._内嵌对象
        城镇集建区要素名称 = bxarcpy.参数类.参数创建("城镇集建区要素名称", "要素类", 默认值="KZX_城镇集建区")._内嵌对象
        城镇弹性区要素名称 = bxarcpy.参数类.参数创建("城镇弹性区要素名称", "要素类", 默认值="KZX_城镇弹性区")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象
        return [输入要素名称, 是否根据坐标字段移动设施坐标, 规划范围线要素名称, 工业片区范围线要素名称, 城镇集建区要素名称, 城镇弹性区要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.设施.设施更新.设施更新(
            输入要素名称=参数字典["输入要素名称"],
            是否根据坐标字段移动设施坐标=参数字典["是否根据坐标字段移动设施坐标"],
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            工业片区范围线要素名称=参数字典["工业片区范围线要素名称"],
            城镇集建区要素名称=参数字典["城镇集建区要素名称"],
            城镇弹性区要素名称=参数字典["KZX_城镇弹性区"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class RoadEdgeGeneration(object):
    # 道路边线生成
    def __init__(self):
        self.label = "道路边线生成"
        self.description = ""
        self.canRunInBackground = False
        self.category = "道路"

    def getParameterInfo(self):
        import bxarcpy

        道路中线要素名称 = bxarcpy.参数类.参数创建("道路中线要素名称", "要素类", 参数必要性="必填", 默认值="DL_道路中线")._内嵌对象
        用地要素名称 = bxarcpy.参数类.参数创建("用地要素名称", "要素类", 默认值="DIST_用地规划图")._内嵌对象
        规划范围线要素名称 = bxarcpy.参数类.参数创建("规划范围线要素名称", "要素类", 默认值="JX_规划范围线")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象

        return [道路中线要素名称, 用地要素名称, 规划范围线要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.道路.道路边线生成.道路边线生成(
            道路中线要素名称=参数字典["道路中线要素名称"],
            用地要素名称=参数字典["用地要素名称"],
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class RiverEdgeGeneration(object):
    # 河道边线生成
    def __init__(self):
        self.label = "河道边线生成"
        self.description = ""
        self.canRunInBackground = False
        self.category = "道路"

    def getParameterInfo(self):
        import bxarcpy

        河道中线要素名称 = bxarcpy.参数类.参数创建("河道中线要素名称", "要素类", 参数必要性="必填", 默认值="DL_河道中线")._内嵌对象
        用地要素名称 = bxarcpy.参数类.参数创建("用地要素名称", "要素类", 默认值="DIST_用地规划图")._内嵌对象
        规划范围线要素名称 = bxarcpy.参数类.参数创建("规划范围线要素名称", "要素类", 默认值="JX_规划范围线")._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象

        return [河道中线要素名称, 用地要素名称, 规划范围线要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.道路.河道边线生成.河道边线生成(
            河道中线要素名称=参数字典["河道中线要素名称"],
            用地要素名称=参数字典["用地要素名称"],
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class RegionUpdate(object):
    # 区域更新
    def __init__(self):
        self.label = "区域更新"
        self.description = ""
        self.canRunInBackground = False
        self.category = "区域"

    def getParameterInfo(self):
        import bxarcpy
        from bxgis import 配置

        区域要素名称 = bxarcpy.参数类.参数创建("区域要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.JX_街坊范围线要素名称)._内嵌对象
        用地要素名称 = bxarcpy.参数类.参数创建("用地要素名称", "要素类", 默认值=配置.项目信息.YD_用地_规划要素名称)._内嵌对象
        用地要素中所属区域字段名称 = bxarcpy.参数类.参数创建("用地要素中所属区域字段名称", "字符串", 默认值=配置.地块要素字段映射.所属街坊字段名称)._内嵌对象
        区域要素中编号字段名称 = bxarcpy.参数类.参数创建("区域要素中编号字段名称", "字符串", 默认值=配置.区域要素字段映射.区域编号字段名称)._内嵌对象
        永久基本农田要素名称 = bxarcpy.参数类.参数创建("永久基本农田要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_永久基本农田要素名称)._内嵌对象
        生态保护红线要素名称 = bxarcpy.参数类.参数创建("生态保护红线要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_生态保护红线要素名称)._内嵌对象
        村庄建设边界要素名称 = bxarcpy.参数类.参数创建("村庄建设边界要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_村庄建设边界要素名称)._内嵌对象
        设施要素名称 = bxarcpy.参数类.参数创建("设施要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.SS_配套设施_规划要素名称)._内嵌对象
        设施要素中所属区域字段名称 = bxarcpy.参数类.参数创建("设施要素中所属区域字段名称", "字符串", 默认值=配置.设施要素字段映射.所属工业片区字段名称)._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数")._内嵌对象

        return [区域要素名称, 用地要素名称, 用地要素中所属区域字段名称, 区域要素中编号字段名称, 永久基本农田要素名称, 生态保护红线要素名称, 村庄建设边界要素名称, 设施要素名称, 设施要素中所属区域字段名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.区域.区域更新.区域更新(
            区域要素名称=参数字典["区域要素名称"],
            用地要素名称=参数字典["用地要素名称"],
            用地要素中所属区域字段名称=参数字典["用地要素中所属区域字段名称"],
            区域要素中编号字段名称=参数字典["区域要素中编号字段名称"],
            永久基本农田要素名称=参数字典["永久基本农田要素名称"],
            生态保护红线要素名称=参数字典["生态保护红线要素名称"],
            村庄建设边界要素名称=参数字典["村庄建设边界要素名称"],
            设施要素名称=参数字典["设施要素名称"],
            设施要素中所属区域字段名称=参数字典["设施要素中所属区域字段名称"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class ZoneuseOfPlannedGeneration(object):
    # "用途分区规划图生成"
    def __init__(self):
        self.label = "用途分区规划图生成"
        self.description = ""
        self.canRunInBackground = False
        self.category = "分区"

    def getParameterInfo(self):
        import bxarcpy
        from bxgis import 配置

        规划用地要素名称 = bxarcpy.参数类.参数创建(名称="规划用地要素名称", 数据类型="要素类", 参数必要性="必填", 默认值=配置.项目信息.YD_用地_规划要素名称)._内嵌对象
        现状用地要素名称 = bxarcpy.参数类.参数创建(名称="现状用地要素名称", 数据类型="要素类", 参数必要性="必填", 默认值=配置.项目信息.YD_用地_现状要素名称)._内嵌对象
        农田整备要素名称列表 = bxarcpy.参数类.参数创建(名称="农田整备要素名称列表", 数据类型="要素类", 是否多个值=True)._内嵌对象
        城镇集建区要素名称 = bxarcpy.参数类.参数创建(名称="城镇集建区要素名称", 数据类型="要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_城镇集建区要素名称)._内嵌对象
        城镇弹性区要素名称 = bxarcpy.参数类.参数创建(名称="城镇弹性区要素名称", 数据类型="要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_城镇弹性区要素名称)._内嵌对象
        永久基本农田要素名称 = bxarcpy.参数类.参数创建(名称="永久基本农田要素名称", 数据类型="要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_永久基本农田要素名称)._内嵌对象
        城镇开发边界外集建区修改要素名称 = bxarcpy.参数类.参数创建(名称="城镇开发边界外集建区修改要素名称", 数据类型="要素类")._内嵌对象
        其他需要叠合的要素名称列表 = bxarcpy.参数类.参数创建(名称="其他需要叠合的要素名称列表", 数据类型="要素类", 是否多个值=True)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建(名称="输出要素名称", 数据类型="要素类", 参数类型="输出参数", 默认值="DIST_用途分区规划图")._内嵌对象

        return [规划用地要素名称, 现状用地要素名称, 农田整备要素名称列表, 城镇集建区要素名称, 城镇弹性区要素名称, 永久基本农田要素名称, 城镇开发边界外集建区修改要素名称, 其他需要叠合的要素名称列表, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)

        bxgis.分区.用途分区规划图生成.用途分区规划图生成(
            规划用地要素名称=参数字典["规划用地要素名称"],
            现状用地要素名称=参数字典["现状用地要素名称"],
            农田整备要素名称列表=参数字典["农田整备要素名称列表"],
            城镇集建区要素名称=参数字典["城镇集建区要素名称"],
            城镇弹性区要素名称=参数字典["城镇弹性区要素名称"],
            永久基本农田要素名称=参数字典["永久基本农田要素名称"],
            城镇开发边界外集建区修改要素名称=参数字典["城镇开发边界外集建区修改要素名称"],
            其他需要叠合的要素名称列表=参数字典["其他需要叠合的要素名称列表"],
            输出要素名称=参数字典["输出要素名称"],
        )
        return None


class DbCreateRegionOfUnit(object):
    # 单元入库
    def __init__(self):
        self.label = "单元入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        初始化_添加搜索路径()
        import bxarcpy
        from bxgis import 配置

        规划范围线要素名称 = bxarcpy.参数类.参数创建("规划范围线要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.JX_规划范围线要素名称)._内嵌对象
        单元编号 = bxarcpy.参数类.参数创建("单元编号", "字符串", 默认值=配置.项目信息.单元编号)._内嵌对象
        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        单元类型 = bxarcpy.参数类.参数创建("单元类型", "字符串", 默认值=配置.项目信息.单元类型)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象
        编制单位 = bxarcpy.参数类.参数创建("编制单位", "字符串", 默认值=配置.项目信息.编制单位)._内嵌对象
        单元功能 = bxarcpy.参数类.参数创建("单元功能", "字符串", 默认值=配置.项目信息.单元功能)._内嵌对象
        人口规模 = bxarcpy.参数类.参数创建("人口规模", "字符串", 默认值=配置.项目信息.人口规模)._内嵌对象
        跨单元平衡情况 = bxarcpy.参数类.参数创建("跨单元平衡情况", "字符串", 默认值=配置.项目信息.跨单元平衡情况)._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_GHFW")._内嵌对象

        return [规划范围线要素名称, 单元编号, 单元名称, 单元类型, 批复时间, 批复文号, 编制单位, 单元功能, 人口规模, 跨单元平衡情况, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_单元.入库_单元(
            规划范围线要素名称=参数字典["规划范围线要素名称"],
            单元编号=参数字典["单元编号"],
            单元名称=参数字典["单元名称"],
            单元类型=参数字典["单元类型"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典["批复文号"],
            编制单位=参数字典["编制单位"],
            单元功能=参数字典["单元功能"],
            人口规模=参数字典["人口规模"],
            跨单元平衡情况=参数字典["跨单元平衡情况"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateControllineOfVillage(object):
    # 村庄建设边界入库
    def __init__(self):
        self.label = "村庄建设边界入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        村庄建设边界要素名称 = bxarcpy.参数类.参数创建("村庄建设边界要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.KZX_村庄建设边界要素名称)._内嵌对象
        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象
        单元编号 = bxarcpy.参数类.参数创建("单元编号", "字符串", 默认值=配置.项目信息.单元编号)._内嵌对象
        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_JSBJ")._内嵌对象

        return [村庄建设边界要素名称, 单元名称, 批复时间, 批复文号, 单元编号, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_村庄建设边界.入库_村庄建设边界(
            村庄建设边界要素名称=参数字典["村庄建设边界要素名称"],
            单元名称=参数字典["单元名称"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典["批复文号"],
            单元编号=参数字典["单元编号"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateRegionOfIndustrial(object):
    # 工业片区入库
    def __init__(self):
        self.label = "工业片区入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        工业片区要素名称 = bxarcpy.参数类.参数创建("工业片区要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.JX_工业片区范围线要素名称)._内嵌对象
        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        区域编号 = bxarcpy.参数类.参数创建("区域编号", "字符串", 默认值=配置.区域要素字段映射.区域编号字段名称)._内嵌对象
        区域名称 = bxarcpy.参数类.参数创建("区域名称", "字符串", 默认值=配置.区域要素字段映射.区域名称字段名称)._内嵌对象
        总工业用地面积 = bxarcpy.参数类.参数创建("总工业用地面积", "字符串", 默认值=配置.区域要素字段映射.总工业用地面积字段名称)._内嵌对象
        总工业建筑面积 = bxarcpy.参数类.参数创建("总工业建筑面积", "字符串", 默认值=配置.区域要素字段映射.总工业建筑面积字段名称)._内嵌对象
        区域主导属性 = bxarcpy.参数类.参数创建("区域主导属性", "字符串", 默认值=配置.区域要素字段映射.区域主导属性字段名称)._内嵌对象
        配套设施汇总 = bxarcpy.参数类.参数创建("配套设施汇总", "字符串", 默认值=配置.区域要素字段映射.配套设施汇总字段名称)._内嵌对象
        交通设施汇总 = bxarcpy.参数类.参数创建("交通设施汇总", "字符串", 默认值=配置.区域要素字段映射.交通设施汇总字段名称)._内嵌对象
        市政设施汇总 = bxarcpy.参数类.参数创建("市政设施汇总", "字符串", 默认值=配置.区域要素字段映射.市政设施汇总字段名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_GYPQ")._内嵌对象

        return [工业片区要素名称, 单元名称, 区域编号, 区域名称, 总工业用地面积, 总工业建筑面积, 区域主导属性, 配套设施汇总, 交通设施汇总, 市政设施汇总, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_工业片区.入库_工业片区(
            工业片区要素名称=参数字典["工业片区要素名称"],
            单元名称=参数字典["单元名称"],
            区域编号字段名称=参数字典["区域编号"],
            区域名称字段名称=参数字典["区域名称"],
            总工业用地面积字段名称=参数字典["总工业用地面积"],
            总工业建筑面积字段名称=参数字典["总工业建筑面积"],
            区域主导属性字段名称=参数字典["区域主导属性"],
            配套设施汇总字段名称=参数字典["配套设施汇总"],
            交通设施汇总字段名称=参数字典["交通设施汇总"],
            市政设施汇总字段名称=参数字典["市政设施汇总"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateLanduseOfPlanned(object):
    # 规划地块入库
    def __init__(self):
        self.label = "规划地块入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        地块要素名称 = bxarcpy.参数类.参数创建("地块要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.YD_用地_规划要素名称)._内嵌对象
        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象
        地块编号字段名称 = bxarcpy.参数类.参数创建("地块编号字段名称", "字符串", 默认值=配置.地块要素字段映射.地块编号字段名称)._内嵌对象
        地类编号字段名称 = bxarcpy.参数类.参数创建("地类编号字段名称", "字符串", 默认值=配置.地块要素字段映射.地类编号字段名称)._内嵌对象
        性质名称字段名称 = bxarcpy.参数类.参数创建("性质名称字段名称", "字符串", 默认值=配置.地块要素字段映射.性质名称字段名称)._内嵌对象
        地块性质别称字段名称 = bxarcpy.参数类.参数创建("地块性质别称字段名称", "字符串", 默认值=配置.地块要素字段映射.地块性质别称字段名称)._内嵌对象
        兼容比例字段名称 = bxarcpy.参数类.参数创建("兼容比例字段名称", "字符串", 默认值=配置.地块要素字段映射.兼容比例字段名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_GHDK")._内嵌对象

        return [地块要素名称, 单元名称, 批复时间, 批复文号, 地块编号字段名称, 地类编号字段名称, 性质名称字段名称, 地块性质别称字段名称, 兼容比例字段名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_规划地块.入库_规划地块(
            地块要素名称=参数字典["地块要素名称"],
            单元名称=参数字典["单元名称"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典[" 批复文号"],
            地块编号字段名称=参数字典["地块编号字段名称"],
            地类编号字段名称=参数字典["地类编号字段名称"],
            性质名称字段名称=参数字典["性质名称字段名称"],
            地块性质别称字段名称=参数字典["地块性质别称字段名称"],
            兼容比例字段名称=参数字典["兼容比例字段名称"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateRegion(object):
    # 街区街坊分村入库
    def __init__(self):
        self.label = "街区街坊分村入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        #  输出要素名称="XG_JQJF"
        区域要素名称 = bxarcpy.参数类.参数创建("区域要素名称", "要素类", 参数必要性="必填", 默认值=配置.项目信息.JX_街坊范围线要素名称)._内嵌对象

        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        层级 = bxarcpy.参数类.参数创建("层级", "字符串", 默认值=配置.区域要素字段映射.区域类型字段名称)._内嵌对象
        区域编号字段名称 = bxarcpy.参数类.参数创建("区域编号字段名称", "字符串", 默认值=配置.区域要素字段映射.区域编号字段名称)._内嵌对象
        区域主导属性字段名称 = bxarcpy.参数类.参数创建("区域主导属性字段名称", "字符串", 默认值=配置.区域要素字段映射.区域主导属性字段名称)._内嵌对象
        总城镇居住人数字段名称 = bxarcpy.参数类.参数创建("总城镇居住人数字段名称", "字符串", 默认值=配置.区域要素字段映射.总城镇居住人数字段名称)._内嵌对象
        总建筑面积字段名称 = bxarcpy.参数类.参数创建("总建筑面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总建筑面积字段名称)._内嵌对象
        总住宅建筑面积字段名称 = bxarcpy.参数类.参数创建("总住宅建筑面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总住宅建筑面积字段名称)._内嵌对象
        总工业建筑面积字段名称 = bxarcpy.参数类.参数创建("总工业建筑面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总工业建筑面积字段名称)._内嵌对象
        总商服建筑面积字段名称 = bxarcpy.参数类.参数创建("总商服建筑面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总商服建筑面积字段名称)._内嵌对象
        总村庄户籍人数字段名称 = bxarcpy.参数类.参数创建("总村庄户籍人数字段名称", "字符串", 默认值=配置.区域要素字段映射.总村庄户籍人数字段名称)._内嵌对象
        总村庄居住人数字段名称 = bxarcpy.参数类.参数创建("总村庄居住人数字段名称", "字符串", 默认值=配置.区域要素字段映射.总村庄居住人数字段名称)._内嵌对象
        总耕地用地面积字段名称 = bxarcpy.参数类.参数创建("总耕地用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总耕地用地面积字段名称)._内嵌对象
        总永久基本农田用地面积字段名称 = bxarcpy.参数类.参数创建("总永久基本农田用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总永久基本农田用地面积字段名称)._内嵌对象
        总生态保护红线用地面积字段名称 = bxarcpy.参数类.参数创建("总生态保护红线用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总永久基本农田用地面积字段名称)._内嵌对象
        总村庄建设边界用地面积字段名称 = bxarcpy.参数类.参数创建("总村庄建设边界用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总村庄建设边界用地面积字段名称)._内嵌对象
        总城乡建设用地面积字段名称 = bxarcpy.参数类.参数创建("总城乡建设用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总城乡建设用地面积字段名称)._内嵌对象
        总村庄建设用地面积字段名称 = bxarcpy.参数类.参数创建("总村庄建设用地面积字段名称", "字符串", 默认值=配置.区域要素字段映射.总村庄建设用地面积字段名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_JQJF")._内嵌对象

        return [区域要素名称, 单元名称, 层级, 区域编号字段名称, 区域主导属性字段名称, 总城镇居住人数字段名称, 总建筑面积字段名称, 总住宅建筑面积字段名称, 总工业建筑面积字段名称, 总商服建筑面积字段名称, 总村庄户籍人数字段名称, 总村庄居住人数字段名称, 总耕地用地面积字段名称, 总永久基本农田用地面积字段名称, 总生态保护红线用地面积字段名称, 总村庄建设边界用地面积字段名称, 总城乡建设用地面积字段名称, 总村庄建设用地面积字段名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_街区街坊分村.入库_街区街坊分村(
            区域要素名称=参数字典["区域要素名称"],
            单元名称=参数字典["单元名称"],
            层级=参数字典["层级"],
            区域编号字段名称=参数字典["区域编号字段名称"],
            区域主导属性字段名称=参数字典["区域主导属性字段名称"],
            总城镇居住人数字段名称=参数字典["总城镇居住人数字段名称"],
            总建筑面积字段名称=参数字典["总建筑面积字段名称"],
            总住宅建筑面积字段名称=参数字典["总住宅建筑面积字段名称"],
            总工业建筑面积字段名称=参数字典["总工业建筑面积字段名称"],
            总商服建筑面积字段名称=参数字典["总商服建筑面积字段名称"],
            总村庄户籍人数字段名称=参数字典["总村庄户籍人数字段名称"],
            总村庄居住人数字段名称=参数字典["总村庄居住人数字段名称"],
            总耕地用地面积字段名称=参数字典["总耕地用地面积字段名称"],
            总永久基本农田用地面积字段名称=参数字典["总永久基本农田用地面积字段名称"],
            总生态保护红线用地面积字段名称=参数字典["总生态保护红线用地面积字段名称"],
            总村庄建设边界用地面积字段名称=参数字典["总村庄建设边界用地面积字段名称"],
            总城乡建设用地面积字段名称=参数字典["总城乡建设用地面积字段名称"],
            总村庄建设用地面积字段名称=参数字典["总村庄建设用地面积字段名称"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateControlline(object):
    # 控制线入库
    def __init__(self):
        self.label = "控制线入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        # 其他要素名称=None

        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象

        道路中线要素名称 = bxarcpy.参数类.参数创建("道路中线要素名称", "要素类", 默认值=配置.项目信息.DL_道路中线要素名称)._内嵌对象
        道路边线要素名称 = bxarcpy.参数类.参数创建("道路边线要素名称", "要素类", 默认值=配置.项目信息.DL_道路边线要素名称)._内嵌对象
        高架桥要素名称 = bxarcpy.参数类.参数创建("高架桥要素名称", "要素类", 默认值=配置.项目信息.GZW_高架桥要素名称)._内嵌对象
        隧道要素名称 = bxarcpy.参数类.参数创建("隧道要素名称", "要素类", 默认值=配置.项目信息.GZW_隧道要素名称)._内嵌对象
        河道边线要素名称 = bxarcpy.参数类.参数创建("河道边线要素名称", "要素类", 默认值=配置.项目信息.DL_河道边线要素名称)._内嵌对象
        河道中线要素名称 = bxarcpy.参数类.参数创建("河道中线要素名称", "要素类", 默认值=配置.项目信息.DL_河道中线要素名称)._内嵌对象
        地块要素名称 = bxarcpy.参数类.参数创建("地块要素名称", "要素类", 默认值=配置.项目信息.YD_用地_规划要素名称)._内嵌对象
        铁路线要素名称 = bxarcpy.参数类.参数创建("铁路线要素名称", "要素类", 默认值=配置.项目信息.GZW_铁路线要素名称)._内嵌对象
        输油管要素名称 = bxarcpy.参数类.参数创建("输油管要素名称", "要素类", 默认值=配置.项目信息.GZW_输油管要素名称)._内嵌对象
        原水输水要素名称 = bxarcpy.参数类.参数创建("原水输水要素名称", "要素类", 默认值=配置.项目信息.GZW_原水输水要素名称)._内嵌对象
        高压线要素名称 = bxarcpy.参数类.参数创建("高压线要素名称", "要素类", 默认值=配置.项目信息.GZW_高压线要素名称)._内嵌对象
        天然气要素名称 = bxarcpy.参数类.参数创建("天然气要素名称", "要素类", 默认值=配置.项目信息.GZW_天然气要素名称)._内嵌对象
        综合管廊要素名称 = bxarcpy.参数类.参数创建("综合管廊要素名称", "要素类", 默认值=配置.项目信息.GZW_综合管廊要素名称)._内嵌对象
        市政管线要素名称 = bxarcpy.参数类.参数创建("市政管线要素名称", "要素类", 默认值=配置.项目信息.GZW_市政管线要素名称)._内嵌对象
        微波通道要素名称 = bxarcpy.参数类.参数创建("微波通道要素名称", "要素类", 默认值=配置.项目信息.GZW_微波通道要素名称)._内嵌对象
        高度分区要素名称 = bxarcpy.参数类.参数创建("高度分区要素名称", "要素类", 默认值=配置.项目信息.GZW_高度分区要素名称)._内嵌对象
        共用通道要素名称 = bxarcpy.参数类.参数创建("共用通道要素名称", "要素类", 默认值=配置.项目信息.GZW_共用通道要素名称)._内嵌对象
        远景道路要素名称 = bxarcpy.参数类.参数创建("远景道路要素名称", "要素类", 默认值=配置.项目信息.GZW_远景道路要素名称)._内嵌对象
        虚位控制河道要素名称 = bxarcpy.参数类.参数创建("虚位控制河道要素名称", "要素类", 默认值=配置.项目信息.GZW_虚位控制河道要素名称)._内嵌对象
        虚位控制道路要素名称 = bxarcpy.参数类.参数创建("虚位控制道路要素名称", "要素类", 默认值=配置.项目信息.GZW_虚位控制道路要素名称)._内嵌对象
        绿化控制线要素名称 = bxarcpy.参数类.参数创建("绿化控制线要素名称", "要素类", 默认值=配置.项目信息.GZW_绿化控制线要素名称)._内嵌对象
        景观廊道要素名称 = bxarcpy.参数类.参数创建("景观廊道要素名称", "要素类", 默认值=配置.项目信息.GZW_景观廊道要素名称)._内嵌对象
        其他要素名称 = bxarcpy.参数类.参数创建("其他要素名称", "要素类", 默认值=配置.项目信息.GZW_其他要素名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_KZX")._内嵌对象

        return [单元名称, 批复时间, 批复文号, 道路中线要素名称, 道路边线要素名称, 高架桥要素名称, 隧道要素名称, 河道边线要素名称, 河道中线要素名称, 地块要素名称, 铁路线要素名称, 输油管要素名称, 原水输水要素名称, 高压线要素名称, 天然气要素名称, 综合管廊要素名称, 市政管线要素名称, 微波通道要素名称, 高度分区要素名称, 共用通道要素名称, 远景道路要素名称, 虚位控制河道要素名称, 虚位控制道路要素名称, 绿化控制线要素名称, 景观廊道要素名称, 其他要素名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_控制线.入库_控制线(
            单元名称=参数字典["单元名称"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典["批复文号"],
            道路中线要素名称=参数字典["道路中线要素名称"],
            道路边线要素名称=参数字典["道路边线要素名称"],
            高架桥要素名称=参数字典["高架桥要素名称"],
            隧道要素名称=参数字典["隧道要素名称"],
            河道边线要素名称=参数字典["河道边线要素名称"],
            河道中线要素名称=参数字典["河道中线要素名称"],
            地块要素名称=参数字典["地块要素名称"],
            铁路线要素名称=参数字典["铁路线要素名称"],
            输油管要素名称=参数字典["输油管要素名称"],
            原水输水要素名称=参数字典["原水输水要素名称"],
            高压线要素名称=参数字典["高压线要素名称"],
            天然气要素名称=参数字典["天然气要素名称"],
            综合管廊要素名称=参数字典["综合管廊要素名称"],
            市政管线要素名称=参数字典["市政管线要素名称"],
            微波通道要素名称=参数字典["微波通道要素名称"],
            高度分区要素名称=参数字典["高度分区要素名称"],
            共用通道要素名称=参数字典["共用通道要素名称"],
            远景道路要素名称=参数字典["远景道路要素名称"],
            虚位控制河道要素名称=参数字典["虚位控制河道要素名称"],
            虚位控制道路要素名称=参数字典["虚位控制道路要素名称"],
            绿化控制线要素名称=参数字典["绿化控制线要素名称"],
            景观廊道要素名称=参数字典["景观廊道要素名称"],
            其他要素名称=参数字典["其他要素名称"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateFacilities(object):
    # 设施入库
    def __init__(self):
        self.label = "设施入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        设施要素名称 = bxarcpy.参数类.参数创建("设施要素名称", "要素类", 默认值=配置.项目信息.SS_配套设施_规划要素名称)._内嵌对象

        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象

        类型代码字段名称 = bxarcpy.参数类.参数创建("类型代码字段名称", "字符串", 默认值=配置.设施要素字段映射.类别代码字段名称)._内嵌对象
        设施代码字段名称 = bxarcpy.参数类.参数创建("设施代码字段名称", "字符串", 默认值=配置.设施要素字段映射.设施代码字段名称)._内嵌对象
        设施名称字段名称 = bxarcpy.参数类.参数创建("设施名称字段名称", "字符串", 默认值=配置.设施要素字段映射.设施名称字段名称)._内嵌对象
        设施级别字段名称 = bxarcpy.参数类.参数创建("设施级别字段名称", "字符串", 默认值=配置.设施要素字段映射.设施级别字段名称)._内嵌对象
        设施所在地块编号字段名称 = bxarcpy.参数类.参数创建("设施所在地块编号字段名称", "字符串", 默认值=配置.设施要素字段映射.设施所在地块编号字段名称)._内嵌对象
        位置精确度字段名称 = bxarcpy.参数类.参数创建("位置精确度字段名称", "字符串", 默认值=配置.设施要素字段映射.位置精确度字段名称)._内嵌对象
        远期预留字段名称 = bxarcpy.参数类.参数创建("远期预留字段名称", "字符串", 默认值=配置.设施要素字段映射.远期预留字段名称)._内嵌对象
        备注说明字段名称 = bxarcpy.参数类.参数创建("备注说明字段名称", "字符串", 默认值=配置.设施要素字段映射.备注说明字段名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_PTSS")._内嵌对象

        return [单元名称, 批复时间, 批复文号, 类型代码字段名称, 设施代码字段名称, 设施名称字段名称, 设施级别字段名称, 设施所在地块编号字段名称, 位置精确度字段名称, 远期预留字段名称, 备注说明字段名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_设施.入库_设施(
            单元名称=参数字典["单元名称"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典["批复文号"],
            类型代码字段名称=参数字典["类型代码字段名称"],
            设施代码字段名称=参数字典["设施代码字段名称"],
            设施名称字段名称=参数字典["设施名称字段名称"],
            设施级别字段名称=参数字典["设施级别字段名称"],
            设施所在地块编号字段名称=参数字典["设施所在地块编号字段名称"],
            位置精确度字段名称=参数字典["位置精确度字段名称"],
            远期预留字段名称=参数字典["远期预留字段名称"],
            备注说明字段名称=参数字典["备注说明字段名称"],
            输出要素名称=参数字典["输出要素名称"],
        )


class DbCreateZoneuse(object):
    # 用途分区入库
    def __init__(self):
        self.label = "用途分区入库"
        self.description = ""
        self.canRunInBackground = False
        self.category = "入库"

    def getParameterInfo(self):
        import bxarcpy

        初始化_添加搜索路径()
        from bxgis import 配置

        分区要素名称 = bxarcpy.参数类.参数创建("分区要素名称", "要素类", 默认值=配置.项目信息.FQ_用途分区_规划要素名称)._内嵌对象

        单元名称 = bxarcpy.参数类.参数创建("单元名称", "字符串", 默认值=配置.项目信息.单元名称)._内嵌对象
        批复时间 = bxarcpy.参数类.参数创建("批复时间", "字符串", 默认值=配置.项目信息.批复时间)._内嵌对象
        批复文号 = bxarcpy.参数类.参数创建("批复文号", "字符串", 默认值=配置.项目信息.批复文号)._内嵌对象
        单元编号 = bxarcpy.参数类.参数创建("单元编号", "字符串", 默认值=配置.项目信息.单元编号)._内嵌对象

        分区名称字段名称 = bxarcpy.参数类.参数创建("分区名称字段名称", "字符串", 默认值=配置.分区要素字段映射.分区名称字段名称)._内嵌对象
        分区编号字段名称 = bxarcpy.参数类.参数创建("分区编号字段名称", "字符串", 默认值=配置.分区要素字段映射.分区编号字段名称)._内嵌对象

        输出要素名称 = bxarcpy.参数类.参数创建("输出要素名称", "要素类", 参数类型="输出参数", 默认值="XG_YTFQ")._内嵌对象

        return [分区要素名称, 单元名称, 批复时间, 批复文号, 单元编号, 分区名称字段名称, 分区编号字段名称, 输出要素名称]

    def execute(self, 参数列表, 消息):
        import bxgis

        初始化_添加搜索路径()
        参数字典 = 参数组字典生成_转换值(参数列表)
        bxgis.入库.入库_用途分区.入库_用途分区(
            分区要素名称=参数字典["分区要素名称"],
            单元名称=参数字典["单元名称"],
            批复时间=参数字典["批复时间"],
            批复文号=参数字典["批复文号"],
            单元编号=参数字典["单元编号"],
            分区名称字段名称=参数字典["分区名称字段名称"],
            分区编号字段名称=参数字典["分区编号字段名称"],
            输出要素名称=参数字典["输出要素名称"],
        )


# class TestTool(object):
#     def __init__(self):
#         """Define the tool (tool name is the name of the class)."""
#         self.label = "测试工具"
#         self.description = ""
#         self.canRunInBackground = False
#         self.category = "测试\\测试2"

#     def getParameterInfo(self):
#         """Define parameter definitions 定义了参数，类似脚本工具属性中的参数界面"""

#         输入参数1 = bxarcpy.参数类.参数创建("输入要素", "输入要素", "要素图层", "必填", "输入参数")._内嵌对象
#         输入参数1.filter.list = ["Polyline"]

#         输出参数1 = arcpy.Parameter(
#             name="output_features",
#             displayName="Output Features",
#             datatype="GPFeatureLayer",
#             parameterType="Required",
#             direction="Output",
#         )

#         要素数量 = arcpy.Parameter(
#             name="number_of_features",
#             displayName="Number of Features",
#             datatype="GPLong",
#             parameterType="Required",
#             direction="Input",
#         )
#         要素数量.filter.type = "Range"
#         要素数量.filter.list = [1, 1000000000]

#         parameters = [输入参数1, 输出参数1, 要素数量]
#         return parameters

#     def isLicensed(self):
#         """Set whether tool is licensed to execute 可以控制许可行为，验证能否执行，检入检出许可"""
#         return True

#     def updateParameters(self, parameters):
#         """Modify the values and properties of parameters before internal
#         validation is performed.  This method is called whenever a parameter
#         has been changed 定义了工具内部验证的过程，比如输入数据达到某个条件，则启用或者禁用某个参数，或者为某个参数设置默认值"""
#         return

#     def updateMessages(self, parameters):
#         """Modify the messages created by internal validation for each tool
#         parameter.  This method is called after internal validation 定义了工具内部验证并返回消息的过程，比如输入数据不满足要求，则返回消息输入不可用"""
#         return

#     def execute(self, 参数列表, messages):
#         """The source code of the tool 定义工具源码，必要方法，只包括该方法也可以运行工具，但是没有参数界面"""
#         inputfc = 参数列表[0].valueAsText
#         outputfc = 参数列表[1].valueAsText
#         outcount = 参数列表[2].value
#         inlist = []
#         with arcpy.da.SearchCursor(inputfc, "OID@") as cursor:  # type: ignore
#             for row in cursor:
#                 id = row[0]
#                 inlist.append(id)
#         import random

#         randomlist = random.sample(inlist, outcount)
#         desc = arcpy.da.Describe(inputfc)  # type: ignore
#         fldname = desc["OIDFieldName"]
#         sqlfield = arcpy.AddFieldDelimiters(inputfc, fldname)
#         sqlexp = "{} in {}".format(sqlfield, tuple(randomlist))
#         arcpy.Select_analysis(inputfc, outputfc, sqlexp)
#         return None

#     def postExecute(self, parameters):
#         """This method takes place after outputs are processed and
#         added to the display."""
#         return
if __name__ == "__main__":
    # def aaaa():
    #     print(locals())
    #     for i in ['a', 'b', 'c']:
    #         locals()[i] = 1
    #     print(locals())
    #     print(a)
    # aaaa()

    # print(bxgis.常用_导出到CAD)
    pass
