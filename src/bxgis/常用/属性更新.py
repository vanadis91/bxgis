from typing import Union, Literal
from bxarcpy import 工具包
from bxarcpy.要素包 import 要素类
from bxarcpy.游标包 import 游标类
from bxpy.基本对象包 import 字类
from bxpy.日志包 import 日志生成器
from bxgis.配置 import 基本信息


def 要素创建_通过更新_根据面(输入要素路径, 区域要素名称="JX_街区范围线", 字段映射列表=[["所属街区", "街区编号"]], 计算方式: Literal["分割输入要素", "内点在区域要素内", "大部分在区域要素内"] = "分割输入要素", 输出要素路径="内存临时"):
    if 输出要素路径 == "内存临时":
        输出要素路径 = "in_memory\\AA_计算所属区域" + "_" + 工具包.生成短GUID()

    输入要素路径_复制后 = 要素类.要素创建_通过复制(输入要素路径)
    区域要素路径_复制后 = 要素类.要素创建_通过复制(区域要素名称)

    需要添加的字段列表 = [x[0] for x in 字段映射列表]
    for x in 需要添加的字段列表:
        要素类.字段添加(输入要素路径_复制后, x)

    区域要素保留字段列表 = [x[1] for x in 字段映射列表]
    要素类.字段删除(区域要素路径_复制后, 保留字段名称列表=区域要素保留字段列表)

    if 计算方式 == "分割输入要素":
        赋值后要素 = 要素类.要素创建_通过联合并赋值字段(输入要素路径_复制后, 区域要素路径_复制后, 字段映射列表, 要素被分割时提示信息中包括的字段=["_ID", "_面积", 基本信息.地块要素字段映射.地类编号字段名称])
        输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(赋值后要素, 输出要素路径, "计算所属区域前")

    elif 计算方式 == "内点在区域要素内":
        赋值后要素 = 要素类.要素创建_通过空间连接(输入要素路径_复制后, 区域要素路径_复制后, "内点在连接要素内")
        for x in 字段映射列表:
            要素类.字段计算(赋值后要素, x[0], f"!{x[1]}!")
        要素类.字段删除(赋值后要素, [x[1] for x in 字段映射列表])

        输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(赋值后要素, 输出要素路径, "计算所属区域前")

    elif 计算方式 == "大部分在区域要素内":
        赋值后要素 = 要素类.要素创建_通过空间连接(输入要素路径_复制后, 区域要素路径_复制后, "大部分在连接要素内")
        for x in 字段映射列表:
            要素类.字段计算(赋值后要素, x[0], f"!{x[1]}!")
        要素类.字段删除(赋值后要素, [x[1] for x in 字段映射列表])

        输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(赋值后要素, 输出要素路径, "计算所属区域前")

    return 输出要素路径


def 要素创建_通过更新_根据点(输入要素路径, 点要素名称="AA_test", 字段映射列表=[["所属街区", "街区编号"]], 输出要素路径="内存临时"):
    if 输出要素路径 == "内存临时":
        输出要素路径 = "in_memory\\AA_要素创建_通过更新_根据点" + "_" + 工具包.生成短GUID()

    输入要素路径_复制后 = 要素类.要素创建_通过复制(输入要素路径)
    点要素路径_复制后 = 要素类.要素创建_通过复制(点要素名称)

    需要添加的字段列表 = [x[0] for x in 字段映射列表]
    输入要素的字段列表 = 要素类.字段名称列表获取(输入要素路径_复制后)
    for x in 需要添加的字段列表:
        if x not in 输入要素的字段列表:
            要素类.字段添加(输入要素路径_复制后, x)
    输入要素的字段列表 = 要素类.字段名称列表获取(输入要素路径_复制后)

    点要素保留字段列表 = [x[1] for x in 字段映射列表]
    要素类.字段删除(点要素路径_复制后, 保留字段名称列表=点要素保留字段列表)
    点要素的字段列表 = 要素类.字段名称列表获取(点要素路径_复制后)

    字段映射列表temp = []
    for x in 字段映射列表:
        if x[1] in 输入要素的字段列表:
            修改后的字段名称 = x[1] + "_" + 字类.字符串生成_短GUID()
            修改后的字段名称 = 修改后的字段名称[:25]
            日志生成器.输出调试(f"当前操作的字段：{x[1]}")
            要素类.字段修改(点要素路径_复制后, x[1], 修改后的字段名称)
            字段映射列表temp.append([x[0], 修改后的字段名称])
        else:
            字段映射列表temp.append(x)
    字段映射列表 = 字段映射列表temp

    赋值后要素 = 要素类.要素创建_通过空间连接(输入要素路径_复制后, 点要素路径_复制后, "包含连接要素")
    操作字段 = set()
    for x in 字段映射列表:
        操作字段.add(x[0])
        操作字段.add(x[1])
    操作字段 = list(操作字段)
    操作字段.append("Join_Count")
    操作字段.append("_ID")
    with 游标类.游标创建("更新", 赋值后要素, 操作字段) as 游标:
        for 游标x in 游标类.属性获取_数据_字典形式(游标, 操作字段):
            if 游标x["Join_Count"] == 0:
                continue
            if 游标x["Join_Count"] > 1:
                要素类.要素创建_通过复制并重命名重名要素(赋值后要素, "AA_跳错")
                raise Exception(f"ID为 {游标x['_ID']} 的输入要素对应了多个点")
            for kv in 字段映射列表:
                游标x[kv[0]] = 游标x[kv[1]]
                游标类.行更新_字典形式(游标, 游标x)

    需要删除的字段名称列表 = [x[1] for x in 字段映射列表]
    需要删除的字段名称列表.append("Join_Count")
    需要删除的字段名称列表.append("TARGET_FID")
    要素类.字段删除(赋值后要素, 需要删除的字段名称列表)

    输出要素路径 = 要素类.要素创建_通过复制并重命名重名要素(赋值后要素, 输出要素路径)

    return 输出要素路径


def mian_temp():
    日志生成器.开启()
    字段列表 = 要素类.字段名称列表获取("AA_增密_point", 含系统字段=False)
    字段映射列表 = [[x, x] for x in 字段列表]
    日志生成器.输出调试(f"字段映射列表：{字段映射列表}", 内容长度=100000)
    要素创建_通过更新_根据点("CZ_CAD导入_用地规划", "AA_增密_point", 字段映射列表=字段映射列表, 输出要素路径="AA_测试")


if __name__ == "__main__":
    工作空间 = r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb"
    from bxarcpy.环境包 import 环境管理器类

    with 环境管理器类.环境管理器类创建(工作空间):
        # 用地要素 = 要素创建_通过更新_根据面("AA_DIST_用地规划图_ExportFeatures", 区域要素名称="JX_街区范围线", 字段映射列表=[["所属街区", "区域编号"]], 计算方式="大部分在区域要素内", 输出要素路径="AA_测试")
        mian_temp()
