from typing import Union, Literal, Any
from bxpy.日志包 import 日志类
from bxpy.进程包 import 子进程类


# _任务类型枚举 = {
#     "单次": "ONCE",
#     "循环分": "MINUTE",
#     "循环时": "HOURLY",
#     "循环天": "DAILY",
#     "循环周": "WEEKLY",
#     "循环月": "MONTHLY",
#     "当系统启动时": "ONSTART",
#     "当用户登录时": "ONLOGON",
#     "当系统空闲时": "ONIDLE",
# }
_运行频率枚举_周数 = {
    # "月份最后一天": "LASTDAY",
    "月份第一周": "FIRST",
    "月份第二周": "SECOND",
    "月份第三周": "THIRD",
    "月份第四周": "FOURTH",
    "月份最后周": "LAST",
}
_运行频率枚举_星期 = {
    "周一": "MON",
    "周二": "TUE",
    "周三": "WED",
    "周四": "THU",
    "周五": "FRI",
    "周六": "SAT",
    "周日": "SUN",
    "周一到周日": "*",
}
_运行频率枚举_月份 = {
    "一月": "JAN",
    "二月": "FEB",
    "三月": "MAR",
    "四月": "APR",
    "五月": "MAY",
    "六月": "JUN",
    "七月": "JUL",
    "八月": "AUG",
    "九月": "SEP",
    "十月": "OCT",
    "十一月": "NOV",
    "十二月": "DEC",
    "一月到十二月": "*",
}


class 定时任务类:
    @staticmethod
    def 定时任务创建(
        任务名称,
        执行程序路径,
        运行频率: Literal["单次", "每隔A(1~1439)分", "每隔A(1~23)时", "每隔A(1~365)天", "每隔A(1~52)周的周B(周一~周日)", "每隔A(1~12)月的第C(1~31)天", "D月(一月~十二月)的第E周(第一周~最后周)的周B(周一~周日)", "D月(一月~12月)的最后一天", "系统启动时", "用户登录时", "系统空闲A(1~999)分时"] = "每隔A(1~1439)分",
        运行频率_参数A: int = 1,
        运行频率_参数B: Literal["周一", "周二", "周三", "周四", "周五", "周六", "周日", "周一到周日"] = "周一",
        运行频率_参数C: int = 1,
        运行频率_参数D: Literal["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", "一月到十二月"] = "一月到十二月",
        运行频率_参数E: Literal["月份第一周", "月份第二周", "月份第三周", "月份第四周", "月份最后周"] = "月份第一周",
        开始执行时间: Literal["当前", "HH:MM:SS"] = "当前",
        开始执行日期: Literal["当前", "MM/DD/YYYY"] = "当前",
        结束执行日期: Literal["永不", "MM/DD/YYYY"] = "永不",
        运行主机: Literal["计算机名称", "192.168.31.1", "本地"] = "本地",
        运行用户账户: Literal["用户账户", "当前"] = "当前",
        运行用户密码: Literal["用户密码", "当前"] = "当前",
        运行权限: Literal["用户账户", "System", "当前"] = "当前",
        运行权限密码: Literal["用户密码", "当前"] = "当前",
    ):
        命令行 = "schtasks /create"
        命令行 += f' /tn "{任务名称}"'
        命令行 += f' /tr "{执行程序路径}"'

        if isinstance(运行频率_参数B, list):
            运行频率_B_raw = ",".join([_运行频率枚举_星期[i] for i in 运行频率_参数B])
        else:
            运行频率_B_raw = _运行频率枚举_星期[运行频率_参数B]
        if isinstance(运行频率_参数D, list):
            运行频率_D_raw = ",".join([_运行频率枚举_月份[i] for i in 运行频率_参数D])
        else:
            运行频率_D_raw = _运行频率枚举_月份[运行频率_参数D]
        if isinstance(运行频率_参数E, list):
            运行频率_E_raw = ",".join([_运行频率枚举_周数[i] for i in 运行频率_参数E])
        else:
            运行频率_E_raw = _运行频率枚举_周数[运行频率_参数E]

        if 运行频率 in ["单次"]:
            命令行 += f" /sc ONCE"
        if 运行频率 in ["每隔A(1~1439)分"]:
            命令行 += f" /sc MINUTE"
            命令行 += f" /mo {运行频率_参数A}"
        if 运行频率 in ["每隔A(1~23)时"]:
            命令行 += f" /sc HOURLY"
            命令行 += f" /mo {运行频率_参数A}"
        if 运行频率 in ["每隔A(1~365)天"]:
            命令行 += f" /sc DAILY"
            命令行 += f" /mo {运行频率_参数A}"
        elif 运行频率 in ["每隔A(1~52)周的周B(周一~周日)"]:
            命令行 += f" /sc WEEKLY"
            命令行 += f" /mo {运行频率_参数A}"
            命令行 += f" /d {运行频率_B_raw}"
        elif 运行频率 in ["每隔A(1~12)月的第C(1~31)天"]:
            命令行 += f" /sc MONTHLY"
            命令行 += f" /mo {运行频率_参数A}"
            命令行 += f" /d {运行频率_参数C}"
        elif 运行频率 in ["D月(一月~十二月)的第E周(第一周~最后周)的周B(周一~周日)"]:
            命令行 += f" /sc MONTHLY"
            命令行 += f" /m {运行频率_D_raw}"
            命令行 += f" /mo {运行频率_E_raw}"
            命令行 += f" /d {运行频率_B_raw}"
        elif 运行频率 in ["D月(一月~12月)的最后一天"]:
            命令行 += f" /sc MONTHLY"
            命令行 += f" /m {运行频率_D_raw}"
            命令行 += f" /mo LASTDAY"
        elif 运行频率 in ["系统启动时"]:
            命令行 += f" /sc ONSTART"
        elif 运行频率 in ["用户登录时"]:
            命令行 += f" /sc ONLOGON"
        elif 运行频率 in ["系统空闲A(1~999)分时"]:
            命令行 += f" /sc ONIDLE"
            命令行 += f" /i {运行频率_参数A}"

        命令行 += f" /st {开始执行时间}" if 开始执行时间 != "当前" else ""
        命令行 += f" /sd {开始执行日期}" if 开始执行日期 != "当前" else ""
        命令行 += f" /ed {结束执行日期}" if 结束执行日期 != "永不" else ""

        命令行 += f" /s {运行主机}" if 运行主机 != "本地" else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 != "当前" else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 != "当前" else ""
        命令行 += f" /ru {运行权限}" if 运行权限 != "当前" else ""
        命令行 += f" /rp {运行权限密码}" if 运行权限密码 != "当前" else ""
        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)

    @staticmethod
    def 修改(
        任务名称,
        执行程序路径=None,
        运行频率: Union[Literal["单次", "每隔A(1~1439)分", "每隔A(1~23)时", "每隔A(1~365)天", "每隔A(1~52)周的周B(周一~周日)", "每隔A(1~12)月的第C(1~31)天", "D月(一月~十二月)的第E周(第一周~最后周)的周B(周一~周日)", "D月(一月~12月)的最后一天", "系统启动时", "用户登录时", "系统空闲A(1~999)分时"], None] = None,
        运行频率_参数A: int = 1,
        运行频率_参数B: Literal["周一", "周二", "周三", "周四", "周五", "周六", "周日", "周一到周日"] = "周一",
        运行频率_参数C: int = 1,
        运行频率_参数D: Literal["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", "一月到十二月"] = "一月到十二月",
        运行频率_参数E: Literal["月份第一周", "月份第二周", "月份第三周", "月份第四周", "月份最后周"] = "月份第一周",
        开始执行时间: Union[Literal["HH:MM:SS"], None] = None,
        开始执行日期: Union[Literal["MM/DD/YYYY"], None] = None,
        结束执行日期: Union[Literal["MM/DD/YYYY"], None] = None,
        运行主机: Union[Literal["计算机名称", "192.168.31.1"], None] = None,
        运行用户账户: Union[Literal["用户账户"], None] = None,
        运行用户密码: Union[Literal["用户密码"], None] = None,
        运行权限: Union[Literal["用户账户", "System"], None] = None,
        运行权限密码: Union[Literal["用户密码"], None] = None,
    ):
        命令行 = "schtasks /change"
        命令行 += f' /tn "{任务名称}"'
        命令行 += f' /tr "{执行程序路径}"' if 执行程序路径 else ""
        if 运行频率:
            if isinstance(运行频率_参数B, list):
                运行频率_B_raw = ",".join([_运行频率枚举_星期[i] for i in 运行频率_参数B])
            else:
                运行频率_B_raw = _运行频率枚举_星期[运行频率_参数B]
            if isinstance(运行频率_参数D, list):
                运行频率_D_raw = ",".join([_运行频率枚举_月份[i] for i in 运行频率_参数D])
            else:
                运行频率_D_raw = _运行频率枚举_月份[运行频率_参数D]
            if isinstance(运行频率_参数E, list):
                运行频率_E_raw = ",".join([_运行频率枚举_周数[i] for i in 运行频率_参数E])
            else:
                运行频率_E_raw = _运行频率枚举_周数[运行频率_参数E]

            if 运行频率 in ["单次"]:
                命令行 += f" /sc ONCE"
            if 运行频率 in ["每隔A(1~1439)分"]:
                命令行 += f" /sc MINUTE"
                命令行 += f" /mo {运行频率_参数A}"
            if 运行频率 in ["每隔A(1~23)时"]:
                命令行 += f" /sc HOURLY"
                命令行 += f" /mo {运行频率_参数A}"
            if 运行频率 in ["每隔A(1~365)天"]:
                命令行 += f" /sc DAILY"
                命令行 += f" /mo {运行频率_参数A}"
            elif 运行频率 in ["每隔A(1~52)周的周B(周一~周日)"]:
                命令行 += f" /sc WEEKLY"
                命令行 += f" /mo {运行频率_参数A}"
                命令行 += f" /d {运行频率_B_raw}"
            elif 运行频率 in ["每隔A(1~12)月的第C(1~31)天"]:
                命令行 += f" /sc MONTHLY"
                命令行 += f" /mo {运行频率_参数A}"
                命令行 += f" /d {运行频率_参数C}"
            elif 运行频率 in ["D月(一月~十二月)的第E周(第一周~最后周)的周B(周一~周日)"]:
                命令行 += f" /sc MONTHLY"
                命令行 += f" /m {运行频率_D_raw}"
                命令行 += f" /mo {运行频率_E_raw}"
                命令行 += f" /d {运行频率_B_raw}"
            elif 运行频率 in ["D月(一月~12月)的最后一天"]:
                命令行 += f" /sc MONTHLY"
                命令行 += f" /m {运行频率_D_raw}"
                命令行 += f" /mo LASTDAY"
            elif 运行频率 in ["系统启动时"]:
                命令行 += f" /sc ONSTART"
            elif 运行频率 in ["用户登录时"]:
                命令行 += f" /sc ONLOGON"
            elif 运行频率 in ["系统空闲A(1~999)分时"]:
                命令行 += f" /sc ONIDLE"
                命令行 += f" /i {运行频率_参数A}"

        命令行 += f" /st {开始执行时间}" if 开始执行时间 else ""
        命令行 += f" /sd {开始执行日期}" if 开始执行日期 else ""
        命令行 += f" /ed {结束执行日期}" if 结束执行日期 else ""

        命令行 += f" /s {运行主机}" if 运行主机 else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 else ""
        命令行 += f" /ru {运行权限}" if 运行权限 else ""
        命令行 += f" /rp {运行权限密码}" if 运行权限密码 else ""

        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)

    @staticmethod
    def 测试运行(
        任务名称,
        运行主机: Literal["计算机名称", "192.168.31.1", "本地"] = "本地",
        运行用户账户: Literal["用户账户", "当前"] = "当前",
        运行用户密码: Literal["用户密码", "当前"] = "当前",
    ):
        命令行 = "schtasks /run"
        命令行 += f' /tn "{任务名称}"'
        命令行 += f" /s {运行主机}" if 运行主机 != "本地" else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 != "当前" else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 != "当前" else ""
        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)

    @staticmethod
    def 终止(
        任务名称,
        运行主机: Literal["计算机名称", "192.168.31.1", "本地"] = "本地",
        运行用户账户: Literal["用户账户", "当前"] = "当前",
        运行用户密码: Literal["用户密码", "当前"] = "当前",
    ):
        命令行 = "schtasks /end"
        命令行 += f' /tn "{任务名称}"'
        命令行 += f" /s {运行主机}" if 运行主机 != "本地" else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 != "当前" else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 != "当前" else ""
        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)

    @staticmethod
    def 删除(
        任务名称,
        运行主机: Literal["计算机名称", "192.168.31.1", "本地"] = "本地",
        运行用户账户: Literal["用户账户", "当前"] = "当前",
        运行用户密码: Literal["用户密码", "当前"] = "当前",
    ):
        命令行 = "schtasks /delete /f"
        命令行 += f' /tn "{任务名称}"'
        命令行 += f" /s {运行主机}" if 运行主机 != "本地" else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 != "当前" else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 != "当前" else ""
        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)

    @staticmethod
    def 查询(
        输出格式: Literal["TABLE", "LIST", "CSV"] = "TABLE",
        是否忽略列标题: bool = False,
        是否显示高级属性: bool = False,
        运行主机: Literal["计算机名称", "192.168.31.1", "本地"] = "本地",
        运行用户账户: Literal["用户账户", "当前"] = "当前",
        运行用户密码: Literal["用户密码", "当前"] = "当前",
    ):
        命令行 = "schtasks /query"
        命令行 += f" /fo {输出格式}"
        命令行 += f" /nh" if 是否忽略列标题 else ""
        命令行 += f" /v" if 是否显示高级属性 else ""
        命令行 += f" /s {运行主机}" if 运行主机 != "本地" else ""
        命令行 += f" /u {运行用户账户}" if 运行用户账户 != "当前" else ""
        命令行 += f" /p {运行用户密码}" if 运行用户密码 != "当前" else ""
        日志类.输出信息(f"当前的命令行：{命令行}")
        子进程 = 子进程类.子进程创建(命令行)
        输出 = 子进程类.输出获取_阻塞(子进程)
        print(输出)


if __name__ == "__main__":
    日志类.开启()
    定时任务类.定时任务创建("测试任务", r"C:\Windows\notepad.exe")
