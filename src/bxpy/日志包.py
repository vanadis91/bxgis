# -*- coding: utf-8 -*-

# import logging
from bxpy.基本对象包 import 正则类
from typing import Union, Literal, Any
import sys


class 配置:
    是否开启 = False
    开启状态临时控制 = {"顶层函数": False}
    级别列表过滤 = ["调试", "信息", "警告", "错误", "危险"]
    时间戳14位过滤 = 20110623070000
    标签列表过滤 = [正则类(".*")]
    # 输出路径 = os.path.join(os.path.expanduser("~"), "Desktop") + "\\bxroot.log"
    文件输出路径 = None
    内容长度 = 1000
    缩进情况 = 0
    输入流对象 = sys.stdin
    输出流对象 = sys.stdout


class 日志类:

    @staticmethod
    def 开启(
        级别列表过滤=["调试", "信息", "警告", "错误", "危险"],
        时间戳14位过滤=20110623070000,
        标签列表过滤=[正则类(".*")],
        文件输出路径=None,
        # 文件输出形式: Literal["追加", "覆盖"] = "追加",
        内容长度=1000,
        是否开启=True,
    ):
        配置.是否开启 = 是否开启
        配置.开启状态临时控制["顶层函数"] = True
        配置.级别列表过滤 = 级别列表过滤
        配置.时间戳14位过滤 = 时间戳14位过滤
        配置.标签列表过滤 = 标签列表过滤
        配置.文件输出路径 = 文件输出路径  # type: ignore
        配置.内容长度 = 内容长度
        # logging.basicConfig(level=配置._级别字典[级别], filename=文件输出路径, filemode=配置._文件输出形式字典[文件输出形式], format=显示格式, datefmt=时间格式)

    @staticmethod
    def 关闭():
        配置.是否开启 = False
        配置.开启状态临时控制["顶层函数"] = False

    @staticmethod
    def 临时开启日志():
        from bxpy.元数据包 import 调用元数据类

        上一栈帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(调用元数据类.调用栈帧获取_当前())
        ID = str(id(上一栈帧))
        函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一栈帧)
        配置.开启状态临时控制[函数名称 + ID] = True
        return

    @staticmethod
    def 临时关闭日志():
        from bxpy.元数据包 import 调用元数据类

        上一栈帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(调用元数据类.调用栈帧获取_当前())
        ID = str(id(上一栈帧))
        函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一栈帧)
        配置.开启状态临时控制[函数名称 + ID] = False
        return

    @staticmethod
    def 输出(级别="调试", 内容="", 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None, 是否暂停=False, 输出流对象="默认", 输入流对象="默认"):
        from bxpy.基本对象包 import 模块加载
        from bxpy.元数据包 import 调用元数据类

        模块加载("colorama")
        import colorama
        from bxpy.基本对象包 import 表类

        colorama.init()
        _级别颜色映射 = {
            "调试": colorama.Fore.GREEN,
            "信息": colorama.Fore.CYAN,
            "警告": colorama.Fore.YELLOW,
            "错误": colorama.Fore.RED,
            "危险": colorama.Fore.MAGENTA + colorama.Style.BRIGHT,
        }
        时间戳14位过滤 = 配置.时间戳14位过滤 if 时间戳14位过滤 is None else 时间戳14位过滤
        文件输出路径 = 配置.文件输出路径 if 文件输出路径 is None else 文件输出路径
        内容长度 = 配置.内容长度 if 内容长度 is None else 内容长度
        # 是否开启 = 配置.是否开启 if 是否开启 is None else 是否开启
        当前帧 = 调用元数据类.调用栈帧获取_当前()
        上一帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(当前帧)
        上一帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(上一帧)
        函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一帧)
        函数ID = str(id(上一帧))
        函数名称和ID = 函数名称 + 函数ID
        from bxpy.基本对象包 import 字典类

        while not 字典类.是否存在键(配置.开启状态临时控制, [函数名称和ID]):
            try:
                上一帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(上一帧)
                函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一帧)
                函数ID = str(id(上一帧))
                函数名称和ID = 函数名称 + 函数ID
            except Exception as e:
                配置.开启状态临时控制[函数名称和ID] = 配置.开启状态临时控制["顶层函数"]
                # 日志类.输出调试(f"[日志类]一直无法在[配置.开启状态临时控制]中找到[函数名称和ID]，最后的[函数名称和ID]是[{函数名称和ID}]。")
                break

        # 函数名称和ID = 函数名称 if 函数名称 == "<module>" else 函数名称和ID

        if 是否开启 == False or (配置.开启状态临时控制[函数名称和ID] == False and 是否开启 == None) or (配置.是否开启 == False and 配置.开启状态临时控制[函数名称和ID] == None and 是否开启 == None):
            # 全局关的情况下，临时开则开，临时关则关，临时无则关
            # 全局开的情况下，临时开则开，临时关则关，临时无则开
            return

        if 级别 not in 配置.级别列表过滤:
            return
        if 时间戳14位过滤 < 配置.时间戳14位过滤:
            return
        if 标签列表:
            标签判断 = [标签 for 标签 in 标签列表 if 表类.是否包含项(配置.标签列表过滤, 标签)]  # type: ignore
            if len(标签判断) == 0:
                return None

        from bxpy.时间包 import 时间类, 时间格式化映射
        from bxpy.元数据包 import 调用元数据类

        当前时间 = 时间类.转换_到格式化字符串(时间类.时间创建_当前(), rf"{时间格式化映射.年完整}-{时间格式化映射.月}-{时间格式化映射.日},{时间格式化映射.时}:{时间格式化映射.分}:{时间格式化映射.秒}")

        配置.缩进情况 += 前缩进差值

        函数树 = 调用元数据类.调用栈帧获取_所有()[2:]
        # 函数树 = 函数树[3:]
        函数树内容 = ""
        for x in 函数树:
            行号 = 调用元数据类.调用栈帧.属性获取_行号(x)
            函数树内容 = 函数树内容 + "[" + 调用元数据类.调用栈帧.属性获取_函数名称(x) + f"({行号})]<"
        函数树内容 = 函数树内容[0:-1]
        if len(函数树内容) > 100:
            函数树内容 = 函数树内容[0:100] + "..."
        if len(内容) > 内容长度 and 内容长度 != -1:
            内容 = 内容[0:内容长度] + "..."
        内容 = "|" + 级别 + "|" + 当前时间 + "|" + 函数树内容 + "\n|->" + "  " * 配置.缩进情况 + str(内容)
        配置.缩进情况 += 后缩进差值

        if 是否暂停:
            内容 = 内容 + "，按任意键继续..."
        内容带颜色 = _级别颜色映射[级别] + 内容 + colorama.Style.RESET_ALL  # type: ignore
        print(f"内容1:{内容}")
        if 文件输出路径:
            from bxpy.路径包 import 路径类

            内容加回车 = 内容 + "\n" + "\n"
            if not 路径类.是否存在(文件输出路径):
                路径类.新增文件(文件输出路径)
            with open(file=文件输出路径, mode="a", encoding="utf-8") as f:
                f.write(内容加回车)
        print(f"内容2:{内容}")
        输入流对象raw = 配置.输入流对象 if 输入流对象 == "默认" else 输入流对象
        输出流对象raw = 配置.输出流对象 if 输出流对象 == "默认" else 输出流对象
        from bxpy.基本对象包 import 输入 as 基本对象包输入, 输出 as 基本对象包输出

        if 是否暂停:
            if 输出流对象raw == sys.stdout:
                基本对象包输入(内容带颜色, 输出流对象raw, 输入流对象raw)  # type: ignore
            else:
                基本对象包输入(内容, 输出流对象raw, 输入流对象raw)  # type: ignore
        else:
            if 输出流对象raw == sys.stdout:
                基本对象包输出(内容带颜色, 输出流对象=输出流对象raw)  # type: ignore
            else:
                基本对象包输出(内容, 输出流对象=输出流对象raw)  # type: ignore

        return 内容

    @staticmethod
    def 输出控制台(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=True):
        日志类.输出(级别="调试", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)
        # logging.debug(内容)

    @staticmethod
    def 输出调试(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None):
        日志类.输出(级别="调试", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)

    @staticmethod
    def 输出调试并暂停(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None, 是否暂停=True):
        日志类.输出(级别="调试", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启, 是否暂停=是否暂停)

    @staticmethod
    def 输出信息(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None):
        日志类.输出(级别="信息", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)

    @staticmethod
    def 输出警告(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None):
        日志类.输出(级别="警告", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)

    @staticmethod
    def 输出错误(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None):
        日志类.输出(级别="错误", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)

    @staticmethod
    def 输出危险(内容, 前缩进差值=0, 后缩进差值=0, 标签列表=["默认"], 时间戳14位过滤=None, 文件输出路径=None, 内容长度=None, 是否开启=None):
        日志类.输出(级别="危险", 内容=内容, 前缩进差值=前缩进差值, 后缩进差值=后缩进差值, 标签列表=标签列表, 时间戳14位过滤=时间戳14位过滤, 文件输出路径=文件输出路径, 内容长度=内容长度, 是否开启=是否开启)

    @staticmethod
    def 属性获取_当前函数内日志开启状态():
        from bxpy.元数据包 import 调用元数据类

        当前帧 = 调用元数据类.调用栈帧获取_当前()
        上一帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(当前帧)
        函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一帧)
        函数ID = str(id(上一帧))
        函数名称和ID = 函数名称 + 函数ID
        from bxpy.基本对象包 import 字典类

        while not 字典类.是否存在键(配置.开启状态临时控制, [函数名称和ID]):
            try:
                上一帧 = 调用元数据类.调用栈帧.上一级调用栈帧获取(上一帧)
                函数名称 = 调用元数据类.调用栈帧.属性获取_函数名称(上一帧)
                函数ID = str(id(上一帧))
                函数名称和ID = 函数名称 + 函数ID
            except Exception as e:
                配置.开启状态临时控制[函数名称和ID] = 配置.开启状态临时控制["顶层函数"]
                日志类.输出调试(f"[日志类]一直无法在[配置.开启状态临时控制]中找到[函数名称和ID]，最后的[函数名称和ID]是[{函数名称和ID}]。")
                break
        # 函数名称和ID = "<module>" if 函数名称 == "<module>" else 函数名称和ID

        if 配置.开启状态临时控制[函数名称和ID] == False or (配置.是否开启 == False and 配置.开启状态临时控制[函数名称和ID] == None):
            # 全局关的情况下，临时开则开，临时关则关，临时无则关
            # 全局开的情况下，临时开则开，临时关则关，临时无则开
            return False

        return True


if __name__ == "__main__":
    # test()
    # 日志类.开启()

    # 日志类.输出控制台("123")
    # 日志类.开启()
    日志类.临时开启日志()
    日志类.输出调试("123")
    # 日志类.输出信息("123")
    # 日志类.输出警告("123444")
    # 日志类.输出错误("123")
    # 日志类.输出危险("123")
    pass
