# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-10-07 11:55:33
"""
# import arcpy
# from .ABCCADDEFG2 import ABCCADDEFG2
# from .ABCCADDEFG2 import ABCCADDEFG2
# from .ABCDEF1 import ABCDEF1
# from sys import argv
import bxarcpy
from bxpy import 时间


def 被区域分割(
    工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb",
    输入要素名称="DIST_用地规划图",
    区域要素名称="JX_街区范围线",
    字段映射列表=[["所属街区", "街区编号"]],
    输出要素名称=r"DIST_用地规划图_计算所属街区街坊",
):
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.配置.是否覆盖输出要素 = True

        用地规划图 = bxarcpy.要素类.要素读取_通过名称(输入要素名称)
        区域要素 = bxarcpy.要素类.要素读取_通过名称(区域要素名称)

        联合后要素 = 用地规划图.要素创建_通过联合([区域要素.名称]).要素创建_通过多部件至单部件().要素几何修复()
        应填色但是没填的区域要素 = bxarcpy.要素类.要素创建_通过名称(模板=联合后要素.名称)
        时间.等待(1)
        不应填色但是填色的区域要素 = bxarcpy.要素类.要素创建_通过名称(模板=联合后要素.名称)
        时间.等待(1)
        被范围线分割的要素 = bxarcpy.要素类.要素创建_通过名称(模板=联合后要素.名称)
        字段列表 = 联合后要素.字段名称列表获取()
        # print(字段列表)
        if "OBJECTID" in 字段列表:
            字段列表.remove("OBJECTID")
        if "Shape" in 字段列表:
            字段列表.remove("Shape")
        if "Shape_Length" in 字段列表:
            字段列表.remove("Shape_Length")
        if "Shape_Area" in 字段列表:
            字段列表.remove("Shape_Area")
        字段列表.insert(0, "_形状")

        元素FID列表 = []
        元素属性列表 = []
        分割要素已插入列表 = []
        with bxarcpy.游标类.游标创建_通过名称("查找", 联合后要素.名称, 字段列表) as 联合后要素游标:
            with bxarcpy.游标类.游标创建_通过名称("插入", 应填色但是没填的区域要素.名称, 字段列表) as 应填色但是没填的区域要素游标:
                with bxarcpy.游标类.游标创建_通过名称("插入", 不应填色但是填色的区域要素.名称, 字段列表) as 不应填色但是填色的区域要素游标:
                    with bxarcpy.游标类.游标创建_通过名称("插入", 被范围线分割的要素.名称, 字段列表) as 被范围线分割的要素游标:
                        for x in 联合后要素游标:
                            for k, v, i in zip(字段列表, x, range(len(字段列表))):
                                if k == f"FID_{用地规划图.名称}" and v == -1:
                                    应填色但是没填的区域要素游标.行插入(x)
                                if k == f"FID_{区域要素.名称}" and v == -1:
                                    不应填色但是填色的区域要素游标.行插入(x)
                                if k == f"FID_{用地规划图.名称}" and v in 元素FID列表 and v != -1:
                                    if v in 分割要素已插入列表:
                                        被范围线分割的要素游标.行插入(x)
                                    else:
                                        被范围线分割的要素游标.行插入(x)
                                        被范围线分割的要素游标.行插入(元素属性列表[元素FID列表.index(v)])
                                        分割要素已插入列表.append(v)
                                if k == f"FID_{用地规划图.名称}":
                                    元素FID列表.append(v)
                                    元素属性列表.append(x)
        for x in 字段映射列表:
            联合后要素.字段添加(x[0]).字段计算(x[0], f"!{x[1]}!")
        应填色但是没填的区域要素.要素创建_通过复制并重命名重名要素("AA_应填色但是没填的区域要素")
        不应填色但是填色的区域要素.要素创建_通过复制并重命名重名要素("AA_不应填色但是填色的区域要素")
        被范围线分割的要素.要素创建_通过复制并重命名重名要素("AA_被范围线分割的要素")
        需要删除的字段列表 = [f"FID_{用地规划图.名称}", f"FID_{区域要素.名称}", "ORIG_FID"]
        需要删除的字段列表.extend([x[1] for x in 字段映射列表])
        联合后要素.字段删除(需要删除的字段列表).要素创建_通过复制并重命名重名要素(输出要素名称)

        # 街区范围线要素 = 街区范围线要素.要素创建_通过复制()
        # 街区范围线要素.字段删除(保留字段名称列表=["街区编号", "街区主导属性"])
        # 连接后要素 = 用地规划图.要素创建_通过空间连接(街区范围线要素.名称, 连接方式="内点在连接要素内")
        # 连接后要素.字段计算("所属街区", "!街区编号!")
        # 连接后要素.字段删除(["街区编号"])

        # 街坊范围线要素 = 街坊范围线要素.要素创建_通过复制()
        # 街坊范围线要素.字段删除(保留字段名称列表=["街坊编号"])
        # 连接后要素 = 连接后要素.要素创建_通过空间连接(街坊范围线要素.名称, 连接方式="内点在连接要素内")
        # 连接后要素.字段计算("所属街坊", "!街坊编号!")
        # 连接后要素.字段删除(["街坊编号"])

        # 连接后要素.要素创建_通过复制并重命名重名要素(输出要素名称)


def 计算用地构成(
    工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb",
    输入要素名称="DIST_用地规划图",
):
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.配置.是否覆盖输出要素 = True
        from bxpandas import 类 as pd

        a = pd.转换.excel转数据框架(r"C:\Users\beixiao\AppConfig\Bxcad\Config\设计配置\设计参数\地块_指标测算表.xlsx", 要读取的列=(3, 4, 86), 列数据类型={"地块性质": str, "地类标准": str, "用地构成": str})
        用地构成映射表 = pd.转换.数据框架转json(a)

        输入要素 = bxarcpy.要素类.要素读取_通过名称(输入要素名称)
        输入要素 = 输入要素.要素创建_通过复制()
        输入要素.字段添加("用地构成")
        with bxarcpy.游标类.游标创建_通过名称("更新", 输入要素.名称, ["地类编号", "用地构成"]) as 游标:
            for x in 游标:
                对应的对象列表 = [用地构成映射表1 for 用地构成映射表1 in 用地构成映射表 if 用地构成映射表1["地块性质"] == x[0] and 用地构成映射表1["地类标准"] == "国空"]
                if 对应的对象列表:
                    x["用地构成"] = 对应的对象列表[0]["用地构成"]
                    游标.行更新(x)
                else:
                    print(f"未找到该 地类编号 对应的 用地构成：{x['地类编号']}")
        输入要素.要素创建_通过复制并重命名重名要素(输入要素名称)


if __name__ == "__main__":
    被区域分割(
        工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb",
        输入要素名称="DIST_用地规划图",
        区域要素名称="JX_街坊范围线",
        字段映射列表=[["所属街坊", "街坊编号"]],
        输出要素名称=r"DIST_用地规划图",
    )
    被区域分割(
        工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb",
        输入要素名称="DIST_用地规划图",
        区域要素名称="JX_街区范围线",
        字段映射列表=[["所属街区", "街区编号"]],
        输出要素名称=r"DIST_用地规划图",
    )
    计算用地构成(
        工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb",
        输入要素名称="DIST_用地规划图",
    )
    被区域分割(
        工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb",
        输入要素名称="DIST_用地规划图",
        区域要素名称="JX_工业片区范围线",
        字段映射列表=[["所属工业片区", "区域编号"]],
        输出要素名称=r"DIST_用地规划图",
    )
