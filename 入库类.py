import bxarcpy


def 入库_村庄建设边界(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 村庄建设边界要素名称="KZX_村庄建设边界", 单元名称="临江单元", 批复时间="", 批复文号="", 单元编号="QT12"):
    with bxarcpy.类.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.类.配置.是否覆盖输出要素 = True

        村庄建设边界要素 = bxarcpy.要素类.要素读取_通过名称(村庄建设边界要素名称)
        村庄建设边界要素 = 村庄建设边界要素.要素创建_通过复制()

        融合后要素 = 村庄建设边界要素.要素创建_通过融合(None).要素创建_通过多部件至单部件().要素几何修复()
        融合后要素.字段添加("建设边界编号")
        需操作的字段名称列表 = ["建设边界编号"]
        编号 = 1
        with bxarcpy.游标类.游标创建_通过名称("更新", 融合后要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                x["建设边界编号"] = 单元编号 + "-" + "JSBJ" + str(编号).zfill(2)
                编号 += 1
                游标.行更新(x)
        融合后要素.字段删除(["ORIG_FID", "ORIG_FID_1"])

        村庄建设边界要素 = 融合后要素.要素创建_通过复制并重命名重名要素("XG_JSBJ")
        村庄建设边界要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        村庄建设边界要素.字段添加("PFSJ", "日期", None, "批复时间").字段计算("PFSJ", f"'{批复时间}'")
        村庄建设边界要素.字段添加("PFWH", "字符串", 50, "批复文号").字段计算("PFWH", f"'{批复文号}'")
        村庄建设边界要素.字段添加("JSBM", "字符串", 20, "建设边界编码").字段计算("JSBM", "!建设边界编号!")
        村庄建设边界要素.字段添加("JSMJ", "双精度", 50, "建设边界面积").字段计算("JSMJ", "round(!Shape_Area!/10000, 2)")

        村庄建设边界要素.字段添加("GKYQ", "字符串", 255, "管控要求")
        需操作的字段名称列表 = ["GKYQ"]
        with bxarcpy.游标类.游标创建_通过名称("更新", 村庄建设边界要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                x["GKYQ"] = "按照“避让底线、引导集聚、单元统筹、预留弹性、界限清晰”的原则进行控制，综合考虑村庄分级分类与建设用地指标安排，引导乡村空间适度集聚"
                游标.行更新(x)

        村庄建设边界要素.字段添加("BZ", "字符串", 255, "备注")

        村庄建设边界要素.字段删除(["建设边界编号"])


def 入库_工业片区(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 区域要素名称="JX_工业片区范围线", 单元名称="临江单元", 地块要素名称="DIST_用地规划图", 设施要素名称="SS_配套设施"):
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        # To allow overwriting outputs change overwriteOutput option to True.
        bxarcpy.配置.是否覆盖输出要素 = True
        区域要素 = bxarcpy.要素类.要素读取_通过名称(区域要素名称)
        区域要素 = 区域要素.要素创建_通过复制并重命名重名要素("XG_GYPQ")
        区域要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        区域要素.字段添加("PQBM", "字符串", 20, "工业片区编码").字段计算("PQBM", "!区域编号!")
        区域要素.字段添加("PQMC", "字符串", 50, "工业片区名称").字段计算("PQMC", "!区域名称!")
        区域要素.字段添加("PQMJ", "双精度", 50, "片区面积").字段计算("PQMJ", "round(!Shape_Area!/10000, 2)")

        需操作的字段名称列表 = ["地类编号", "所属工业片区", "Shape_Area", "地块建筑面积", "工业建筑面积"]
        统计数据 = {}
        地块要素 = bxarcpy.要素类.要素读取_通过名称(地块要素名称)
        with bxarcpy.游标类.游标创建_通过名称("查找", 地块要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["所属工业片区"] != "":
                    if x["所属工业片区"] not in 统计数据:
                        统计数据[x["所属工业片区"]] = {}
                    from bxpy import 转换, 字

                    if "总工业用地面积" not in 统计数据[x[f"所属工业片区"]]:
                        统计数据[x["所属工业片区"]]["总工业用地面积"] = 0

                    if "总工业建筑面积" not in 统计数据[x[f"所属工业片区"]]:
                        统计数据[x["所属工业片区"]]["总工业建筑面积"] = 0

                    if 字.匹配正则(x["地类编号"], "^(10|11).*"):
                        统计数据[x["所属工业片区"]]["总工业用地面积"] += 转换.转浮(x["Shape_Area"])
                        统计数据[x["所属工业片区"]]["总工业建筑面积"] += 转换.转浮(x["工业建筑面积"])

        区域要素.字段添加("YDZL", "双精度", 50, f"工业用地总量")
        区域要素.字段添加("JZZL", "双精度", 50, f"工业建筑总量")

        需操作的字段名称列表 = ["区域编号", "YDZL", "JZZL"]
        with bxarcpy.游标类.游标创建_通过名称("更新", 区域要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["区域编号"] in 统计数据:
                    x["YDZL"] = round(统计数据[x["区域编号"]]["总工业用地面积"] / 10000, 2)
                    x["JZZL"] = round(统计数据[x["区域编号"]]["总工业建筑面积"] / 10000, 2)
                游标.行更新(x)

        区域要素.字段添加("ZDGN", "字符串", 255, "产业主导功能").字段计算("ZDGN", "!区域主导属性!")

        需操作的字段名称列表 = ["设施类型", "设施名称", "设施数量", "设施规模", "所属工业片区"]
        统计数据 = {}
        设施要素 = bxarcpy.要素类.要素读取_通过名称(设施要素名称)
        with bxarcpy.游标类.游标创建_通过名称("查找", 设施要素.名称, 需操作的字段名称列表) as 游标:
            from bxpy import 转换

            for x in 游标:
                if x["所属工业片区"] not in ["", None]:
                    if x["所属工业片区"] not in 统计数据:
                        统计数据[x["所属工业片区"]] = {}
                    if x["设施类型"] in ["教育", "商服", "社会福利", "社区治理", "生态环境", "体育", "文化", "医疗"]:
                        if "配套设施汇总" not in 统计数据[x["所属工业片区"]]:
                            统计数据[x["所属工业片区"]]["配套设施汇总"] = {}
                        if x["设施名称"] not in 统计数据[x["所属工业片区"]]["配套设施汇总"]:
                            统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]] = [转换.转浮(x["设施数量"]), x["设施规模"]]
                        else:
                            统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]][0] += 转换.转浮(x["设施数量"])
                            if x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]][1] not in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]][1] += "、" + x["设施规模"]
                            elif x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]][1] in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["配套设施汇总"][x["设施名称"]][1] += x["设施规模"]
                    elif x["设施类型"] in ["市政交通"]:
                        if "交通设施汇总" not in 统计数据[x["所属工业片区"]]:
                            统计数据[x["所属工业片区"]]["交通设施汇总"] = {}
                        if x["设施名称"] not in 统计数据[x["所属工业片区"]]["交通设施汇总"]:
                            统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]] = [转换.转浮(x["设施数量"]), x["设施规模"]]
                        else:
                            统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]][0] += 转换.转浮(x["设施数量"])
                            if x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]][1] not in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]][1] += "、" + x["设施规模"]
                            elif x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]][1] in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["交通设施汇总"][x["设施名称"]][1] += x["设施规模"]
                    elif x["设施类型"] in ["市政防灾", "市政公用", "市政环卫", "市政人防", "市政消防"]:
                        if "市政设施汇总" not in 统计数据[x["所属工业片区"]]:
                            统计数据[x["所属工业片区"]]["市政设施汇总"] = {}
                        if x["设施名称"] not in 统计数据[x["所属工业片区"]]["市政设施汇总"]:
                            统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]] = [转换.转浮(x["设施数量"]), x["设施规模"]]
                        else:
                            统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]][0] += 转换.转浮(x["设施数量"])
                            if x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]][1] not in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]][1] += "、" + x["设施规模"]
                            elif x["设施规模"] not in ["", " ", None] and 统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]][1] in ["", " ", None]:
                                统计数据[x["所属工业片区"]]["市政设施汇总"][x["设施名称"]][1] += x["设施规模"]

        区域要素.字段添加("PTSS", "字符串", 255, "配套设施")
        区域要素.字段添加("PTSS2", "字符串", 255, "配套设施2")
        区域要素.字段添加("PTSS3", "字符串", 255, "配套设施3")
        区域要素.字段添加("JTSS", "字符串", 255, "道路与交通设施")
        区域要素.字段添加("JTSS2", "字符串", 255, "道路与交通设施2")
        区域要素.字段添加("SZSS", "字符串", 255, "市政设施")
        区域要素.字段添加("SZSS2", "字符串", 255, "市政设施2")
        区域要素.字段添加("SZSS3", "字符串", 255, "市政设施3")

        需操作的字段名称列表 = ["区域编号", "PTSS", "PTSS2", "PTSS3", "JTSS", "JTSS2", "SZSS", "SZSS2", "SZSS3"]
        配套设施超510flag = False
        配套设施超255flag = False
        交通设施超255flag = False
        市政设施超510flag = False
        市政设施超255flag = False

        with bxarcpy.游标类.游标创建_通过名称("更新", 区域要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["区域编号"] in 统计数据:
                    if "配套设施汇总" in 统计数据[x["区域编号"]]:
                        配套设施汇总字符串 = "" + "刚性管控：配置"
                        # print(统计数据[x["区域编号"]]["配套设施汇总"])
                        for k, v in 统计数据[x["区域编号"]]["配套设施汇总"].items():
                            if v[1] in ["", " ", None]:
                                配套设施汇总字符串 += k + str(int(v[0])) + "处；"
                            else:
                                配套设施汇总字符串 += k + str(int(v[0])) + "处，规模分别为" + v[1] + "；"
                        配套设施汇总字符串 = 配套设施汇总字符串[0:-1]
                        if len(配套设施汇总字符串) > 510:
                            x["PTSS"] = 配套设施汇总字符串[0:255]
                            x["PTSS2"] = 配套设施汇总字符串[255:510]
                            x["PTSS3"] = 配套设施汇总字符串[510:]
                            配套设施超510flag = True
                            配套设施超255flag = True
                        elif len(配套设施汇总字符串) > 255:
                            x["PTSS"] = 配套设施汇总字符串[0:255]
                            x["PTSS2"] = 配套设施汇总字符串[255:]
                            配套设施超255flag = True
                        else:
                            x["PTSS"] = 配套设施汇总字符串

                    if "交通设施汇总" in 统计数据[x["区域编号"]]:
                        交通设施汇总字符串 = "" + "刚性管控：配置"
                        for k, v in 统计数据[x["区域编号"]]["交通设施汇总"].items():
                            if v[1] in ["", " ", None]:
                                交通设施汇总字符串 += k + str(int(v[0])) + "处；"
                            else:
                                交通设施汇总字符串 += k + str(int(v[0])) + "处，规模分别为" + v[1] + "；"
                        交通设施汇总字符串 = 交通设施汇总字符串[0:-1]
                        if len(交通设施汇总字符串) > 255:
                            x["JTSS"] = 交通设施汇总字符串[0:255]
                            x["JTSS2"] = 交通设施汇总字符串[255:]
                            交通设施超255flag = True
                        else:
                            x["JTSS"] = 交通设施汇总字符串

                    if "市政设施汇总" in 统计数据[x["区域编号"]]:
                        市政设施汇总字符串 = "" + "刚性管控：配置"
                        for k, v in 统计数据[x["区域编号"]]["市政设施汇总"].items():
                            if v[1] in ["", " ", None]:
                                市政设施汇总字符串 += k + str(int(v[0])) + "处；"
                            else:
                                市政设施汇总字符串 += k + str(int(v[0])) + "处，规模分别为" + v[1] + "；"
                        市政设施汇总字符串 = 市政设施汇总字符串[0:-1]
                        if len(市政设施汇总字符串) > 510:
                            x["SZSS"] = 市政设施汇总字符串[0:255]
                            x["SZSS2"] = 市政设施汇总字符串[255:510]
                            x["SZSS3"] = 市政设施汇总字符串[510:]
                            市政设施超510flag = True
                            市政设施超255flag = True
                        elif len(市政设施汇总字符串) > 255:
                            x["SZSS"] = 市政设施汇总字符串[0:255]
                            x["SZSS2"] = 市政设施汇总字符串[255:]
                            市政设施超255flag = True
                        else:
                            x["SZSS"] = 市政设施汇总字符串

                游标.行更新(x)

        # 街区范围要素.字段添加("规划编制单元编号", "字符串", 20, "规划编制单元编号").字段计算("规划编制单元编号", 单元编号)
        # 街区范围要素.字段添加("批复时间", "日期", None, "批复时间").字段计算("批复时间", 批复时间)
        # 街区范围要素.字段添加("批复文号", "字符串", 50, "批复文号").字段计算("批复文号", 批复文号)
        # 街区范围要素.字段添加("编制单位", "字符串", 255, "编制单位").字段计算("编制单位", 编制单位)

        # 街区范围要素.字段添加("单元功能", "字符串", 255, "单元功能").字段计算("单元功能", 单元功能)
        # 街区范围要素.字段添加("人口规模", "双精度", 50, "人口规模").字段计算("人口规模", 人口规模)
        # 街区范围要素.字段添加("备注", "字符串", 255, "备注")
        区域要素.字段添加("BZ", "字符串", 255, "备注")

        区域要素.字段删除([f"区域编号"])
        区域要素.字段删除([f"区域名称"])
        区域要素.字段删除([f"区域主导属性"])

        if 配套设施超510flag is not True:
            区域要素.字段删除(["PTSS3"])
        if 配套设施超255flag is not True:
            区域要素.字段删除(["PTSS2"])

        if 交通设施超255flag is not True:
            区域要素.字段删除(["JTSS2"])

        if 市政设施超510flag is not True:
            区域要素.字段删除(["SZSS3"])
        if 市政设施超255flag is not True:
            区域要素.字段删除(["SZSS2"])


def 入库_局调入库(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 输入要素="\\AA_规划工业用地"):  # 用地_格式化_修改为入库格式
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        # To allow overwriting outputs change overwriteOutput option to True.
        bxarcpy.配置.是否覆盖输出要素 = True
        # arcpy.env.overwriteOutput = False

        删除字段 = ["Entity", "Color", "Linetype", "Elevation", "LineWt", "RefName", "mj", "FID_YJJBNTBHTB", "BSM", "YSDM", "XZQDM", "XZQMC", "YJJBNTTBBH", "TBBH", "DLBM", "DLMC", "QSXZ", "QSDWDM", "QSDWMC", "ZLDWDM", "ZLDWMC", "YJJBNTTBMJ", "KCDLBM", "KCXS", "KCMJ", "YJJBNTMJ", "GDLX", "GDPDJB", "GGBZL", "TBXHDM", "TBXHMC", "ZZSXDM", "ZZSXMC", "GDDB", "GDDJ", "ZLFLDM", "FRDBS", "SJNF", "CFZR", "ZMC", "ZZRR", "ZRRZJHM", "ZRRMC", "LXDH", "JZDZ", "BHKSSJ", "BHJSSJ", "SJBH", "SJMC", "ZRSYX", "BZ", "WDGD", "SFWYYJJBNT", "FWDGDHRLY", "FID_规划范围线_2303070850", "序号", "组名", "村名称", "街道", "二调耕", "三调耕", "三调恢", "二调永", "三调稳", "Shape_Leng", "FID_4去除", "名称", "镇街名称", "a", "ORIG_FID", "三调地类编号", "三调地类名称", "CZCSXM", "Layer", "地块性质", "实体类型", "GKXZ", "FID_DLTB", "TBYBH", "单元名", "地块性", "dkbmgk"]

        地类转换路径 = "C:\\Users\\common\\AppConfig\\ArcGIS\\020.地类转换\\地类转换_国空与城乡地类转换.xls\\Sheet1$"

        # Process: 添加字段 (4) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输入要素, 字段名称="GHDY", 字段类型="字符串", 字段长度=50, 字段别称="规划编制单元名称")

        # Process: 计算字段 (4) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="GHDY", 表达式="'临江单元'", 字段类型="字符串")

        # Process: 添加字段 (2) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="PFSJ", 字段类型="日期", 字段长度=100, 字段别称="批复时间")

        # Process: 添加字段 (5) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="YDXZMC", 字段类型="字符串", 字段长度=50, 字段别称="用地性质名称")

        # Process: 计算字段 (5) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="YDXZMC", 表达式="!性质名称!", 字段类型="字符串")

        # Process: 添加字段 (7) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="PFWH", 字段类型="字符串", 字段长度=50, 字段别称="批复文号")

        # Process: 添加字段 (8) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="DKBH", 字段类型="字符串", 字段长度=50, 字段别称="地块编号")

        # Process: 计算字段 (2) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="DKBH", 表达式="!地块编号!", 字段类型="字符串")

        # Process: 添加字段 (9) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="MJ", 字段类型="双精度", 字段长度=10, 字段别称="面积")

        # Process: 计算字段 (7) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="MJ", 表达式="!面积公顷!", 字段类型="字符串")

        # Process: 添加字段 (10) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="RJL", 字段类型="单精度", 字段长度=10, 字段别称="容积率")

        # Process: 计算字段 (8) (计算字段) (management)
        容积率计算 = """
        def test(x):
            if x:
                return float(x)
        """
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="RJL", 表达式="test(!容积率!)", 字段类型="字符串", 代码块=容积率计算)

        # Process: 添加字段 (11) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="RJL_XX", 字段类型="单精度", 字段长度=10, 字段别称="容积率下限")

        # Process: 添加字段 (12) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="LDL", 字段类型="单精度", 字段长度=10, 字段别称="绿地率")

        # Process: 计算字段 (9) (计算字段) (management)
        绿地率计算 = """
        def test(x):
            if x:
                return float(x)
        """
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="LDL", 表达式="test(!绿地率!)", 字段类型="字符串", 代码块=绿地率计算)

        # Process: 添加字段 (13) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="LDL_SX", 字段类型="单精度", 字段长度=10, 字段别称="绿地率上限")

        # Process: 添加字段 (14) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JZMD", 字段类型="单精度", 字段长度=10, 字段别称="建筑密度")

        # Process: 计算字段 (10) (计算字段) (management)
        建筑密度计算 = """
        def test(x):
            if x and x != "方案阶段名称":
                return float(x)
        """
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="JZMD", 表达式="test(!建筑密度!)", 字段类型="字符串", 代码块=建筑密度计算)

        # Process: 添加字段 (15) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JZMD_XX", 字段类型="单精度", 字段长度=10, 字段别称="建筑密度下限")

        # Process: 添加字段 (16) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JZXG", 字段类型="单精度", 字段长度=10, 字段别称="建筑限高")

        # Process: 计算字段 (11) (计算字段) (management)
        建筑限高计算 = """
        def test(x):
            x = x.split('-')[0]
            if x:
                return float(x)
        """
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="JZXG", 表达式="test(!建筑限高!)", 字段类型="字符串", 代码块=建筑限高计算)

        # Process: 添加字段 (17) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JZXG_XX", 字段类型="单精度", 字段长度=10, 字段别称="建筑限高下限")

        # Process: 添加字段 (18) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JDCW", 字段类型="短整型", 字段长度=10, 字段别称="机动车位")

        # Process: 添加字段 (19) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="JDCW_SX", 字段类型="短整型", 字段长度=10, 字段别称="机动车位上限")

        # Process: 添加字段 (20) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="FJDCW", 字段类型="短整型", 字段长度=10, 字段别称="非机动车位")

        # Process: 添加字段 (21) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="FJDCW_SX", 字段类型="短整型", 字段长度=10, 字段别称="非机动车位上限")

        # Process: 添加字段 (22) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="TDM", 字段类型="字符串", 字段长度=50, 字段别称="土地码")

        # Process: 添加字段 (23) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="BZ", 字段类型="字符串", 字段长度=255, 字段别称="备注")

        # Process: 计算字段 (12) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="BZ", 表达式="!备注说明!", 字段类型="字符串")

        # Process: 添加字段 (3) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="YDXZ_N", 字段类型="字符串", 字段长度=50, 字段别称="用地性质代码_新地类")

        # Process: 计算字段 (3) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="YDXZ_N", 表达式="!地类编号!", 字段类型="字符串")

        # Process: 添加字段 (24) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="YDXZ", 字段类型="字符串", 字段长度=50, 字段别称="用地性质代码")

        # Process: 添加连接 (添加连接) (management)
        输出要素 = bxarcpy.数据管理.连接创建(输入要素=输出要素, 输入要素连接字段="YDXZ_N", 连接要素=地类转换路径, 连接要素连接字段="新地类编号")

        # Process: 计算字段 (14) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="YDXZ", 表达式="!Sheet1$.旧地类编号!", 字段类型="字符串")

        # Process: 移除连接 (移除连接) (management)
        bxarcpy.数据管理.连接取消(输入要素=输出要素, 连接要素=地类转换路径)

        # Process: 添加字段 (6) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="ZYDXZ_N", 字段类型="字符串", 字段长度=10, 字段别称="主用地性质代码_新地类")

        # Process: 计算字段 (6) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="ZYDXZ_N", 表达式='!地类编号!.split("(")[0].split("/")[0]', 字段类型="字符串")

        # Process: 添加字段 (25) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="ZYDXZ", 字段类型="字符串", 字段长度=10, 字段别称="主用地性质代码")

        # Process: 添加连接 (添加连接) (management)
        输出要素 = bxarcpy.数据管理.连接创建(输入要素=输出要素, 输入要素连接字段="ZYDXZ_N", 连接要素=地类转换路径, 连接要素连接字段="新地类编号")

        # Process: 计算字段 (14) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="ZYDXZ", 表达式="!Sheet1$.旧地类编号!", 字段类型="字符串")

        # Process: 移除连接 (移除连接) (management)
        bxarcpy.数据管理.连接取消(输入要素=输出要素, 连接要素=地类转换路径)

        # Process: 添加字段 (26) (添加字段) (management)
        输出要素 = bxarcpy.数据管理.字段添加(输入要素=输出要素, 字段名称="TDLX", 字段类型="字符串", 字段长度=255, 字段别称="土地类型")

        # Process: 添加连接 (3) (添加连接) (management)
        输出要素 = bxarcpy.数据管理.连接创建(输入要素=输出要素, 输入要素连接字段="YDXZ_N", 连接要素=地类转换路径, 连接要素连接字段="新地类编号")

        # Process: 计算字段 (16) (计算字段) (management)
        输出要素 = bxarcpy.数据管理.字段计算(输入要素=输出要素, 字段名称="TDLX", 表达式="!Sheet1$.地类大类!", 字段类型="字符串")

        # Process: 移除连接 (3) (移除连接) (management)
        bxarcpy.数据管理.连接取消(输入要素=输出要素, 连接要素=地类转换路径)


def 入库_控制线(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 单元名称="临江单元", 批复时间="", 批复文号="", 道路中线要素名称="DL_道路中线", 道路边线要素名称="DL_道路边线", 高架桥要素名称="GZW_高架桥", 高架桥中心线要素名称="GZW_高架桥中心线", 隧道要素名称=None, 隧道中心线要素名称=None, 河道边线要素名称="DL_河道边线", 河道中线要素名称="DL_河道中线", 地块要素名称="DIST_用地规划图", 铁路线要素名称="GZW_铁路线", 输油管要素名称=None, 高压线要素名称="GZW_高压线", 天然气要素名称="GZW_天然气", 虚位控制河道要素名称="GZW_虚位控制河道", 虚位控制道路要素名称="GZW_虚位控制道路", 绿化控制线要素名称="GZW_绿化控制线"):
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.配置.是否覆盖输出要素 = True
        控制线要素 = bxarcpy.要素类.要素读取_通过名称("XG_KZX")
        控制线要素 = 控制线要素.要素创建_通过复制()
        # 控制线要素 = bxarcpy.要素类.要素创建_通过名称("XG_KZX", "线", 数据库路径=工作空间)
        # 控制线要素 = 控制线要素.要素创建_通过复制()

        控制线要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        控制线要素.字段添加("PFSJ", "日期", None, "批复时间").字段计算("PFSJ", f"'{批复时间}'")
        控制线要素.字段添加("PFWH", "字符串", 50, "批复文号").字段计算("PFWH", f"'{批复文号}'")
        控制线要素.字段添加("LXDM", "字符串", 20, "控制线类型代码")
        控制线要素.字段添加("LXMC", "字符串", 50, "控制线类型名称")
        控制线要素.字段添加("MC", "字符串", 50, "对象名称")

        with bxarcpy.游标类.游标创建_通过名称("插入", 控制线要素.名称, ["_形状", "LXDM", "LXMC", "MC"]) as 游标1:
            道路中线要素 = bxarcpy.要素类.要素读取_通过名称(道路中线要素名称)
            with bxarcpy.游标类.游标创建_通过名称("查询", 道路中线要素.名称, ["_形状", "道路名称", "道路等级"]) as 游标2:
                for x in 游标2:
                    y = {}
                    if x["道路等级"] in ["城市快速路"]:
                        y["LXDM"] = "DLZX-KS"
                        y["LXMC"] = "道路中心线-快速路"
                    elif x["道路等级"] in ["一级城市主干路", "普通城市主干路", "城市主干路"]:
                        y["LXDM"] = "DLZX-ZG"
                        y["LXMC"] = "道路中心线-主干路"
                    elif x["道路等级"] in ["城市次干路"]:
                        y["LXDM"] = "DLZX-CG"
                        y["LXMC"] = "道路中心线-次干路"
                    elif x["道路等级"] in ["城市支路"]:
                        y["LXDM"] = "DLZX-ZL"
                        y["LXMC"] = "道路中心线-支路"
                    else:
                        print("未识别到对应的道路等级")
                    y["MC"] = x["道路名称"]
                    y["_形状"] = x["_形状"]
                    游标1.行插入(y)

            道路边线要素 = bxarcpy.要素类.要素读取_通过名称(道路边线要素名称)
            with bxarcpy.游标类.游标创建_通过名称("查询", 道路边线要素.名称, ["_形状", "道路名称", "道路等级"]) as 游标2:
                for x in 游标2:
                    y = {}
                    if x["道路等级"] in ["城市快速路"]:
                        y["LXDM"] = "DLBX-KS"
                        y["LXMC"] = "道路边线-快速路"
                    elif x["道路等级"] in ["一级城市主干路", "普通城市主干路", "城市主干路"]:
                        y["LXDM"] = "DLBX-ZG"
                        y["LXMC"] = "道路边线-主干路"
                    elif x["道路等级"] in ["城市次干路"]:
                        y["LXDM"] = "DLBX-CG"
                        y["LXMC"] = "道路边线-次干路"
                    elif x["道路等级"] in ["城市支路"]:
                        y["LXDM"] = "DLBX-ZL"
                        y["LXMC"] = "道路边线-支路"
                    else:
                        print("未识别到对应的道路等级")
                    y["MC"] = x["道路名称"]
                    y["_形状"] = x["_形状"]
                    游标1.行插入(y)

            if 高架桥要素名称:
                高架桥要素 = bxarcpy.要素类.要素读取_通过名称(高架桥要素名称)
                高架桥中心线要素 = bxarcpy.要素类.要素读取_通过名称(高架桥中心线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 高架桥要素.名称, ["_形状", "道路名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "DLBX-GJ"
                        y["LXMC"] = "道路边线-高架"
                        y["MC"] = x["道路名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)
                with bxarcpy.游标类.游标创建_通过名称("查询", 高架桥中心线要素.名称, ["_形状", "道路名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "DLZX-GJ"
                        y["LXMC"] = "道路中心线-高架"
                        y["MC"] = x["道路名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 隧道要素名称:
                隧道要素 = bxarcpy.要素类.要素读取_通过名称(隧道要素名称)
                隧道中心线要素 = bxarcpy.要素类.要素读取_通过名称(隧道中心线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 隧道要素.名称, ["_形状", "道路名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "DLBX-SD"
                        y["LXMC"] = "道路边线-隧道"
                        y["MC"] = x["道路名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)
                with bxarcpy.游标类.游标创建_通过名称("查询", 隧道中心线要素.名称, ["_形状", "道路名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "DLZX-SD"
                        y["LXMC"] = "道路中心线-隧道"
                        y["MC"] = x["道路名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 河道中线要素名称:
                河道中线要素 = bxarcpy.要素类.要素读取_通过名称(河道中线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 河道中线要素.名称, ["_形状", "河道名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "HDZX"
                        y["LXMC"] = "河道中心线"
                        y["MC"] = x["河道名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

                河道边线要素 = bxarcpy.要素类.要素读取_通过名称(河道边线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 河道边线要素.名称, ["_形状", "河道名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "HDBX"
                        y["LXMC"] = "河道边线"
                        y["MC"] = x["河道名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            地块要素 = bxarcpy.要素类.要素读取_通过名称(地块要素名称)
            地块要素 = 地块要素.要素创建_通过面转线(是否识别并存储面邻域信息=False)
            with bxarcpy.游标类.游标创建_通过名称("查询", 地块要素.名称, ["_形状", "地类编号"]) as 游标2:
                from bxpy import bxstr

                for x in 游标2:
                    y = {}
                    if bxstr(x["地类编号"]).匹配正则(r".*(1401|1402).*"):
                        y["LXDM"] = "LHX"
                        y["LXMC"] = "绿化线"
                        y["MC"] = ""
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 铁路线要素名称:
                铁路线要素 = bxarcpy.要素类.要素读取_通过名称(铁路线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 铁路线要素.名称, ["_形状", "铁路名称"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "TL"
                        y["LXMC"] = "铁路"
                        y["MC"] = x["铁路名称"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 输油管要素名称:
                输油管要素 = bxarcpy.要素类.要素读取_通过名称(输油管要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 输油管要素.名称, ["_形状", "备注"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "SYG"
                        y["LXMC"] = "输油管"
                        y["MC"] = x["备注"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 高压线要素名称:
                高压线要素 = bxarcpy.要素类.要素读取_通过名称(高压线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 高压线要素.名称, ["_形状", "电压等级", "备注"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "GYX"
                        y["LXMC"] = "高压线"
                        y["MC"] = x["备注"] + x["电压等级"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 天然气要素名称:
                天然气要素 = bxarcpy.要素类.要素读取_通过名称(天然气要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 天然气要素.名称, ["_形状", "备注"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "GYX"
                        y["LXMC"] = "高压线"
                        y["MC"] = x["备注"]
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 虚位控制河道要素名称:
                虚位控制河道要素 = bxarcpy.要素类.要素读取_通过名称(虚位控制河道要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 虚位控制河道要素.名称, ["_形状"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "XWKZHD"
                        y["LXMC"] = "虚位控制河道"
                        y["MC"] = ""
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 绿化控制线要素名称:
                绿化控制线要素 = bxarcpy.要素类.要素读取_通过名称(绿化控制线要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 绿化控制线要素.名称, ["_形状"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "KZLHX"
                        y["LXMC"] = "控制绿化线"
                        y["MC"] = ""
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

            if 虚位控制道路要素名称:
                虚位控制道路要素 = bxarcpy.要素类.要素读取_通过名称(虚位控制道路要素名称)
                with bxarcpy.游标类.游标创建_通过名称("查询", 虚位控制道路要素.名称, ["_形状"]) as 游标2:
                    for x in 游标2:
                        y = {}
                        y["LXDM"] = "XWKZDL"
                        y["LXMC"] = "虚位控制道路"
                        y["MC"] = ""
                        y["_形状"] = x["_形状"]
                        游标1.行插入(y)

        控制线要素.字段删除(保留字段名称列表=["DYMC", "PFSJ", "PFWH", "LXDM", "LXMC", "MC"])
        控制线要素.要素创建_通过复制并重命名重名要素("XG_KZX")


def 入库_设施(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 设施要素名称="SS_配套设施", 单元名称="临江单元", 批复时间="", 批复文号=""):
    with bxarcpy.类.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.类.配置.是否覆盖输出要素 = True

        设施要素 = bxarcpy.要素类.要素读取_通过名称(设施要素名称)
        设施要素 = 设施要素.要素创建_通过复制()

        设施要素 = 设施要素.要素创建_通过复制并重命名重名要素("XG_PTSS")
        设施要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        设施要素.字段添加("PFSJ", "日期", None, "批复时间").字段计算("PFSJ", f"'{批复时间}'")
        设施要素.字段添加("PFWH", "字符串", 50, "批复文号").字段计算("PFWH", f"'{批复文号}'")
        设施要素.字段添加("SSDM", "字符串", 10, "配套设施代码").字段计算("SSDM", "!设施代码!")
        设施要素.字段添加("SSMC", "字符串", 50, "配套设施名称").字段计算("SSMC", "!设施名称!")
        设施要素.字段添加("DKBH", "字符串", 50, "地块编号").字段计算("DKBH", "!设施所在地块编号!")
        设施要素.字段添加("WZJD", "字符串", 10, "位置精确度").字段计算("WZJD", "'地块级'")
        设施要素.字段添加("YQYL", "字符串", 2, "远期预留").字段计算("YQYL", "!远期预留!")
        设施要素.字段添加("BZ", "字符串", 255, "备注").字段计算("BZ", "!备注说明!")

        设施要素.字段删除(保留字段名称列表=["DYMC", "PFSJ", "PFWH", "SSDM", "SSMC", "DKBH", "WZJD", "YQYL", "BZ"])


def 入库_用地(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 地块要素名称="DIST_用地规划图", 单元名称="临江单元", 批复时间="", 批复文号=""):
    with bxarcpy.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.配置.是否覆盖输出要素 = True

        地块要素 = bxarcpy.要素类.要素读取_通过名称(地块要素名称)
        地块要素 = 地块要素.要素创建_通过复制()

        需操作的字段名称列表 = ["地块编号"]
        地块编号最大值字典 = {}
        with bxarcpy.游标类.游标创建_通过名称("查找", 地块要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["地块编号"] not in ["", " ", None]:
                    地块编号序号 = int(x["地块编号"].split("-")[1])
                    地块所属街坊 = x["地块编号"].split("-")[0]
                    if 地块所属街坊 in 地块编号最大值字典:
                        地块编号最大值字典[地块所属街坊] = max(地块编号最大值字典[地块所属街坊], 地块编号序号)
                    else:
                        地块编号最大值字典[地块所属街坊] = 地块编号序号

        print(f"地块编号最大值字典：{地块编号最大值字典}")

        河道要素 = 地块要素.要素创建_通过筛选("地类编号 LIKE '1701%'")
        河道要素 = 河道要素.要素创建_通过融合(["地类编号", "所属街坊"]).要素创建_通过多部件至单部件().要素几何修复()
        河道要素.字段添加("地块编号")
        需操作的字段名称列表 = ["地块编号", "所属街坊"]
        with bxarcpy.游标类.游标创建_通过名称("更新", 河道要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                地块编号最大值字典[x["所属街坊"]] += 1
                x["地块编号"] = x["所属街坊"] + "-" + str(地块编号最大值字典[x["所属街坊"]]).zfill(2)

                游标.行更新(x)
        地块要素 = 地块要素.要素创建_通过更新并合并字段(河道要素.名称)

        # 道路要素.要素创建_通过联合([街坊范围线])
        道路要素 = 地块要素.要素创建_通过筛选("地类编号 LIKE '1207%' Or 地类编号 LIKE '060102%' Or 地类编号 LIKE '1202%'")
        道路要素 = 道路要素.要素创建_通过融合(["地类编号", "所属街坊", "地块性质别称"], 是否单部件=False).要素几何修复()
        道路要素.字段计算("地块编号", "!所属街坊! + '-' + !地块性质别称!")
        地块要素 = 地块要素.要素创建_通过更新并合并字段(道路要素.名称)

        地块要素 = 地块要素.要素创建_通过筛选("地块编号 <> ''")

        # 融合后要素 = 地块要素.要素创建_通过融合(None).要素创建_通过多部件至单部件().要素几何修复()
        # 融合后要素.字段添加("建设边界编号")
        # 需操作的字段名称列表 = ["建设边界编号"]
        # 编号 = 1
        # with bxarcpy.游标类.游标创建_通过名称("更新", 融合后要素.名称, 需操作的字段名称列表) as 游标:
        #     for x in 游标:
        #         x["建设边界编号"] = 单元编号 + "-" + "JSBJ" + str(编号).zfill(2)
        #         编号 += 1
        #         游标.行更新(x)
        # 融合后要素.字段删除(["ORIG_FID", "ORIG_FID_1"])

        地块要素 = 地块要素.要素创建_通过复制并重命名重名要素("XG_GHDK")
        地块要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        地块要素.字段添加("PFSJ", "日期", None, "批复时间").字段计算("PFSJ", f"'{批复时间}'")
        地块要素.字段添加("PFWH", "字符串", 50, "批复文号").字段计算("PFWH", f"'{批复文号}'")
        地块要素.字段添加("DKBH", "字符串", 50, "地块编号").字段计算("DKBH", "!地块编号!")
        地块要素.字段添加("DLDM", "字符串", 255, "地类代码").字段计算("DLDM", "!地类编号!")
        地块要素.字段添加("DLMC", "字符串", 255, "地类名称").字段计算("DLMC", "!性质名称!")
        地块要素.字段添加("DLBM", "字符串", 100, "地类编码").字段计算("DLBM", "!地块性质别称!")
        地块要素.字段添加("ZDLDM", "字符串", 10, "主地类代码").字段计算("ZDLDM", '!地类编号!.split("/")[0]')
        地块要素.字段添加("JRBL", "字符串", 10, "用地兼容比例")
        地块要素.字段添加("MJ", "双精度", 50, "用地面积").字段计算("MJ", "round(!Shape_Area!/10000, 2)")
        地块要素.字段添加("RJL", "单精度", 50, "容积率")
        地块要素.字段添加("LDL", "单精度", 50, "绿地率")
        地块要素.字段添加("JZMD", "单精度", 50, "建筑密度")
        地块要素.字段添加("JZGD", "单精度", 50, "建筑高度")
        地块要素.字段添加("XGLX", "字符串", 20, "限高类型")
        地块要素.字段添加("FJSS1", "字符串", 255, "附建设施1")
        地块要素.字段添加("FJSS2", "字符串", 255, "附建设施2")
        地块要素.字段添加("GXYQ", "字符串", 255, "城市设计刚性要求")
        地块要素.字段添加("TXYQ", "字符串", 255, "城市设计弹性要求")
        地块要素.字段添加("GHDT", "字符串", 10, "规划动态")
        地块要素.字段添加("XZYD", "字符串", 255, "选择用地")
        地块要素.字段添加("TDM", "字符串", 50, "土地码")
        地块要素.字段添加("BZ", "字符串", 255, "备注").字段计算("BZ", "!备注说明!")

        需操作的字段名称列表 = ["XGLX", "绝对高度", "配套设施规模", "FJSS1", "FJSS2", "开发动态", "GHDT", "地块编号", "TDM", "地类编号", "所属街区", "所属街坊", "BZ", "备注说明", "兼容比例", "JRBL", "RJL", "容积率", "LDL", "绿地率", "JZMD", "建筑密度", "JZGD", "建筑限高"]
        # for x in 需操作的字段名称列表:
        #     if x not in 地块要素.字段名称列表获取():
        #         print(f"该地类在要素中没有{x}")
        with bxarcpy.游标类.游标创建_通过名称("更新", 地块要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["地类编号"] in ["1207", "1202", "060102", "1701"]:
                    break
                if x["绝对高度"] in ["51.7", "65", "156.7"]:
                    x["XGLX"] = "机场限高"
                    if x["备注说明"] in ["", " ", None]:
                        x["BZ"] = f'限高{x["绝对高度"]}米（1985国家高程基准）'
                    else:
                        x["BZ"] = x["备注说明"] + f'，限高{x["绝对高度"]}米（1985国家高程基准）'
                if len(x["配套设施规模"]) > 255:
                    x["FJSS1"] = x["配套设施规模"][0:255]
                    x["FJSS2"] = x["配套设施规模"][255:]
                else:
                    x["FJSS1"] = x["配套设施规模"]
                if x["开发动态"] in ["现状已实施"]:
                    x["GHDT"] = "保留"
                elif x["开发动态"] in ["", " ", None] and x["地块编号"] not in ["", " ", None]:
                    x["GHDT"] = "新建"
                if x["地块编号"] not in ["", " ", None]:
                    主地类编号 = x["地类编号"].split("/")[0]
                    兼容性质数量 = len(x["地类编号"].split("/"))
                    街区编号 = x["所属街区"][-2:]
                    街坊编号 = x["所属街坊"][-2:]
                    地块编号 = x["地块编号"].split("-")[1].zfill(3)

                    土地码 = "H09009006" + 主地类编号.rjust(8, "0") + f"X{兼容性质数量}" + 街区编号 + 街坊编号 + 地块编号 + "0"
                    x["TDM"] = 土地码
                if x["兼容比例"] not in ["", " ", None]:
                    x["JRBL"] = x["兼容比例"].split("/")[0] + ":" + x["兼容比例"].split("/")[1]
                if x["容积率"] not in ["", " ", None]:
                    x["RJL"] = float(x["容积率"])
                else:
                    x["RJL"] = 0.0
                if x["绿地率"] not in ["", " ", None]:
                    x["LDL"] = float(x["绿地率"])
                else:
                    x["LDL"] = 0.0
                if x["建筑密度"] not in ["", " ", None]:
                    x["JZMD"] = float(x["建筑密度"])
                else:
                    x["JZMD"] = 0.0
                if x["建筑限高"] not in ["", " ", None]:
                    x["JZGD"] = float(x["建筑限高"])
                else:
                    x["JZGD"] = 0.0

                游标.行更新(x)

        地块要素.字段删除(保留字段名称列表=["DYMC", "PFSJ", "PFWH", "DKBH", "DLDM", "DLMC", "DLBM", "ZDLDM", "JRBL", "MJ", "RJL", "LDL", "JZMD", "JZGD", "XGLX", "FJSS1", "FJSS2", "GXYQ", "TXYQ", "GHDT", "XZYD", "TDM", "BZ"])


_用途分区要求 = {
    "陆域生态控制区": "陆域生态控制区内的林地按照《林地保护等级及保护管理措施》Ⅱ级林地的要求进行管控；陆域生态控制区的水域按照《浙江省水域保护办法》第十条规定中重要水域的要求进行管控；陆域生态控制区内的湿地按照《湿地保护管理规定》《浙江省湿地保护条例》的规定进行管控",
    "永久基本农田一般区": "农田保护区中的永久基本农田按照《基本农田保护条例》、《浙江省基本农田保护条例》《自然资源部农业农村部关于加强和改进永久基本农田保护工作的通知》等法律法规和文件的要求进行管控",
    "城镇集中建设区": "城镇集中建设区各类城镇建设用途的准入应符合国土空间规划和其他相关规划，优先使用存量建设用地，引导城镇低效用地再开发，提高建设用地使用效率，落实建设用地标准控制制度，开展节约集约用地评价，推广应用节地技术和节地模式",
    "城镇弹性发展区": "城镇弹性发展区应维持现状用途为主，限制开发城镇建设，仅允许符合国土空间规划和其他相关规划的交通能源水利等基础设施建设和村民生活必需的少量的村庄建设",
    "居住生活区": "居住生活区内可兼有部分绿地与广场用地、道路与交通设施用地、公用设施用地、公共管理与公共服务设施用地、商业服务业设施用地等。有条件也可兼有一类工业用地（或创新产业）、服务社区级以下规模物流仓储用地等",
    "综合服务区": "综合服务区内可兼有部分绿地与广场用地小规模绿地与广场用地、道路与交通设施用地、公用设施用地、居住用地、商业服务业设施用地等",
    "商业商务区": "商业商务区以商业服务业设施用地用途为主，可适当兼有居住用地、绿地与广场用地、道路与交通设施用地等公用设施用地等",
    "工业发展区": "工业发展区可兼有服务企业的居住用地、绿地与广场用地、公共管理与公共服务设施用地、道路与交通设施用地、公用设施用地、商业服务业设施用地等",
    "物流仓储区": "仓储物流区可兼有服务企业的居住用地、绿地与广场用地、公共管理与公共服务设施用地、道路与交通设施用地、公用设施用地、商业服务业设施用地等",
    "绿地休闲区": "绿地休闲区可兼有公共管理与公共服务设施用地、道路与交通设施用地、公用设施用地、商业服务业设施用地等",
    "交通枢纽区": "交通枢纽区可兼有公共管理与公共服务设施用地、绿地与广场用地、公用设施用地、商业服务业设施用地等",
    "战略预留区": "战略预留区内以规划留白用地为主，可兼有部分提前布置的道路与交通设施用地。在符合法律法规的前提下，可做临时功能使用，如城市苗圃花圃、市政临时停车场堆场等",
    "村庄建设区": "在符合国土空间规划和其他相关规划的前提下，村庄建设区准入宅基地、农村公共服务设施、交通市政基础设施、农产品加工仓储、农家乐、民宿、创意办公、休闲农业、乡村旅游配套设施等农村生产、生店相关的用途。原则上禁止大型工业园区、大型商业商务酒店开发等大规模城镇建设用途",
    "一般农业区": "一般农业区内的耕地优先用于粮食和棉、油、糖、蔬菜等农产品生产。一般农业区内鼓励依据国土空间规划、全域土地综合整冶规划等相关规划开展土地整治，提升耕地质量，促进区内建设用地、其他农用地整治为耕地。一般农业区中零星分布的永久基本农田在满足相应保护任务的前提下可通过国土空间规划的编制和实施调为一般耕地，在未调出前，按照相应规则管制",
    "农田整备区": "农田整备区内的现状耕地优先用于粮食和棉、油、糖、蔬菜等农产品生产。在符合国土空间规划和其他相关规划的前提下，鼓励通过建设用地复垦、宜耕后备资源开发、农用地整理和其他土地整治工程的实施，在非耕地地类上垦造耕地，提升耕地连片程度；鼓励开展耕地质量提升、旱地改水田等项目，提升耕地质量。",
    "区域基础设施集中区": "区域基础设施集中区允许准入符合国土空间规划和其他相关规划的各类基础设施建设项目及其配套设施。区域基础设施集中区允许准入符合国土空间规划和其他相关规划的耕地垦造、生态建设等用途",
    "特殊用地集中区": "在符合国土空间规划和其他相关规划的前提下，特殊用地集中区允许准入军事、宗教、安保、殡葬等用途及其他符合规划的用途",
}


def 入库_用途分区(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 用途分区要素名称="DIST_用途分区图", 单元名称="临江单元", 批复时间="", 批复文号="", 单元编号="QT12"):
    with bxarcpy.类.环境.环境管理器(临时工作空间=工作空间, 工作空间=工作空间):
        bxarcpy.类.配置.是否覆盖输出要素 = True

        用途分区要素 = bxarcpy.要素类.要素读取_通过名称(用途分区要素名称)
        用途分区要素 = 用途分区要素.要素创建_通过复制()

        融合后要素 = 用途分区要素.要素创建_通过融合(["用途分区名称"]).要素创建_通过多部件至单部件().要素几何修复()
        融合后要素.字段添加("用途分区编号")
        融合后要素 = 融合后要素.要素创建_通过排序([["用途分区名称", "正序"]])
        需操作的字段名称列表 = ["用途分区名称", "用途分区编号"]
        用途分区编号字典 = {}
        with bxarcpy.游标类.游标创建_通过名称("更新", 融合后要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                if x["用途分区名称"] not in 用途分区编号字典:
                    用途分区编号字典[x["用途分区名称"]] = 1
                x["用途分区编号"] = 单元编号 + "-" + "YTFQ" + str(用途分区编号字典[x["用途分区名称"]]).zfill(3)
                用途分区编号字典[x["用途分区名称"]] += 1
                游标.行更新(x)
        融合后要素.字段删除(["ORIG_FID", "ORIG_FID_1"])

        用途分区要素 = 融合后要素.要素创建_通过复制并重命名重名要素("XG_YTFQ")
        用途分区要素.字段添加("DYMC", "字符串", 50, "规划编制单元名称").字段计算("DYMC", f"'{单元名称}'")
        用途分区要素.字段添加("PFSJ", "日期", None, "批复时间").字段计算("PFSJ", f"'{批复时间}'")
        用途分区要素.字段添加("PFWH", "字符串", 50, "批复文号").字段计算("PFWH", f"'{批复文号}'")
        用途分区要素.字段添加("FQBM", "字符串", 20, "用途分区编码").字段计算("FQBM", "!用途分区编号!")
        用途分区要素.字段添加("FQLX", "字符串", 255, "用途分区类型").字段计算("FQLX", "!用途分区名称!")
        用途分区要素.字段添加("FQMJ", "双精度", 50, "用途分区面积").字段计算("FQMJ", "round(!Shape_Area!/10000, 2)")

        用途分区要素.字段添加("FQYQ", "字符串", 255, "用途分区要求")
        需操作的字段名称列表 = ["用途分区名称", "FQYQ"]
        with bxarcpy.游标类.游标创建_通过名称("更新", 用途分区要素.名称, 需操作的字段名称列表) as 游标:
            for x in 游标:
                x["FQYQ"] = _用途分区要求[x["用途分区名称"]]
                游标.行更新(x)

        用途分区要素.字段添加("BZ", "字符串", 255, "备注")

        用途分区要素.字段删除(["用途分区名称", "用途分区编号"])


if __name__ == "__main__":
    入库_村庄建设边界(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 村庄建设边界要素名称="KZX_村庄建设边界", 单元名称="临江单元", 批复时间="", 批复文号="", 单元编号="QT12")

    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 规划范围要素名称="JX_规划范围线", 单元编号="QT12", 单元名称="临江单元", 批复时间="", 批复文号="", 编制单位="浙江大学建筑设计研究院有限公司", 单元功能="以打造中国先进制造业的重要窗口为使命，以新材料产业为主导，生物医药和装备制造产业为特色，融高端智造、产业服务、现代物流于一体的一流示范产业园区。", 人口规模=3.18)
    入库_单元(工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb", 规划范围要素名称="JX_规划范围线", 单元编号="FY07", 单元名称="受降北单元", 批复时间="", 批复文号="", 编制单位="浙江大学建筑设计研究院有限公司", 单元功能="依托数字经济时代背景、银湖科技城产业平台、受降区位优势，打造以高品质生态居住区与创新产业联动平台为主导的“个性化、生态化、创新化”富阳未来宜居宜业新组团，“生态品质居住+创新智慧生产”的产城人融合活力新单元。", 人口规模=6.86)

    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 区域要素名称="JX_工业片区范围线", 单元名称="临江单元", 地块要素名称="DIST_用地规划图", 设施要素名称="SS_配套设施")
    入库_工业片区(工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb", 区域要素名称="JX_工业片区范围线", 单元名称="受降北单元", 地块要素名称="DIST_用地规划图", 设施要素名称="SS_配套设施")

    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 街区要素名称="JX_街区范围线", 单元名称="临江单元", 用地规划图要素名称="DIST_用地规划图", 层级="街区")
    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 区域要素名称="JX_街坊范围线", 单元名称="临江单元", 层级="街坊", 输出要素名称="XG_JQJF_JF")
    入库_街区街坊(工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb", 区域要素名称="JX_街坊范围线", 单元名称="受降北单元", 层级="街坊", 输出要素名称="XG_JQJF_JF")

    入库_局调入库(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 输入要素="\\AA_规划工业用地")
    # import arcpy

    # bxarcpy.配置.设置当前工作空间(工作空间路径=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb")

    # fcs = arcpy.ListFeatureClasses()
    # fcCount11 = len(fcs)
    # for fc11 in fcs:
    #     print(fc11)
    # print(fcCount11)

    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 单元名称="临江单元", 批复时间="", 批复文号="", 道路中线要素名称="DL_道路中线", 道路边线要素名称="DL_道路边线", 高架桥要素名称="GZW_高架桥", 高架桥中心线要素名称="GZW_高架桥中心线", 隧道要素名称=None, 隧道中心线要素名称=None, 河道边线要素名称="DL_河道边线", 河道中线要素名称="DL_河道中线", 地块要素名称="DIST_用地规划图", 铁路线要素名称="GZW_铁路线", 输油管要素名称=None, 高压线要素名称="GZW_高压线", 天然气要素名称="GZW_天然气", 虚位控制河道要素名称="GZW_虚位控制河道", 虚位控制道路要素名称="GZW_虚位控制道路", 绿化控制线要素名称="GZW_绿化控制线")
    入库_控制线(工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb", 单元名称="受降北单元", 批复时间="", 批复文号="", 道路中线要素名称="DL_道路中线", 道路边线要素名称="DL_道路边线", 高架桥要素名称=None, 高架桥中心线要素名称=None, 隧道要素名称=None, 隧道中心线要素名称=None, 河道边线要素名称=None, 河道中线要素名称=None, 地块要素名称="DIST_用地规划图", 铁路线要素名称=None, 输油管要素名称=None, 高压线要素名称=None, 天然气要素名称=None, 虚位控制河道要素名称=None, 虚位控制道路要素名称=None, 绿化控制线要素名称=None)

    入库_设施(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 设施要素名称="SS_配套设施", 单元名称="临江单元", 批复时间="", 批复文号="")

    # main(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 地块要素名称="DIST_用地规划图", 单元名称="临江单元", 批复时间="", 批复文号="")
    入库_生成土地码(工作空间=r"C:\Users\common\project\F富阳受降控规\受降北_数据库.gdb", 地块要素名称="XG_GHDK")

    入库_用途分区(工作空间=r"C:\Users\common\project\J江东区临江控规\临江控规_数据库.gdb", 用途分区要素名称="DIST_用途分区图", 单元名称="临江单元", 批复时间="", 批复文号="")
